{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"None","text":""},{"location":"#welcome-to-api-logic-server","title":"Welcome to API Logic Server","text":"<p>This is an old version of the docs - please see the current version</p> <p>API Logic Server creates customizable database web app projects:</p> <ul> <li> <p>Creation is Instant: create executable projects from your database with a single command.  Projects are Highly Functional, providing:</p> <ul> <li> <p>API: an endpoint for each table, with filtering, sorting, pagination and related data access</p> </li> <li> <p>Admin UI: multi-page / multi-table apps, with page navigations, automatic joins and declarative hide/show</p> </li> </ul> </li> <li> <p>Projects are Customizable, using your IDE: such as VSCode, PyCharm, etc, for familiar edit/debug services</p> </li> <li> <p>Business Logic Automation: using unique spreadsheet-like rules, extensible with Python </p> </li> </ul> <p> </p>"},{"location":"#why-it-matters-faster-simpler-modern-architecture","title":"Why It Matters: Faster, Simpler, Modern Architecture","text":"<p>API Logic Server can dramatically improve web app development:</p> <ul> <li> <p>Automation makes it faster: what used to require weeks or months is now immediate.  Unblock UI Dev, and engage business users - early - instead of investing in a misunderstanding.</p> </li> <li> <p>Automation makes it simpler: this reduces the risk of architectural errors, e.g., APIs without pagination.</p> </li> <li> <p>Automation guarantees a modern software architecture: container-ready, API-based, with shared logic between UIs and APIs (no more logic in UI controllers), in a predictable structure for maintenance.</p> </li> </ul>"},{"location":"#quick-evaluation-no-install","title":"Quick Evaluation - no install","text":"<p>You can avoid install hassles by exploring the Sample Project in Codespaces.  This will enable you to use VSCode - in your Browser, zero install - to:</p> <ul> <li>Create a project using the supplied sample database</li> <li>Examine the created project in VSCode (in your Browser)</li> <li>Use the Tutorial to run, customize and debug it </li> </ul> <p>We think you'll find Codespaces pretty amazing - check it out!</p> <p> </p>"},{"location":"#background","title":"Background","text":"<p>A brief look at why we built it, and our approach.</p>"},{"location":"#motivation-not-instant-propietary-ide-no-logic-automation","title":"Motivation - not instant, propietary IDE, no logic automation","text":"<p>We looked at approaches for building database systems:   </p> <ul> <li> <p>Frameworks: Frameworks like Flask or Django enable you to build a single endpoint or Hello World page, but a multi-endpoint API and multi-page application would take weeks or more.</p> </li> <li> <p>Low Code Tools: these are great for building great UIs, but</p> <ul> <li>Want a multi-page app, instantly -- no layout required each screen</li> <li>Want to preserve dev tools - VSCode, PyCharm, git, etc</li> <li>Need an answer for backend business logic (it's nearly half the effort)</li> </ul> </li> </ul>"},{"location":"#our-approach-instant-customizable-logic-automation","title":"Our Approach: Instant, Customizable, Logic Automation","text":"<p>API Logic Server is an open source Python project, consisting of:</p> <ul> <li> <p>a set of runtimes (SAFRS API, Flask, SQLAlchemy ORM, business logic engine) for project execution, plus </p> </li> <li> <p>a CLI (Command Language Interface) to create executable projects, which can be customized in an IDE such as VSCode or PyCharm</p> </li> </ul> <p>It runs as a standard pip install, or under Docker. After installation, you use the CLI create a project like this:</p> <p><pre><code>ApiLogicServer create --project_name=ApiLogicProject db_url=\n</code></pre> </p> <p> Key Takeaway</p> <p>API Logic Server reads your schema, and creates an executable, customizable project providing the features listed below.  Check it out here.</p> <p> </p>"},{"location":"#feature-summary","title":"Feature Summary","text":"Feature Providing Why it Matters Instant 1. Admin App Instant multi-page, multi-table app  (running here on PythonAnywhere) Engage Business UsersBack-office Admin 2. JSON:API and Swagger Endpoint for each table, with... Filtering, pagination, related data Custom UI DevApp Integration 3. Data Model Class Creation Classes for Python-friendly ORM Custom Data AccessUsed by API Customizable 4. Customizable Project Custom Endpoints, Logic Use Python and your IDE Customize and run Re-creation not required Unique Logic 5. Spreadsheet-like Business Rules 40X more concise - compare legacy code Unique backend automation  ... nearly half the system Extensible with Python Familiar Event Model Eg., Send messages, email Testing 6. Behave Test Framework Test Suite AutomationBehave Logic ReportDrive Automation with Agile Optimize Automation to get it fastAgile Collaboration to get it right"},{"location":"#instant-single-command","title":"Instant -- Single Command","text":"<p>Use the CLI to create the sample API and Admin App project, with a single command.</p> <p> </p>"},{"location":"#create-with-docker","title":"Create With Docker","text":"<p>Execute the following commands (Windows, use Windows Terminal or Powershell):</p> <p>Run API Logic Server in Docker<pre><code># Start the API Logic Server docker container\ndocker run -it --name api_logic_server --rm -p 5656:5656 -p 5002:5002 -v ${PWD}:/localhost apilogicserver/api_logic_server\n\nApiLogicServer create-and-run --project_name=/localhost/ApiLogicProject --db_url=\n</code></pre> </p>"},{"location":"#or-create-with-local-install","title":"Or, Create With Local Install","text":"<p>Presuming Python 3.7+ is installed, it's typically:</p> <p>Run API Logic Server from a local pip install<pre><code>python -m venv venv        # may require python3 -m venv venv\nsource venv/bin/activate   # windows venv\\Scripts\\activate\nvenv\\Scripts\\activate      # mac/linux: source venv/bin/activate\npython -m pip install ApiLogicServer\n\nApiLogicServer create --project_name=ApiLogicProject --db_url=  # or, create-and-run\npython ApiLogicProject/api_logic_server_run.py                  # run the server\n</code></pre> </p>"},{"location":"#execute","title":"Execute","text":"<p>Your system is running - explore the data and api at localhost:5656.  Using the defaults provided above, you have started the Tutorial, the recommended quick start for API Logic Server.</p> <p> </p>"},{"location":"#customize-in-ide","title":"Customize in IDE","text":"<p>VSCode and PyCharm users can customize and run/debug within their IDE with these steps.  Created projects include Launch and Docker configurations.  </p> <p>Rebuild services are provided to accomodate changes to database structure or ORM classes.</p> <p> </p>"},{"location":"#overview-video","title":"Overview Video","text":"<p>Project creation is based on database schema introspection as shown below: identify a database, and the <code>ApiLogicServer create</code> commands creates an executable, customomizable project.</p> <p>Click for a video tutorial, showing complete project creation, execution, customization and debugging.</p> <p></p> <p> </p>"},{"location":"#getting-started","title":"Getting Started","text":""},{"location":"#local-install","title":"Local Install","text":"<p>API Logic Server is designed to make it easy to get started:</p> <ul> <li> <p>Install and run Tutorial -  install, and explore the tutorial.  You'll create a complete project using the pre-installed sample database, explore its features, and support for customization and debugging. </p> </li> <li> <p>Installed Sample Databases - Here are some installed sample databases</p> </li> <li> <p>Dockerized Test Databases -  Then, you might like to try out some of our dockerized test databases.</p> </li> <li> <p>Your Database -  Finally, try your own database.</p> </li> </ul> <p> </p>"},{"location":"#use-cases","title":"Use Cases","text":"<p>There are a variety of ways for getting value from API Logic Server:</p> <ul> <li> <p>Create and Customize database web apps - the core target of the project</p> </li> <li> <p>Admin App for your database - the Admin App is a create way to navigate through your database, particularly to explore data relationships</p> </li> <li> <p>Data Repair - using the Admin App with logic to ensure integrity, repair data for which you may not have had time to create custom apps</p> </li> <li> <p>Project Creation - even if you do not intend to use the API, Admin App or logic, you can use API Logic Server to create project you then edit by hand.  Created projects will include the SQLAlchemy Data Models, and project structure</p> </li> <li> <p>Learning - explore the Learning Center to learn about key concepts of Flask and SQLAlchemy</p> </li> </ul> <p> </p>"},{"location":"#project-information","title":"Project Information","text":""},{"location":"#making-contributions","title":"Making Contributions","text":"<p>This is an open source project.  We are open to suggestions for enhancements.  Some of our ideas include:</p> Component Provides Consider Adding 1. JSON:API and Swagger API Execution Security authenticate, role-based access control active developmentMulti-DB support multiple databases active development/ APIServerless / Kubernetes - extend containerization 2. Transactional Logic Rule Enforcement New rule types 3. SAFRS React Admin Admin UI Enhancements Maps, trees, ... 4. This project API Logic Project Creation Support for features described above <p>To get started, please see  the Architecture..</p>"},{"location":"#preview-version","title":"Preview Version","text":"<p>You can try the pre-release at:</p> <pre><code>python3 -m pip install --index-url https://test.pypi.org/simple/ --extra-index-url https://pypi.org/simple ApiLogicServer==7.0.43\n</code></pre> <p>Or use:</p> <pre><code>docker run -it --name api_logic_server --rm -p 5656:5656 -p 5002:5002 -v ~/dev/servers:/localhost apilogicserver/api_logic_server_x\n</code></pre> <p>Or, you can use the beta version on codespaces.</p> <p>Notes - the following are not working:</p> <ul> <li>Swagger</li> <li>Passwords validation</li> </ul> <p> </p>"},{"location":"#status","title":"Status","text":"<p>We have tested several databases - see status here.</p> <p>We are tracking issues in git.</p> <p> </p>"},{"location":"#acknowledgements","title":"Acknowledgements","text":"<p>Many thanks to:</p> <ul> <li>Thomas Pollet, for SAFRS, SAFRS-react-admin, and invaluable design partnership</li> <li>Nitheish Munusamy, for contributions to Safrs React Admin</li> <li>Marelab, for react-admin</li> <li>Armin Ronacher, for Flask</li> <li>Mike Bayer, for SQLAlchemy</li> <li>Alex Gr\u00f6nholm, for Sqlacodegen</li> <li>Meera Datey, for React Admin prototyping</li> <li>Denny McKinney, for Tutorial review</li> <li>Achim G\u00f6tz, for design collaboration and testing</li> <li>Max Tardiveau, for testing and help with Docker</li> <li>Michael Holleran, for design collaboration and testing</li> <li>Nishanth Shyamsundar, for review and testing</li> <li>Thomas Peters, for review and testing</li> <li>Daniel Gaspar, for Flask AppBuilder</li> <li>Gloria Huber and Denny McKinney, for doc review</li> </ul> <p> </p>"},{"location":"#articles","title":"Articles","text":"<p>There are a few articles that provide some orientation to API Logic Server:</p> <ul> <li>How Automation Activates Agile</li> <li>How Automation Activates Agile - providing working software rapidly drives agile collaboration to define systems that meet actual needs, reducing requirements risk</li> <li>How to create application systems in moments</li> <li>Stop coding database backends\u2026Declare them with one command.</li> <li>Instant Database Backends</li> <li>Extensible Rules - defining new rule types, using Python</li> <li>Declarative{:target=\"blank\" rel=\"noopener\"} - exploring _multi-statement declarative technology</li> <li>Automate Business Logic With Logic Bank - general introduction, discussions of extensibility, manageability and scalability</li> <li>Agile Design Automation With Logic Bank - focuses on automation, design flexibility and agile iterations</li> <li>Instant Web Apps </li> </ul> <ol> <li> <p>See the FAQ for Low Code \u21a9</p> </li> </ol>"},{"location":"API-Customize/","title":"API Customization","text":"<p>While a standards-based API is a great start, sometimes you need custom endpoints tailored exactly to your business requirement.  Initially the API exposes all your tables as collection endpoints.  You can add additional endpoints by editing <code>expose_services.py</code>, as illustrated below. </p>"},{"location":"API-Customize/#use-flask","title":"Use Flask","text":"<p>You will observe the standard \"Hello World\" endpoint, which directly uses Flask.  These do not appear in Swagger.</p> <p> </p>"},{"location":"API-Customize/#use-safrs-endpoint-with-swagger","title":"Use SAFRS: endpoint with swagger","text":"<p>You can create these as shown below, where we create an additional endpoint for <code>add_order</code>.</p> <p>For more on customization, see SAFRS Customization docs.</p> <p>To review the implementation, and how to use the debugger for your custom endpoints: </p> <ol> <li>Open Explorer &gt; api/customize_api.py:</li> <li>Set the breakpoint as shown</li> <li>Use the swagger to access the <code>ServicesEndPoint &gt; add_order</code>, and</li> <li>Try it out, then </li> <li>execute</li> <li>Your breakpoint will be hit</li> <li>You can examine the variables, step, etc.</li> <li>Click Continue on the floating debug menu (upper right in screen shot below)</li> </ol>"},{"location":"API/","title":"JSON:API","text":""},{"location":"API/#jsonapi-related-data-filtering-sorting-pagination","title":"JSON:API - Related Data, Filtering, Sorting, Pagination","text":"<p>The <code>ApiLogicServer create</code> command creates an API Logic Project that implements your API.  No additional code is required.</p> <ul> <li> <p>You get an endpoint for each table, with CRUD support - create, read, update and delete.</p> </li> <li> <p>The API also supports related data access, based on relationships in the models file (typically derived from foreign keys).</p> </li> </ul> <p> </p> <p>Key Take-away: instant rich APIs, with filtering, sorting, pagination, related data access and swagger.  Custom App Dev is unblocked.</p> <p> </p>"},{"location":"API/#automatic-swagger-generation","title":"Automatic Swagger Generation","text":"<p>API creation includes automatic swagger generation.  </p> <p>Start the server, and open your Browser at <code>localhost:5656</code>.  Or, explore the sample app running at PythonAnyWhere.</p> <p> </p>"},{"location":"API/#provider-defined-vs-consumer-defined","title":"Provider-Defined vs. Consumer-Defined","text":"<p>JSON:APIs are interesting because they are Consumer-Defined, to reduce network traffic and minimize organizational dependencies.</p> <p>Contrast these to Provider-Defined APIs.  These can be simpler for interrnal users, whose needs can be determiend.</p> <p>But for a wider class of consumers (e.g., business partenrs), providers typically cannot predict consumer needs.  Consumers often resort to making multiple calls to obtain the data they need, or invoke APIs that return too much data.  These can increase network traffic.</p> <p> </p>"},{"location":"API/#swagger-to-construct-api-calls","title":"Swagger to construct API calls","text":"<p>Provider-defined API calls typically have more/longer arguments.  To facilitate creating invoking APIs, use swagger to obtain the url.</p> <p>Tip: use Swagger to debug your API parameters, then use the copy/paste services to use these in your application.</p> <p> </p>"},{"location":"API/#logic-enabled","title":"Logic Enabled","text":"<p>API Logic Server is so-named because all the update APIs automatically enforce your business Logic.</p> <p>Key Take-away: your API encapsulates your logic, factoring it out of APIs for greater concisenss and sharing / consistency</p> <p> </p>"},{"location":"API/#examples","title":"Examples","text":"<p>The Behave Tests provide several examples of using the API.  You can review them here.</p> <p> </p>"},{"location":"API/#key-usage-custom-apps","title":"Key Usage: custom apps","text":"<p>The automatic Admin App is useful, but most systems will require custom User Interfaces.  Use your favorite framework (eg, React).</p>"},{"location":"Admin-Customization/","title":"Admin Customization","text":"<p>The creation process does not create hundreds of lines of JavaScript and HTML.  </p> <p>Instead, it creates an _application model, represented in the <code>admin.yaml</code> file.  So, you can customize it easily, without requiring extensive JavaScript/HTML background, or deciphering generated code.</p> <p>Key Take-away: instant admin app, with logic, easy to customize</p>"},{"location":"Admin-Customization/#intelligent-default-creation","title":"Intelligent Default Creation","text":"<p>The system makes reasonable attempts to create useful applications</p> <ul> <li>automatic joins</li> <li>\"favorite\" fields are displayed first, such as field named <code>name</code>.</li> <li>You can configure your favorite names when creating: <pre><code>ApiLogicServer create --project_name=my-project \\\n                      --db_url=nw+ \\\n                      --favorites='nom nommes'\n</code></pre></li> <li>non-favorites (such as <code>id</code>) can be identified with the <code>--non_favorites</code> argument.</li> </ul>"},{"location":"Admin-Customization/#edit-adminyaml","title":"Edit <code>admin.yaml</code>","text":"<p>While these defaults are useful in creating a recognizable application, you will want to control the display order, override labels and so forth.  You can specify such customizations by editing the <code>admin.yaml</code> file below.</p> <p>This file is created initially by the system, so it's not necessary to learn the syntax in detail.  Instead, it's straight-forward to alter the file using your IDE or text editor.</p> <p>Press Browser refresh to reload the application after you make changes; it is not necessary to restart the server</p>"},{"location":"Admin-Customization/#models-and-admin-correlation","title":"Models and admin correlation","text":"<p>See this section.</p>"},{"location":"Admin-Customization/#not-altered-on-rebuild","title":"Not altered on <code>rebuild</code>","text":"<p>The rebuild commands do not override your customizations.  They do recreate <code>admin-created.yaml</code>.  You can use this to merge into your <code>admin.yaml</code>, e.g., to pick up new tables, relationships, etc.</p> <p> </p>"},{"location":"Admin-Customization/#show_when","title":"show_when","text":"<p>You can provide an expression that determines when a field (and its caption) are hidden.  For example, you might show the <code>Dues</code> only when the <code>EmployeeType</code> is Hourly, by declaring this in your <code>admin.yaml</code>:</p> <p><code>Dues</code> is hidden for non Hourly:</p> <p>and is visible for Hourly:</p> <p>It also works on update, such as insert:</p>"},{"location":"Admin-Customization/#hiding-fields-in-insert-mode","title":"Hiding Fields in Insert Mode","text":"<p>Note you can hide fields depending on the state of the form, e.g. for <code>OrderDetail</code>, we can hide the Id since it is generated by the system:</p> <pre><code>  OrderDetail:\nattributes:\n- label: ' Id*'\nname: Id\nsearch: true\nsort: true\nshow_when: isInserting == false\n</code></pre> <p> </p>"},{"location":"Admin-Customization/#multiple-adminyaml-files","title":"Multiple <code>admin.yaml</code> files","text":"<p>When creating your own admin files, we recommend starting with the created one.</p> <p>Also, use caution in removing resources, since these may be used in joins and lookups.</p>"},{"location":"Admin-Tour/","title":"Admin App Features","text":"<p>The <code>ApiLogicServer create</code> command creates an API Logic Project that implements an Admin App (React Admin), and an underlying API.  No additional code is required.</p> <p>Start the server, and open your Browser.  Here it is, running at PythonAnyWhere.</p> <p>Key features:</p> <ul> <li> <p>Multi-page - for each table, you get a list page and a detail page</p> <ul> <li>list pages provide filtering, sorting and pagination</li> </ul> </li> <li> <p>Multi-table - pages include related data: </p> <ul> <li>Tab Sheets for related child data (Order Details List)</li> <li>Automatic joins for related parent data (Product Name - not just the Id)</li> <li>Page Transitions for related data (e.g., on a Customer/Orders page, click an Order to see Order/OrderDetails)</li> </ul> </li> </ul> <p>This page illustrates some of the key features:  </p> <p> </p>"},{"location":"Admin-Tour/#use-cases","title":"Use Cases","text":"<p>The system automatically creates multi-page, multi-table applications as you'll see below.  Typical usage is described here.</p>"},{"location":"Admin-Tour/#back-office-admin","title":"Back Office Admin","text":"<p>Systems commonly include a number of \"back office\" admin apps that need to be usable, but do not warrant the time and cost of custom app development.  These are costly to build by hand.</p> <p>Automatic creation of such apps eliminates the time and expense of such back office apps from your project.</p>"},{"location":"Admin-Tour/#prototyping-agile-collaboration","title":"Prototyping / Agile Collaboration","text":"<p>It's a common observation that business users relate poorly to technical documentation such as data model diagrams, but instantly related to running pages containing their data.</p> <p>API Logic Server can create apps instantly, from just the data model.  Users are able to run the screens - including updates - and begin the collaboration process, such as: * identify data model issues (\"hey, wait, customers have more than 1 address\")</p> <ul> <li>identify rules (\"hmm, it needs to verify that balances do not exceed credit limits\")</li> </ul> <p>As such items are noted, you can update the data model, recreate, and iterate the design very rapidly, since there is no cost to create the API or the UI.</p>"},{"location":"Admin-Tour/#complements-custom-api-based-apps-automatic-api-and-logic-reuse","title":"Complements Custom API-based Apps (Automatic API and Logic Reuse)","text":"<p>That said, it's common that you will need custom apps for complex functions, customer-facing branding, and so forth.</p> <ul> <li> <p>Create these in your favorite technology (React, Angular, etc)</p> </li> <li> <p>Base them on the automatically created API, which handles not only data retrieval and update, but also enforces your business logic, which dramatically reduces client app dev effort by factoring out business logic to the shared API.</p> </li> </ul>"},{"location":"Admin-Tour/#architecture-react-based-on-created-logic-enabled-api","title":"Architecture - React, based on created logic-enabled API","text":"<p>The Admin App is created in your ApiLogicProject, and operates as follows:</p> <ol> <li>Applications are declared in yaml files, automatically created from your database</li> <li>The applications are Single Page React applications executing in the Browser, acquiring data via the SAFRS JSON:API.  </li> <li>Updates are submitted to SQLAlchemy; LogicBank listens for <code>before_flush</code> events, and enforces the logic declared in your <code>declare_logic.py</code>.</li> </ol> <p>For more information on Architecture, see Project Operation.</p> <p>Key Take-away: instant admin apps, an api for custom apps, with enforcement of declarative logic.</p> <p> </p>"},{"location":"Admin-Tour/#declare-behavior-in-adminyaml","title":"Declare Behavior in <code>admin.yaml</code>","text":"<p>As described in Admin Customization, you can declare your own customized labels, field orders, help text in the <code>admin.yaml</code> file.</p>"},{"location":"Admin-Tour/#multi-app-projects","title":"Multi-App Projects","text":"<p>Explore the sample project <code>ui/admin</code> directory.  You will note it contains several admin files (new for release 6.1).  Each file defines a separate admin app:</p> <ul> <li> <p>the default app is accessed by <code>http://localhost:5656/</code>,corresponding to <code>ui/admin/admin.yaml</code></p> </li> <li> <p>custom apps are accessed by <code>http://localhost:5656/admin/custom_app/</code>,corresponding to <code>ui/admin/custom_app.yaml</code></p> </li> </ul> <p>See Multiple admin.yaml files.</p> <p>Tip: Group-specific terminology</p> <p>You can use these to customize terminology for different user groups within an organization.  </p> <p>For example, <code>custom_app.yaml</code> file might be used by Accounting, with labels such Customer Account instead of Customer, Account Balance instead of Balance, and a re-ordered left-side navigation.</p> <p> </p>"},{"location":"Admin-Tour/#basics-browsing-your-data","title":"Basics: browsing your data","text":"<p>Let's explore the admin app for the sample database.</p>"},{"location":"Admin-Tour/#multi-page-multi-table-automatic-joins","title":"Multi-Page, Multi-Table, Automatic Joins","text":"<p>Explore basic data browsing:</p> <ol> <li>Navigate to <code>Customer</code></li> <li>Depending on your screen size, you may need to hit the \"hamburger menu\" (top left) to see the left menu</li> <li>Observe support for Pagination</li> <li>Observe support for Multi-Field Search</li> <li>Click the Customer row to drill down to see Customer Details</li> <li>Observe the <code>Placed Order List</code> tab at the bottom</li> <li>Observe the multi-table page: a tab is created for each foreign key relationship<ul> <li>You can customize your model if these are absent in your database</li> </ul> </li> <li>On the Customer page (shown below), click the first Placed Order row</li> <li>Observe you can navigate through your database, based on the foreign key relationships</li> </ol> <ol> <li>On the Order Page</li> <li>Observe the Product information<ul> <li>This was not stored in the <code>OrderDetail</code> row, which contains only the <code>ProductId</code> -- which is not interesting to users.</li> <li>The system provides automatic joins, selecting the most likely \"parent\" attribute (the attribute called <code>name</code>, or containing <code>name</code>)<ul> <li>You can tune this (e.g. for different languages) using the <code>--favorites</code> argument when creating your project.</li> </ul> </li> </ul> </li> <li>Click one of the <code>Product Id</code> values<ul> <li>Observe the modal dialog</li> </ul> </li> </ol> <p> </p> <p>Key Take-away: instant multi-page / multi-table admin apps, suitable for back office, and instant agile collaboration.</p>"},{"location":"Admin-Tour/#search-and-sort","title":"Search and Sort","text":"<p>Click the left menu to see the Customer list again</p> <ol> <li>Observe the pagination controls at the bottom right</li> <li>Enter a in the <code>Search</code> box</li> <li>Click the <code>Contact Title</code> to observe sorting</li> </ol>"},{"location":"Admin-Tour/#declarative-hideshow-show_when","title":"Declarative Hide/Show: <code>show_when</code>","text":"<p>You can provide an expression that determines when a field (and its caption) are hidden.  For example, you might show the <code>Dues</code> only when the <code>EmployeeType</code> is Hourly, by declaring this in your <code>admin.yaml</code>:</p> <p><code>Dues</code> is hidden for non Hourly:</p> <p>and is visible for Hourly:</p> <p>It also works on update, such as insert:</p> <p> </p>"},{"location":"Admin-Tour/#data-types","title":"Data Types","text":"<p>Your yaml can designate data types.   Browse the sample for example, such as <code>Order.Ready</code>:</p> <pre><code>      - name: Ready\ntype : Boolean\n</code></pre> <p> </p>"},{"location":"Admin-Tour/#images-local-or-url","title":"Images: local or URL","text":"<p>As of release 6.03.06, data fields can refer to images.  Explore the Employee page to see images, using the field <code>PhotoPath</code>.  </p>"},{"location":"Admin-Tour/#declaring-image-fields","title":"Declaring Image Fields","text":"<p>Edit your <code>ui/admin/admin.yaml</code> to designate images, e.g.:</p> <pre><code>      - name: PhotoPath\ntype: Image\n</code></pre>"},{"location":"Admin-Tour/#locally-stored-images","title":"Locally Stored Images","text":"<p>Images can be stored on the server, by placing them as shown in the diagram below:</p>"},{"location":"Admin-Tour/#url-based-images","title":"URL-based Images","text":"<p>You can also references images by url, such as Steele, specifying a value like:</p> <pre><code>https://encrypted-tbn0.gstatic.com/images?q=tbn:ANd9GcSWYaD6pHRUklVcWdaY4Jl2HOQCPfxJo8n2zj-ZYBvA8g&amp;s\n</code></pre> <p> </p>"},{"location":"Admin-Tour/#application-information","title":"Application Information","text":"<p>Developers can edit the <code>ui/admin/admin.yaml</code> to provide application help, as shown below.</p> <p>Users can elect to hide/show this info:</p> <ol> <li> <p>Info Toggle - on the personalization control, toggle the info control to display information at the top of each screen.  It's initial value is specified by the <code>ui/admin/admin.yaml</code> property: <code>info_toggle_checked: true</code>.</p> </li> <li> <p>Info Dialog - click this to show a pop-up dialog for help</p> </li> </ol>"},{"location":"Admin-Tour/#update","title":"Update","text":"<p>Your admin app has important support for making updates.</p>"},{"location":"Admin-Tour/#lookup","title":"Lookup","text":"<p>Many databases uses automatically generated primary keys.  These can simplify design, but it is unreasonable to expect end users to use these.</p> <p>For example, Products are identified by an <code>Id</code>.  To refer to a parent <code>Product</code>, child <code>OrderDetail</code> rows declare a foreign key from <code>OrderDetail.ProductId</code>.</p> <p>When adding or altering an order, it's unreasonable to expect end users to enter <code>ProductIds.</code> Lookup support addresses this issue.</p> <p>To explore Lookup support:</p> <ol> <li>On the Customer list</li> <li>Click the column header for <code>Company Name</code></li> <li>Remove the search criteria - this should return Alfreds Futterkiste to the top of the list</li> <li>Click that customer to drill down to the Customer Page</li> <li>Click the first Order</li> <li>On the Order page, click the pencil icon to enter update mode</li> <li>You should see the page shown below</li> <li>Position to the <code>Product</code> field, and begin typing to Lookup a different product</li> <li>Internally, the system will obtain the <code>Product.Id</code> and update the <code>OrderDetail.ProductId</code></li> <li>Click save</li> </ol>"},{"location":"Admin-Tour/#cascade-add","title":"Cascade Add","text":"<p>Cascade Add sets child Foreign Key values to corresponding parent values, such as setting the CustomerId for a new Order.  Support is also provided to add multiple rows, such as the Order Details for an Order.</p> <p>For example:</p> <ol> <li>Click Customer List</li> <li>Click the first Customer (name is \"Alfreds Futterkiste\", CustomerID <code>ALFKI</code>)</li> <li>Click + Add New Order (the bottom of the screen)</li> <li>On the ensuing Add, note the defaulted Customer at the bottom of the page</li> <li>Lookup Employee (Sales Rep)</li> <li> <p>Click Save and Show - you should see this page   </p> </li> <li> <p>Click Add New Order Detail</p> </li> <li>Lookup Product</li> <li> <p>Click Save and Add Another </p> </li> <li> <p>Lookup { start=10 } Product (choose a different one)</p> </li> <li>Click Save </li> </ol> <p>Observe that Logic Enforcement has computed the <code>Order Amount</code>.</p> <p> </p>"},{"location":"Admin-Tour/#logic-enforcement","title":"Logic Enforcement","text":"<p>Repeat the process above, but note the <code>Customer.Balance</code> before and after.  This adjustment occurred not because of typical code in UI controllers or api services, but because of the following rules in <code>logic/declare_logic.py:</code> <pre><code>    # get Product Price (e,g., on insert, or ProductId change)\n    Rule.copy(derive=models.OrderDetail.UnitPrice,\n              from_parent=models.Product.UnitPrice)\n    # compute price * qty\n    Rule.formula(derive=models.OrderDetail.Amount,\n                 as_expression=lambda row: row.UnitPrice * row.Quantity)\n\n    # adjust AmountTotal iff Amount changes\n    Rule.sum(derive=models.Order.AmountTotal,\n             as_sum_of=models.OrderDetail.Amount)\n\n    # adjust Balance iff AmountTotal or ShippedDate or CustomerID changes\n    Rule.sum(derive=models.Customer.Balance,\n             as_sum_of=models.Order.AmountTotal,\n             where=lambda row: row.ShippedDate is None)  # adjusts - *not* a sql select sum...\n    Rule.constraint(validate=models.Customer,\n                    as_condition=lambda row: row.Balance &lt;= row.CreditLimit,\n\n\n\n    def units_in_stock(row: models.Product, old_row: models.Product, logic_row: LogicRow):\n        result = row.UnitsInStock - (row.UnitsShipped - old_row.UnitsShipped)\n        return result\n    Rule.sum(derive=models.Product.UnitsShipped, as_sum_of=models.OrderDetail.Quantity,\n             where=\"row.ShippedDate is not None\")\n    Rule.formula(derive=models.Product.UnitsInStock, calling=units_in_stock)\n</code></pre> Such logic is automatically re-used over transactions, and is therefore equivalent to several hundred lines of code.  So, these rules also govern:</p> <ul> <li>changing an <code>OrderDetail.ProductId</code> (as we did here)</li> <li>changing an <code>OrderDetail.Quantity</code> </li> <li>adding <code>OrderDetail</code> rows</li> <li>deleting <code>OrderDetail</code> rows</li> <li>moving an <code>Order</code> to a new <code>Customer</code></li> <li>changing <code>Order.ShippedDate</code></li> <li>deleting an <code>Order</code></li> </ul> <p>One of the mechanisms to debug logic is the logic log; here is the log from changing the Product, above, illustrating that our change was a multi-table transaction, altering 5 rows:</p> <pre><code>Logic Phase:        ROW LOGIC(session=0x1072b1d30) (sqlalchemy before_flush)             - 2021-12-29 20:19:07,564 - logic_logger - INFO\n..OrderDetail[1040] {Update - client} Id: 1040, OrderId: 10643, ProductId:  [28--&gt;] 1, UnitPrice:  [45.6000000000--&gt;] 45.60000000000000142108547152020037174224853515625, Quantity: 15, Discount: 0.25, Amount: 684, ShippedDate:   row: 0x1071f2280  session: 0x1072b1d30 - 2021-12-29 20:19:07,564 - logic_logger - INFO\n..OrderDetail[1040] {copy_rules for role: Product - UnitPrice} Id: 1040, OrderId: 10643, ProductId:  [28--&gt;] 1, UnitPrice:  [45.6000000000--&gt;] 18.0000000000, Quantity: 15, Discount: 0.25, Amount: 684, ShippedDate:   row: 0x1071f2280  session: 0x1072b1d30 - 2021-12-29 20:19:07,565 - logic_logger - INFO\n..OrderDetail[1040] {Formula Amount} Id: 1040, OrderId: 10643, ProductId:  [28--&gt;] 1, UnitPrice:  [45.6000000000--&gt;] 18.0000000000, Quantity: 15, Discount: 0.25, Amount:  [684--&gt;] 270.0000000000, ShippedDate:   row: 0x1071f2280  session: 0x1072b1d30 - 2021-12-29 20:19:07,565 - logic_logger - INFO\n..OrderDetail[1040] {Prune Formula: ShippedDate [['Order.ShippedDate']]} Id: 1040, OrderId: 10643, ProductId:  [28--&gt;] 1, UnitPrice:  [45.6000000000--&gt;] 18.0000000000, Quantity: 15, Discount: 0.25, Amount:  [684--&gt;] 270.0000000000, ShippedDate:   row: 0x1071f2280  session: 0x1072b1d30 - 2021-12-29 20:19:07,565 - logic_logger - INFO\n....Product[1] {Update - Adjusting Product: UnitsShipped, UnitsShipped} Id: 1, ProductName: Chai, SupplierId: 1, CategoryId: 1, QuantityPerUnit: 10 boxes x 20 bags, UnitPrice: 18.0000000000, UnitsInStock: 39, UnitsOnOrder: 0, ReorderLevel: 10, Discontinued: 0, UnitsShipped:  [0--&gt;] 15  row: 0x1071f2df0  session: 0x1072b1d30 - 2021-12-29 20:19:07,567 - logic_logger - INFO\n....Product[1] {Formula UnitsInStock} Id: 1, ProductName: Chai, SupplierId: 1, CategoryId: 1, QuantityPerUnit: 10 boxes x 20 bags, UnitPrice: 18.0000000000, UnitsInStock:  [39--&gt;] 24, UnitsOnOrder: 0, ReorderLevel: 10, Discontinued: 0, UnitsShipped:  [0--&gt;] 15  row: 0x1071f2df0  session: 0x1072b1d30 - 2021-12-29 20:19:07,567 - logic_logger - INFO\n....Product[28] {Update - Adjusting Old Product} Id: 28, ProductName: R\u00f6ssle Sauerkraut, SupplierId: 12, CategoryId: 7, QuantityPerUnit: 25 - 825 g cans, UnitPrice: 45.6000000000, UnitsInStock: 26, UnitsOnOrder: 0, ReorderLevel: 0, Discontinued: 1, UnitsShipped:  [0--&gt;] -15  row: 0x1072bd730  session: 0x1072b1d30 - 2021-12-29 20:19:07,568 - logic_logger - INFO\n....Product[28] {Formula UnitsInStock} Id: 28, ProductName: R\u00f6ssle Sauerkraut, SupplierId: 12, CategoryId: 7, QuantityPerUnit: 25 - 825 g cans, UnitPrice: 45.6000000000, UnitsInStock:  [26--&gt;] 41, UnitsOnOrder: 0, ReorderLevel: 0, Discontinued: 1, UnitsShipped:  [0--&gt;] -15  row: 0x1072bd730  session: 0x1072b1d30 - 2021-12-29 20:19:07,568 - logic_logger - INFO\n....Order[10643] {Update - Adjusting Order: AmountTotal} Id: 10643, CustomerId: ALFKI, EmployeeId: 6, OrderDate: 2013-08-25, RequiredDate: 2013-09-22, ShippedDate: None, ShipVia: 1, Freight: 29.4600000000, ShipName: Alfreds Futterkiste, ShipAddress: Obere Str. 57, ShipCity: Berlin, ShipRegion: Western Europe, ShipPostalCode: 12209, ShipCountry: Germany, AmountTotal:  [1086.00--&gt;] 672.0000000000, Country: None, City: None  row: 0x1072b1490  session: 0x1072b1d30 - 2021-12-29 20:19:07,569 - logic_logger - INFO\n......Customer[ALFKI] {Update - Adjusting Customer: Balance} Id: ALFKI, CompanyName: Alfreds Futterkiste, ContactName: Maria Anders, ContactTitle: Sales Representative, Address: Obere Str. 57, City: Berlin, Region: Western Europe, PostalCode: 12209, Country: Germany, Phone: 030-0074321, Fax: 030-0076545, Balance:  [2102.0000000000--&gt;] 1688.0000000000, CreditLimit: 2200.0000000000, OrderCount: 15, UnpaidOrderCount: 10  row: 0x107210670  session: 0x1072b1d30 - 2021-12-29 20:19:07,570 - logic_logger - INFO\nLogic Phase:        COMMIT(session=0x1072b1d30)                                          - 2021-12-29 20:19:07,572 - logic_logger - INFO\n....Order[10643] {Commit Event} Id: 10643, CustomerId: ALFKI, EmployeeId: 6, OrderDate: 2013-08-25, RequiredDate: 2013-09-22, ShippedDate: None, ShipVia: 1, Freight: 29.4600000000, ShipName: Alfreds Futterkiste, ShipAddress: Obere Str. 57, ShipCity: Berlin, ShipRegion: Western Europe, ShipPostalCode: 12209, ShipCountry: Germany, AmountTotal:  [1086.00--&gt;] 672.0000000000, Country: None, City: None  row: 0x1072b1490  session: 0x1072b1d30 - 2021-12-29 20:19:07,572 - logic_logger - INFO\n</code></pre> <p>Note: your log is truncated to make it easy to view on a console, as explained in the link above.</p>"},{"location":"Architecture-What-Is/","title":"What is API Logic Server","text":"<p>API Logic Server is a Python Application, consisting of:</p> <ol> <li>Runtimes for ApiLogicProject execution</li> <li>CLI (Command Language Interface - provides <code>ApiLogicServer create</code>\u2026`)</li> </ol> <p>It executes either as a locally install (venv), or a Docker image (which includes Python)</p>"},{"location":"Architecture/","title":"Architectural Overview","text":""},{"location":"Architecture/#architectural-overview","title":"Architectural Overview","text":""},{"location":"Architecture/#docker-containers","title":"Docker Containers","text":"<p>As shown below, there are typically 2-3 \"machines\" in operation: * Your local host (in grey), where the Customizable Project files (<code>ApiLogicProject</code>) are stored,  and your Dev Tools (IDE etc) operate</p> <ul> <li>The ApiLogicServer Docker container (blue), which contains:</li> <li>The ApiLogicServer, with CLI (Command Language Interface) commands:<ul> <li><code>create</code> to create projects on your local host</li> <li><code>run</code> to execute projects, utilizing the various runtimes (Flask, SQLAlchemy, SAFRS API, Logic, Flask App Builder)</li> </ul> </li> <li>A Python environment to support execution, and development using your IDE</li> <li> <p>Neither API nor logic execution creates / uses additional files or database data; your database access is via standard SQLAlchemy models</p> <ul> <li>The exception to this is Flask App Builder, which creates additional database tables for security authorization</li> </ul> </li> <li> <p>The database (purple) can run as a separate Docker container, in your local host, or (for the demo) within the ApiLogicServer docker container</p> </li> </ul>"},{"location":"Architecture/#pip-install-apilogicserver-in-local-python-environment","title":"Pip Install - ApiLogicServer in local Python environment","text":"Alternative option: pip install <p>You can also run ApiLogicServer without Docker.  The familiar <code>pip install ApiLogicServer</code> creates the ApiLogicServer in your <code>venv</code> instead of the Docker container.  The contents are identical - the ApiLogicServer <code>create</code> and <code>run</code> components.</p> <p>We recommend, however, that you take a good look at Docker: * It avoids a sometimes-tricky Python install * It isolates your projects into containers * It is quite likely the eventual deployment architecture, so you're already in step with that</p>"},{"location":"Architecture/#apilogicserver-key-components","title":"ApiLogicServer Key Components","text":"Component Provides SQLAlchemy Python-friendly ORM (analogous to Hiberate, JPA) Logic Bank Multi-Table Derivation and Constraint RulesPython Events (e.g., send mail, message)Extensible with Python SAFRS JSON:API and swagger, based on SQLAlchemy SAFRS-React-Admin Executable React Admin UI, using SAFRS"},{"location":"Architecture/#project-structure","title":"Project Structure","text":"<p>When you have created your project, you will find the following project directory in <code>~/dev/servers</code> on your (grey) local host   (here opened in VS Code):</p> <p>Your docker container (blue) files include Python, Python libraries, and API Logic Server.  The Python project above utilizes IDE <code>remote-container</code> support (visible at the lower left in the preceding diagram), which utilizes the docker container (not local host) version of Python.</p> <p>Your docker container looks like this:</p>"},{"location":"Architecture/#ide-friendly","title":"IDE Friendly","text":"<p>The project structure above can be loaded into any IDE for code editing, deubgging, etc.  For more information on using IDEs, see here.</p>"},{"location":"Architecture/#tool-friendly-file-based","title":"Tool-friendly - file-based","text":"<p>All project elements are files - no database or binary objects.  So, you can store objects in source control systems like git, diff/merge them, etc.</p>"},{"location":"Architecture/#internals-how-it-works","title":"Internals - How It Works","text":""},{"location":"Architecture/#project-creation","title":"Project Creation","text":"<p>The ApiLogicServer CLI <code>create</code> (or <code>create-and-run</code>) command creates the project structure shown below - for more information, see here.</p> <p> </p>"},{"location":"Architecture/#api-execution-api_logic_server_runpy","title":"API Execution: <code>api_logic_server_run.py</code>","text":"<p>Execution begins in <code>api_logic_server_run.py</code>.  Your customizations are done to the files noted in the callouts below.</p> <p><code>api_logic_server_run.py</code> (a file created in your ApiLogicProject) sets up a Flask app, the database, logic and api:</p> <ol> <li> <p>Database Setup: It imports<code>api/expose_api_models</code> which imports <code>database/models.py</code>, which then imports <code>database/customize_models.py</code> for your model extensions.  <code>api_logic_server_run.py</code> then sets up flask, and opens the  database with <code>db = safrs.DB</code></p> </li> <li> <p>Logic Setup: It then calls <code>LogicBank.activate</code>, passing <code>declare_logic</code> which loads your declared rules into Logic Bank.</p> </li> <li> <p>API Setup: It next invokes <code>api/expose_api_models</code>.  This calls safrs to create the end points and the swagger information, based on the created <code>database/models.py</code> (the models used by the SQLAlchemy ORM).   It finally calls <code>api/customize.py</code> where you can add your own services.  The sample includes a trivial Hello World, as well as <code>add_order</code>.</p> </li> </ol>"},{"location":"Architecture/#logic-execution","title":"Logic Execution","text":"<p>SAFRS API listens for API calls, e.g., from the Admin App.  When updates are issued:</p> <ol> <li> <p>Invokes SQLAlchemy updates: SAFRS calls SQLAlchemy, passing a set of rows comprising a database transaction</p> </li> <li> <p><code>before_flush</code>: SQLAlchemy provides a <code>before_flush</code> event, where all the update rows are assembled and passed to <code>Logic Bank</code>  (no relation to retail!).</p> </li> <li> <p>Logic Execution: Logic Bank reviews the rows, and based on what has change, prunes rules for unchanged data, and executes / optimizes relevant logic in an appropriate order.  </p> </li> </ol>"},{"location":"Architecture/#declarative-logic-is-critical","title":"Declarative Logic is critical","text":"<p>Logic addresses multi-table derivations, constraints, and actions such as sending messages or emails.  These can constitute nearly half the effort in transactional systems.</p>"},{"location":"Architecture/#admin-app-execution-uiadminadminyaml","title":"Admin App Execution: <code>ui/admin/admin.yaml</code>","text":"<p>http://localhost:5656/ redirects to <code>ui/admin/index.html</code> which loads the react-admin single-page app into your browser.</p> <p>It then loads your <code>ui/admin/admin.yaml</code>, and responds to the various clicks by invoking the API (and hence the update logic), or the swagger at http://localhost:5656/api.</p>"},{"location":"Architecture/#key-observations-extensible-declarative-automation","title":"Key Observations: Extensible Declarative Automation","text":"<p>While the most striking element of ApiLogicServer is automation - a running UI and API from a database - there are some important aspects, described below.</p>"},{"location":"Architecture/#customizable-declarative-models","title":"Customizable, Declarative Models","text":"<p>Observe that the key files for defining API, UI and Logic are not procedural code.  They are declarative: specifications of what you want to happen, not how it's implemented:</p> <ul> <li> <p>Logic looks more like a specification than code</p> </li> <li> <p>UI looks like a list of Objects and Attributes to display</p> </li> <li> <p>API looks like a list of Objects</p> </li> </ul> <p>This is important because they are orders of magnitude shorter, and therefore far easier to understand, and to customize.</p> <p>For example, consider the UI, defined by <code>ui/admin/admin.yaml</code>.  This is in lieu of hundreds of lines of very complex HTML and JavaScript.</p>"},{"location":"Architecture/#extensible","title":"Extensible","text":"<p>ApiLogicServer makes provisions for you to add standard Python code for aspects of your project that are automated - custom end points, extensions to the data model, logic (rules plus Python).  </p> <p>And, of course, the API means you are unblocked for creating custom UIs and integrations.</p>"},{"location":"Architecture/#includes-logic","title":"Includes Logic","text":"<p>As noted above, multi-table constraints and derivations can constitute nearly half the effort in transactional systems.</p> <p>Unlike most systems that address such logic with \"your code goes here\", ApiLogicServer provides declarative spreadsheet-like rules, extensible with Python, as described here.  Rules are 40X more concise than code.  </p> <p>Rule execution is via a transaction logic engine, a complementary technology to traditional RETE engines.  The transaction logic engine is specifically designed to optimize integrity and performance for transactional logic, which is not possible in RETE engines. See here for more information on their operation.</p>"},{"location":"Architecture/#technology-adoption-considerations","title":"Technology Adoption Considerations","text":""},{"location":"Architecture/#standards-based","title":"Standards-based","text":"<p>Development and runtime architectures are what programmers expect: * As noted above, the Key Project Components are standard Python packages for APIs, data access. * Projects developed in standard IDEs, and deployed in standard containers.</p>"},{"location":"Architecture/#near-zero-learning-curve-no-frameworks-etc","title":"Near-Zero Learning Curve - no frameworks, etc","text":"<p>ApiLogicServer has a near-zero learning curve.  You do not need to know Python, SQLAlchemy, React, or JSONapi_logic_serverPIs to get started.  You have a running project in moments, customizable without requiring deep understanding of any of these frameworks.  Making extensions, of course, begins to require more technical background.</p>"},{"location":"Architecture/#allow-a-few-days-for-learning-logic","title":"Allow a few days for learning logic","text":"<p>Logic represents the starkest different between procedural code and declarative rules.  It requires a few days to get the hang of it.  We recommend you explore this documentation.</p>"},{"location":"Architecture/#business-agility","title":"Business Agility","text":"<p>ApiLogicServer automation creates a running project nearly instantly, but it also is designed to help you adapt to business changes more rapidly:</p> <ul> <li>Rebuild support to update existing projects from database or data model changes</li> <li>Logic provides automatic reordering and reoptimization as logic is altered</li> </ul>"},{"location":"Architecture/#technology-agility-an-application-virtual-machine","title":"Technology Agility - an Application Virtual Machine","text":"<p>Models are, somewhat by their very nature, rather technology independent.  Instead of React, the UI specification could be implemented on Angular.  Instead of interpreted, the logic could be code-generated onto any language.  And so forth.</p> <p>You can think of the Key Project Components as an Application Virtual Machine that executes ApiLogicProjects.  As new underlying technology becomes available, new AVMs could be developed that migrate the declarative elements of your UI, API and Logic - without coding change.  Because, they are models, not code.</p> <p>This provides an unprecedented preservation of your application investment over underlying technology change. </p>"},{"location":"Architecture/#automation-reduces-risk","title":"Automation Reduces Risk","text":"<p>Automation not only gets results fast and simplifies adapting to change, it also reduces risk.</p>"},{"location":"Architecture/#coding-risk","title":"Coding Risk","text":"<p>The most troublesome bugs are silent failures - no stacktrace, but the wrong answer.</p> <p>Automation address this by designing out whole classes of error:</p> <ul> <li>the UI and API just work</li> <li>logic is automatically re-used over all Use Cases</li> </ul>"},{"location":"Architecture/#architectural-risk","title":"Architectural Risk","text":"<p>Technology complexity makes it get hard to get projects that even work, much less work right.  Projects commonly suffer from a wide variety of architectural flaws:</p> <ul> <li>business logic is not shared, but repeated in each UI controller... and each integration</li> <li>pagination may not be provided for all screens</li> </ul> <p>And so forth.  These cause project failures, far too often.</p> <p>But automation can help - since your declarative models only stipulate what, the system bears the responsibility for the how -- and getting it right.  Each of the architectural items above are automated by the system.</p>"},{"location":"Architecture/#requirements-risk","title":"Requirements Risk","text":"<p>Requirements risk can represent an even greater challenge.  The reality that users may only realize the real requirements when they actually use running screens with real data.  The problem, of course, is that these are often available after considerable time and effort.</p> <p>That's why working software now is so important - users get screens right away.  These can identify data model errors (\"hey... customers have more than one address\") or business logic requirements (\"hey.... we need to check the credit limit\").</p>"},{"location":"Behave-Logic-Report/","title":"Behave Logic Report","text":""},{"location":"Behave-Logic-Report/#behave-logic-report","title":"Behave Logic Report","text":"<p>This is the sample project from API Logic Server, based on the Northwind database (sqlite database located in the <code>database</code> folder - no installation required):</p> <p>The sample Scenarios below were chosen to illustrate the basic patterns of using rules.  Open the disclosure box (\"Tests - and their logic...\") to see the implementation and notes.</p> <p> </p>"},{"location":"Behave-Logic-Report/#feature-about-sample","title":"Feature: About Sample","text":""},{"location":"Behave-Logic-Report/#scenario-transaction-processing","title":"Scenario: Transaction Processing","text":"<p>\u2003  Scenario: Transaction Processing \u2003\u2003    Given Sample Database \u2003\u2003    When Transactions are submitted \u2003\u2003    Then Enforce business policies with Logic (rules + code)  </p> Tests - and their logic - are transparent.. click to see Logic <p> </p> <p>Rules Used in Scenario: Transaction Processing  Logic Log in Scenario: Transaction Processing <pre><code>Rule Bank[0x112748b20] (loaded 2022-04-24 11:30:09.684176\nMapped Class[Customer] rules\n  Constraint Function: None\n  Derive Customer.Balance as Sum(Order.AmountTotal Where &lt;function declare_logic.&lt;locals&gt;.&lt;lambda&gt; at 0x11282c280&gt;\n  Derive Customer.UnpaidOrderCount as Count(&lt;class 'database.models.Order'&gt; Where &lt;function declare_logic.&lt;locals&gt;.&lt;lambda&gt; at 0x11291e940&gt;\n  Derive Customer.OrderCount as Count(&lt;class 'database.models.Order'&gt; Where None\nMapped Class[Order] rules\n  Derive Order.AmountTotal as Sum(OrderDetail.Amount Where None\n  RowEvent Order.congratulate_sales_rep()\n  Derive Order.OrderDetailCount as Count(&lt;class 'database.models.OrderDetail'&gt; Where None\n  RowEvent Order.clone_order()\nMapped Class[OrderDetail] rules\n  Derive OrderDetail.Amount as Formula (1): as_expression=lambda row: row.UnitPrice * row.Qua [...\n  Derive OrderDetail.UnitPrice as Copy(Product.UnitPrice\n  Derive OrderDetail.ShippedDate as Formula (2): row.Order.ShippedDat\nMapped Class[Product] rules\n  Derive Product.UnitsShipped as Sum(OrderDetail.Quantity Where &lt;function declare_logic.&lt;locals&gt;.&lt;lambda&gt; at 0x11291e700&gt;\n  Derive Product.UnitsInStock as Formula (1): &lt;function\nMapped Class[Employee] rules\n  Constraint Function: &lt;function declare_logic.&lt;locals&gt;.raise_over_20_percent at 0x1129501f0&gt;\n  RowEvent Employee.audit_by_event()\n  Copy to: EmployeeAudi\nLogic Bank - 22 rules loaded - 2022-04-24 11:30:21,866 - logic_logger - INF\n</code></pre></p> <p> </p>"},{"location":"Behave-Logic-Report/#feature-application-integration","title":"Feature: Application Integration","text":""},{"location":"Behave-Logic-Report/#scenario-get-customer","title":"Scenario: GET Customer","text":"<p>\u2003  Scenario: GET Customer \u2003\u2003    Given Customer Account: VINET \u2003\u2003    When GET Orders API \u2003\u2003    Then VINET retrieved  </p> <p> </p>"},{"location":"Behave-Logic-Report/#scenario-get-department","title":"Scenario: GET Department","text":"<p>\u2003  Scenario: GET Department \u2003\u2003    Given Department 2 \u2003\u2003    When GET Department with SubDepartments API \u2003\u2003    Then SubDepartments returned  </p> <p> </p>"},{"location":"Behave-Logic-Report/#feature-place-order","title":"Feature: Place Order","text":""},{"location":"Behave-Logic-Report/#scenario-good-order-custom-service","title":"Scenario: Good Order Custom Service","text":"<p>\u2003  Scenario: Good Order Custom Service \u2003\u2003    Given Customer Account: ALFKI \u2003\u2003    When Good Order Placed \u2003\u2003    Then Logic adjusts Balance (demo: chain up) \u2003\u2003    Then Logic adjusts Products Reordered \u2003\u2003    Then Logic sends email to salesrep \u2003\u2003    Then Logic adjusts aggregates down on delete order  </p> Tests - and their logic - are transparent.. click to see Logic <p> </p> <p>Logic Doc for scenario: Good Order Custom Service</p> <p>We place an Order with an Order Detail.  It's one transaction.</p> <p>Note how the <code>Order.OrderTotal</code> and <code>Customer.Balance</code> are adjusted as Order Details are processed. Similarly, the <code>Product.UnitsShipped</code> is adjusted, and used to recompute <code>UnitsInStock</code></p> <p>Key Takeaway: sum/count aggregates (e.g., <code>Customer.Balance</code>) automate chain up multi-table transactions.</p> <p>Events - Extensible Logic</p> <p>Inspect the log for Hi, Andrew - Congratulate Nancy on their new order. </p> <p>The <code>congratulate_sales_rep</code> event illustrates logic  Extensibility  - using Python to provide logic not covered by rules,  like non-database operations such as sending email or messages.</p> <p>There are actually multiple kinds of events:</p> <ul> <li>Before row logic</li> <li>After row logic</li> <li>On commit, after all row logic has completed (as here), so that your code \"sees\" the full logic results</li> </ul> <p>Events are passed the <code>row</code> and <code>old_row</code>, as well as <code>logic_row</code> which enables you to test the actual operation, chaining nest level, etc.</p> <p>You can set breakpoints in events, and inspect these.</p> <p> </p> <p>Rules Used in Scenario: Good Order Custom Service <pre><code>  Customer  \n    1. Derive Customer.UnpaidOrderCount as Count(&lt;class 'database.models.Order'&gt; Where &lt;function declare_logic.&lt;locals&gt;.&lt;lambda&gt; at 0x11291e940&gt;)  \n    2. Derive Customer.OrderCount as Count(&lt;class 'database.models.Order'&gt; Where None)  \n    3. Derive Customer.Balance as Sum(Order.AmountTotal Where &lt;function declare_logic.&lt;locals&gt;.&lt;lambda&gt; at 0x11282c280&gt;)  \n  Order  \n    4. RowEvent Order.congratulate_sales_rep()   \n    5. Derive Order.OrderDetailCount as Count(&lt;class 'database.models.OrderDetail'&gt; Where None)  \n    6. RowEvent Order.clone_order()   \n    7. Derive Order.AmountTotal as Sum(OrderDetail.Amount Where None)  \n  OrderDetail  \n    8. Derive OrderDetail.UnitPrice as Copy(Product.UnitPrice)  \n    9. Derive OrderDetail.ShippedDate as Formula (2): row.Order.ShippedDate  \n    10. Derive OrderDetail.Amount as Formula (1): as_expression=lambda row: row.UnitPrice * row.Qua [...]  \n  Product  \n    11. Derive Product.UnitsInStock as Formula (1): &lt;function&gt;  \n    12. Derive Product.UnitsShipped as Sum(OrderDetail.Quantity Where &lt;function declare_logic.&lt;locals&gt;.&lt;lambda&gt; at 0x11291e700&gt;)  \n</code></pre> Logic Log in Scenario: Good Order Custom Service <pre><code>Logic Phase:        ROW LOGIC(session=0x112f92e50) (sqlalchemy before_flush)             - 2022-04-24 11:30:22,093 - logic_logger - INF\n..OrderDetail[None] {Insert - client} Id: None, OrderId: None, ProductId: 1, UnitPrice: None, Quantity: 1, Discount: 0, Amount: None, ShippedDate: None  row: 0x112fafd00  session: 0x112f92e50  ins_upd_dlt: ins - 2022-04-24 11:30:22,094 - logic_logger - INF\n..OrderDetail[None] {copy_rules for role: Product - UnitPrice} Id: None, OrderId: None, ProductId: 1, UnitPrice: 18.0000000000, Quantity: 1, Discount: 0, Amount: None, ShippedDate: None  row: 0x112fafd00  session: 0x112f92e50  ins_upd_dlt: ins - 2022-04-24 11:30:22,099 - logic_logger - INF\n..OrderDetail[None] {Formula Amount} Id: None, OrderId: None, ProductId: 1, UnitPrice: 18.0000000000, Quantity: 1, Discount: 0, Amount: 18.0000000000, ShippedDate: None  row: 0x112fafd00  session: 0x112f92e50  ins_upd_dlt: ins - 2022-04-24 11:30:22,101 - logic_logger - INF\n....Product[1] {Update - Adjusting Product: UnitsShipped} Id: 1, ProductName: Chai, SupplierId: 1, CategoryId: 1, QuantityPerUnit: 10 boxes x 20 bags, UnitPrice: 18.0000000000, UnitsInStock: 39, UnitsOnOrder: 0, ReorderLevel: 10, Discontinued: 0, UnitsShipped:  [0--&gt;] 1  row: 0x112fafee0  session: 0x112f92e50  ins_upd_dlt: upd - 2022-04-24 11:30:22,102 - logic_logger - INF\n....Product[1] {Formula UnitsInStock} Id: 1, ProductName: Chai, SupplierId: 1, CategoryId: 1, QuantityPerUnit: 10 boxes x 20 bags, UnitPrice: 18.0000000000, UnitsInStock:  [39--&gt;] 38, UnitsOnOrder: 0, ReorderLevel: 10, Discontinued: 0, UnitsShipped:  [0--&gt;] 1  row: 0x112fafee0  session: 0x112f92e50  ins_upd_dlt: upd - 2022-04-24 11:30:22,103 - logic_logger - INF\n....Order[None] {Adjustment logic chaining deferred for this parent parent do_defer_adjustment: True, is_parent_submitted: True, is_parent_row_processed: False, Order} Id: None, CustomerId: ALFKI, EmployeeId: 1, OrderDate: None, RequiredDate: None, ShippedDate: None, ShipVia: None, Freight: 11, ShipName: None, ShipAddress: None, ShipCity: None, ShipRegion: None, ShipPostalCode: None, ShipCountry: None, AmountTotal:  [None--&gt;] 18.0000000000, Country: None, City: None, Ready: None, OrderDetailCount:  [None--&gt;] 1, CloneFromOrder: None  row: 0x112f92d60  session: 0x112f92e50  ins_upd_dlt: * - 2022-04-24 11:30:22,107 - logic_logger - INF\n..OrderDetail[None] {Insert - client} Id: None, OrderId: None, ProductId: 2, UnitPrice: None, Quantity: 2, Discount: 0, Amount: None, ShippedDate: None  row: 0x112fafe80  session: 0x112f92e50  ins_upd_dlt: ins - 2022-04-24 11:30:22,108 - logic_logger - INF\n..OrderDetail[None] {copy_rules for role: Product - UnitPrice} Id: None, OrderId: None, ProductId: 2, UnitPrice: 19.0000000000, Quantity: 2, Discount: 0, Amount: None, ShippedDate: None  row: 0x112fafe80  session: 0x112f92e50  ins_upd_dlt: ins - 2022-04-24 11:30:22,111 - logic_logger - INF\n..OrderDetail[None] {Formula Amount} Id: None, OrderId: None, ProductId: 2, UnitPrice: 19.0000000000, Quantity: 2, Discount: 0, Amount: 38.0000000000, ShippedDate: None  row: 0x112fafe80  session: 0x112f92e50  ins_upd_dlt: ins - 2022-04-24 11:30:22,111 - logic_logger - INF\n....Product[2] {Update - Adjusting Product: UnitsShipped} Id: 2, ProductName: Chang, SupplierId: 1, CategoryId: 1, QuantityPerUnit: 24 - 12 oz bottles, UnitPrice: 19.0000000000, UnitsInStock: 17, UnitsOnOrder: 40, ReorderLevel: 25, Discontinued: 0, UnitsShipped:  [0--&gt;] 2  row: 0x112fcae50  session: 0x112f92e50  ins_upd_dlt: upd - 2022-04-24 11:30:22,112 - logic_logger - INF\n....Product[2] {Formula UnitsInStock} Id: 2, ProductName: Chang, SupplierId: 1, CategoryId: 1, QuantityPerUnit: 24 - 12 oz bottles, UnitPrice: 19.0000000000, UnitsInStock:  [17--&gt;] 15, UnitsOnOrder: 40, ReorderLevel: 25, Discontinued: 0, UnitsShipped:  [0--&gt;] 2  row: 0x112fcae50  session: 0x112f92e50  ins_upd_dlt: upd - 2022-04-24 11:30:22,113 - logic_logger - INF\n....Order[None] {Adjustment logic chaining deferred for this parent parent do_defer_adjustment: True, is_parent_submitted: True, is_parent_row_processed: False, Order} Id: None, CustomerId: ALFKI, EmployeeId: 1, OrderDate: None, RequiredDate: None, ShippedDate: None, ShipVia: None, Freight: 11, ShipName: None, ShipAddress: None, ShipCity: None, ShipRegion: None, ShipPostalCode: None, ShipCountry: None, AmountTotal:  [18.0000000000--&gt;] 56.0000000000, Country: None, City: None, Ready: None, OrderDetailCount:  [1--&gt;] 2, CloneFromOrder: None  row: 0x112f92d60  session: 0x112f92e50  ins_upd_dlt: * - 2022-04-24 11:30:22,116 - logic_logger - INF\n..Order[None] {Insert - client} Id: None, CustomerId: ALFKI, EmployeeId: 1, OrderDate: None, RequiredDate: None, ShippedDate: None, ShipVia: None, Freight: 11, ShipName: None, ShipAddress: None, ShipCity: None, ShipRegion: None, ShipPostalCode: None, ShipCountry: None, AmountTotal: 56.0000000000, Country: None, City: None, Ready: None, OrderDetailCount: 2, CloneFromOrder: None  row: 0x112f92d60  session: 0x112f92e50  ins_upd_dlt: ins - 2022-04-24 11:30:22,117 - logic_logger - INF\n....Customer[ALFKI] {Update - Adjusting Customer: Balance, UnpaidOrderCount, OrderCount} Id: ALFKI, CompanyName: Alfreds Futterkiste, ContactName: Maria Anders, ContactTitle: Sales Representative, Address: Obere Str. 57A, City: Berlin, Region: Western Europe, PostalCode: 12209, Country: Germany, Phone: 030-0074321, Fax: 030-0076545, Balance:  [2102.0000000000--&gt;] 2158.0000000000, CreditLimit: 2300.0000000000, OrderCount:  [15--&gt;] 16, UnpaidOrderCount:  [10--&gt;] 11  row: 0x112fde340  session: 0x112f92e50  ins_upd_dlt: upd - 2022-04-24 11:30:22,126 - logic_logger - INF\nLogic Phase:        COMMIT(session=0x112f92e50)                                          - 2022-04-24 11:30:22,128 - logic_logger - INF\n..Order[None] {Commit Event} Id: None, CustomerId: ALFKI, EmployeeId: 1, OrderDate: None, RequiredDate: None, ShippedDate: None, ShipVia: None, Freight: 11, ShipName: None, ShipAddress: None, ShipCity: None, ShipRegion: None, ShipPostalCode: None, ShipCountry: None, AmountTotal: 56.0000000000, Country: None, City: None, Ready: None, OrderDetailCount: 2, CloneFromOrder: None  row: 0x112f92d60  session: 0x112f92e50  ins_upd_dlt: ins - 2022-04-24 11:30:22,130 - logic_logger - INF\n..Order[None] {Hi, Andrew - Congratulate Nancy on their new order} Id: None, CustomerId: ALFKI, EmployeeId: 1, OrderDate: None, RequiredDate: None, ShippedDate: None, ShipVia: None, Freight: 11, ShipName: None, ShipAddress: None, ShipCity: None, ShipRegion: None, ShipPostalCode: None, ShipCountry: None, AmountTotal: 56.0000000000, Country: None, City: None, Ready: None, OrderDetailCount: 2, CloneFromOrder: None  row: 0x112f92d60  session: 0x112f92e50  ins_upd_dlt: ins - 2022-04-24 11:30:22,134 - logic_logger - INF\n</code></pre></p> <p> </p>"},{"location":"Behave-Logic-Report/#scenario-bad-order-custom-service","title":"Scenario: Bad Order Custom Service","text":"<p>\u2003  Scenario: Bad Order Custom Service \u2003\u2003    Given Customer Account: ALFKI \u2003\u2003    When Order Placed with excessive quantity \u2003\u2003    Then Rejected per Check Credit  </p> Tests - and their logic - are transparent.. click to see Logic <p> </p> <p>Logic Doc for scenario: Bad Order Custom Service</p> <p>Familiar logic patterns: * Constrain a derived result * Chain up, to adjust parent sum/count aggregates</p> <p>Logic Design (\"Cocktail Napkin Design\") * Customer.Balance &lt;= CreditLimit * Customer.Balance = Sum(Order.AmountTotal where unshipped) * Order.AmountTotal = Sum(OrderDetail.Amount) * OrderDetail.Amount = Quantity * UnitPrice * OrderDetail.UnitPrice = copy from Product</p> <p> </p> <p>Rules Used in Scenario: Bad Order Custom Service <pre><code>  Customer  \n    1. Constraint Function: None   \n    2. Derive Customer.UnpaidOrderCount as Count(&lt;class 'database.models.Order'&gt; Where &lt;function declare_logic.&lt;locals&gt;.&lt;lambda&gt; at 0x11291e940&gt;)  \n    3. Derive Customer.OrderCount as Count(&lt;class 'database.models.Order'&gt; Where None)  \n    4. Derive Customer.Balance as Sum(Order.AmountTotal Where &lt;function declare_logic.&lt;locals&gt;.&lt;lambda&gt; at 0x11282c280&gt;)  \n  Order  \n    5. RowEvent Order.clone_order()   \n    6. Derive Order.OrderDetailCount as Count(&lt;class 'database.models.OrderDetail'&gt; Where None)  \n    7. Derive Order.AmountTotal as Sum(OrderDetail.Amount Where None)  \n  OrderDetail  \n    8. Derive OrderDetail.UnitPrice as Copy(Product.UnitPrice)  \n    9. Derive OrderDetail.ShippedDate as Formula (2): row.Order.ShippedDate  \n    10. Derive OrderDetail.Amount as Formula (1): as_expression=lambda row: row.UnitPrice * row.Qua [...]  \n  Product  \n    11. Derive Product.UnitsInStock as Formula (1): &lt;function&gt;  \n    12. Derive Product.UnitsShipped as Sum(OrderDetail.Quantity Where &lt;function declare_logic.&lt;locals&gt;.&lt;lambda&gt; at 0x11291e700&gt;)  \n</code></pre> Logic Log in Scenario: Bad Order Custom Service <pre><code>Logic Phase:        ROW LOGIC(session=0x1130778b0) (sqlalchemy before_flush)             - 2022-04-24 11:30:22,485 - logic_logger - INF\n..Order[None] {Insert - client} Id: None, CustomerId: ALFKI, EmployeeId: 1, OrderDate: None, RequiredDate: None, ShippedDate: None, ShipVia: None, Freight: 10, ShipName: None, ShipAddress: None, ShipCity: None, ShipRegion: None, ShipPostalCode: None, ShipCountry: None, AmountTotal: None, Country: None, City: None, Ready: None, OrderDetailCount: None, CloneFromOrder: None  row: 0x113077610  session: 0x1130778b0  ins_upd_dlt: ins - 2022-04-24 11:30:22,486 - logic_logger - INF\n....Customer[ALFKI] {Update - Adjusting Customer: UnpaidOrderCount, OrderCount} Id: ALFKI, CompanyName: Alfreds Futterkiste, ContactName: Maria Anders, ContactTitle: Sales Representative, Address: Obere Str. 57A, City: Berlin, Region: Western Europe, PostalCode: 12209, Country: Germany, Phone: 030-0074321, Fax: 030-0076545, Balance: 2102.0000000000, CreditLimit: 2300.0000000000, OrderCount:  [15--&gt;] 16, UnpaidOrderCount:  [10--&gt;] 11  row: 0x113068490  session: 0x1130778b0  ins_upd_dlt: upd - 2022-04-24 11:30:22,492 - logic_logger - INF\n..OrderDetail[None] {Insert - client} Id: None, OrderId: None, ProductId: 1, UnitPrice: None, Quantity: 1111, Discount: 0, Amount: None, ShippedDate: None  row: 0x113077eb0  session: 0x1130778b0  ins_upd_dlt: ins - 2022-04-24 11:30:22,495 - logic_logger - INF\n..OrderDetail[None] {copy_rules for role: Product - UnitPrice} Id: None, OrderId: None, ProductId: 1, UnitPrice: 18.0000000000, Quantity: 1111, Discount: 0, Amount: None, ShippedDate: None  row: 0x113077eb0  session: 0x1130778b0  ins_upd_dlt: ins - 2022-04-24 11:30:22,497 - logic_logger - INF\n..OrderDetail[None] {Formula Amount} Id: None, OrderId: None, ProductId: 1, UnitPrice: 18.0000000000, Quantity: 1111, Discount: 0, Amount: 19998.0000000000, ShippedDate: None  row: 0x113077eb0  session: 0x1130778b0  ins_upd_dlt: ins - 2022-04-24 11:30:22,498 - logic_logger - INF\n....Product[1] {Update - Adjusting Product: UnitsShipped} Id: 1, ProductName: Chai, SupplierId: 1, CategoryId: 1, QuantityPerUnit: 10 boxes x 20 bags, UnitPrice: 18.0000000000, UnitsInStock: 40, UnitsOnOrder: 0, ReorderLevel: 10, Discontinued: 0, UnitsShipped:  [-1--&gt;] 1110  row: 0x113077790  session: 0x1130778b0  ins_upd_dlt: upd - 2022-04-24 11:30:22,499 - logic_logger - INF\n....Product[1] {Formula UnitsInStock} Id: 1, ProductName: Chai, SupplierId: 1, CategoryId: 1, QuantityPerUnit: 10 boxes x 20 bags, UnitPrice: 18.0000000000, UnitsInStock:  [40--&gt;] -1071, UnitsOnOrder: 0, ReorderLevel: 10, Discontinued: 0, UnitsShipped:  [-1--&gt;] 1110  row: 0x113077790  session: 0x1130778b0  ins_upd_dlt: upd - 2022-04-24 11:30:22,501 - logic_logger - INF\n....Order[None] {Update - Adjusting Order: AmountTotal, OrderDetailCount} Id: None, CustomerId: ALFKI, EmployeeId: 1, OrderDate: None, RequiredDate: None, ShippedDate: None, ShipVia: None, Freight: 10, ShipName: None, ShipAddress: None, ShipCity: None, ShipRegion: None, ShipPostalCode: None, ShipCountry: None, AmountTotal:  [None--&gt;] 19998.0000000000, Country: None, City: None, Ready: None, OrderDetailCount:  [None--&gt;] 1, CloneFromOrder: None  row: 0x113077610  session: 0x1130778b0  ins_upd_dlt: upd - 2022-04-24 11:30:22,503 - logic_logger - INF\n......Customer[ALFKI] {Update - Adjusting Customer: Balance} Id: ALFKI, CompanyName: Alfreds Futterkiste, ContactName: Maria Anders, ContactTitle: Sales Representative, Address: Obere Str. 57A, City: Berlin, Region: Western Europe, PostalCode: 12209, Country: Germany, Phone: 030-0074321, Fax: 030-0076545, Balance:  [2102.0000000000--&gt;] 22100.0000000000, CreditLimit: 2300.0000000000, OrderCount: 16, UnpaidOrderCount: 11  row: 0x113068490  session: 0x1130778b0  ins_upd_dlt: upd - 2022-04-24 11:30:22,505 - logic_logger - INF\n......Customer[ALFKI] {Constraint Failure: balance (22100.0000000000) exceeds credit (2300.0000000000)} Id: ALFKI, CompanyName: Alfreds Futterkiste, ContactName: Maria Anders, ContactTitle: Sales Representative, Address: Obere Str. 57A, City: Berlin, Region: Western Europe, PostalCode: 12209, Country: Germany, Phone: 030-0074321, Fax: 030-0076545, Balance:  [2102.0000000000--&gt;] 22100.0000000000, CreditLimit: 2300.0000000000, OrderCount: 16, UnpaidOrderCount: 11  row: 0x113068490  session: 0x1130778b0  ins_upd_dlt: upd - 2022-04-24 11:30:22,506 - logic_logger - INF\n</code></pre></p> <p> </p>"},{"location":"Behave-Logic-Report/#scenario-alter-item-qty-to-exceed-credit","title":"Scenario: Alter Item Qty to exceed credit","text":"<p>\u2003  Scenario: Alter Item Qty to exceed credit \u2003\u2003    Given Customer Account: ALFKI \u2003\u2003    When Order Detail Quantity altered very high \u2003\u2003    Then Rejected per Check Credit  </p> Tests - and their logic - are transparent.. click to see Logic <p> </p> <p>Logic Doc for scenario: Alter Item Qty to exceed credit</p> <p>Same constraint as above.</p> <p>Key Takeaway: Automatic Reuse (design one, solve many)</p> <p> </p> <p>Rules Used in Scenario: Alter Item Qty to exceed credit <pre><code>  Customer  \n    1. Constraint Function: None   \n    2. Derive Customer.UnpaidOrderCount as Count(&lt;class 'database.models.Order'&gt; Where &lt;function declare_logic.&lt;locals&gt;.&lt;lambda&gt; at 0x11291e940&gt;)  \n    3. Derive Customer.OrderCount as Count(&lt;class 'database.models.Order'&gt; Where None)  \n    4. Derive Customer.Balance as Sum(Order.AmountTotal Where &lt;function declare_logic.&lt;locals&gt;.&lt;lambda&gt; at 0x11282c280&gt;)  \n  Order  \n    5. Derive Order.OrderDetailCount as Count(&lt;class 'database.models.OrderDetail'&gt; Where None)  \n    6. Derive Order.AmountTotal as Sum(OrderDetail.Amount Where None)  \n  OrderDetail  \n    7. Derive OrderDetail.Amount as Formula (1): as_expression=lambda row: row.UnitPrice * row.Qua [...]  \n  Product  \n    8. Derive Product.UnitsInStock as Formula (1): &lt;function&gt;  \n    9. Derive Product.UnitsShipped as Sum(OrderDetail.Quantity Where &lt;function declare_logic.&lt;locals&gt;.&lt;lambda&gt; at 0x11291e700&gt;)  \n</code></pre> Logic Log in Scenario: Alter Item Qty to exceed credit <pre><code>Logic Phase:        ROW LOGIC(session=0x113077df0) (sqlalchemy before_flush)             - 2022-04-24 11:30:22,614 - logic_logger - INF\n..OrderDetail[1040] {Update - client} Id: 1040, OrderId: 10643, ProductId: 28, UnitPrice: 45.6000000000, Quantity:  [15--&gt;] 1110, Discount: 0.25, Amount: 684.0000000000, ShippedDate: None  row: 0x113057d90  session: 0x113077df0  ins_upd_dlt: upd - 2022-04-24 11:30:22,615 - logic_logger - INF\n..OrderDetail[1040] {Formula Amount} Id: 1040, OrderId: 10643, ProductId: 28, UnitPrice: 45.6000000000, Quantity:  [15--&gt;] 1110, Discount: 0.25, Amount:  [684.0000000000--&gt;] 50616.0000000000, ShippedDate: None  row: 0x113057d90  session: 0x113077df0  ins_upd_dlt: upd - 2022-04-24 11:30:22,616 - logic_logger - INF\n..OrderDetail[1040] {Prune Formula: ShippedDate [['Order.ShippedDate']]} Id: 1040, OrderId: 10643, ProductId: 28, UnitPrice: 45.6000000000, Quantity:  [15--&gt;] 1110, Discount: 0.25, Amount:  [684.0000000000--&gt;] 50616.0000000000, ShippedDate: None  row: 0x113057d90  session: 0x113077df0  ins_upd_dlt: upd - 2022-04-24 11:30:22,617 - logic_logger - INF\n....Product[28] {Update - Adjusting Product: UnitsShipped} Id: 28, ProductName: R\u00f6ssle Sauerkraut, SupplierId: 12, CategoryId: 7, QuantityPerUnit: 25 - 825 g cans, UnitPrice: 45.6000000000, UnitsInStock: 26, UnitsOnOrder: 0, ReorderLevel: 0, Discontinued: 1, UnitsShipped:  [0--&gt;] 1095  row: 0x11311c7f0  session: 0x113077df0  ins_upd_dlt: upd - 2022-04-24 11:30:22,619 - logic_logger - INF\n....Product[28] {Formula UnitsInStock} Id: 28, ProductName: R\u00f6ssle Sauerkraut, SupplierId: 12, CategoryId: 7, QuantityPerUnit: 25 - 825 g cans, UnitPrice: 45.6000000000, UnitsInStock:  [26--&gt;] -1069, UnitsOnOrder: 0, ReorderLevel: 0, Discontinued: 1, UnitsShipped:  [0--&gt;] 1095  row: 0x11311c7f0  session: 0x113077df0  ins_upd_dlt: upd - 2022-04-24 11:30:22,620 - logic_logger - INF\n....Order[10643] {Update - Adjusting Order: AmountTotal} Id: 10643, CustomerId: ALFKI, EmployeeId: 6, OrderDate: 2013-08-25, RequiredDate: 2013-09-22, ShippedDate: None, ShipVia: 1, Freight: 29.4600000000, ShipName: Alfreds Futterkiste, ShipAddress: Obere Str. 57, ShipCity: Berlin, ShipRegion: Western Europe, ShipPostalCode: 12209, ShipCountry: Germany, AmountTotal:  [1086.00--&gt;] 51018.0000000000, Country: None, City: None, Ready: True, OrderDetailCount: 3, CloneFromOrder: None  row: 0x113077820  session: 0x113077df0  ins_upd_dlt: upd - 2022-04-24 11:30:22,625 - logic_logger - INF\n......Customer[ALFKI] {Update - Adjusting Customer: Balance} Id: ALFKI, CompanyName: Alfreds Futterkiste, ContactName: Maria Anders, ContactTitle: Sales Representative, Address: Obere Str. 57A, City: Berlin, Region: Western Europe, PostalCode: 12209, Country: Germany, Phone: 030-0074321, Fax: 030-0076545, Balance:  [2102.0000000000--&gt;] 52034.0000000000, CreditLimit: 2300.0000000000, OrderCount: 15, UnpaidOrderCount: 10  row: 0x1130777c0  session: 0x113077df0  ins_upd_dlt: upd - 2022-04-24 11:30:22,628 - logic_logger - INF\n......Customer[ALFKI] {Constraint Failure: balance (52034.0000000000) exceeds credit (2300.0000000000)} Id: ALFKI, CompanyName: Alfreds Futterkiste, ContactName: Maria Anders, ContactTitle: Sales Representative, Address: Obere Str. 57A, City: Berlin, Region: Western Europe, PostalCode: 12209, Country: Germany, Phone: 030-0074321, Fax: 030-0076545, Balance:  [2102.0000000000--&gt;] 52034.0000000000, CreditLimit: 2300.0000000000, OrderCount: 15, UnpaidOrderCount: 10  row: 0x1130777c0  session: 0x113077df0  ins_upd_dlt: upd - 2022-04-24 11:30:22,629 - logic_logger - INF\n</code></pre></p> <p> </p>"},{"location":"Behave-Logic-Report/#scenario-alter-required-date-adjust-logic-pruned","title":"Scenario: Alter Required Date - adjust logic pruned","text":"<p>\u2003  Scenario: Alter Required Date - adjust logic pruned \u2003\u2003    Given Customer Account: ALFKI \u2003\u2003    When Order RequiredDate altered (2013-10-13) \u2003\u2003    Then Balance not adjusted  </p> Tests - and their logic - are transparent.. click to see Logic <p> </p> <p>Logic Doc for scenario: Alter Required Date - adjust logic pruned</p> <p>We set <code>Order.RequiredDate</code>.</p> <p>This is a normal update.  Nothing depends on the columns altered, so this has no effect on the related Customer, Order Details or Products.  Contrast this to the Cascade Update Test and the Custom Service test, where logic chaining affects related rows.  Only the commit event fires.</p> <p>Key Takeaway: rule pruning automatically avoids unnecessary SQL overhead.</p> <p> </p> <p>Rules Used in Scenario: Alter Required Date - adjust logic pruned <pre><code>  Customer  \n    1. Derive Customer.UnpaidOrderCount as Count(&lt;class 'database.models.Order'&gt; Where &lt;function declare_logic.&lt;locals&gt;.&lt;lambda&gt; at 0x11291e940&gt;)  \n    2. Derive Customer.OrderCount as Count(&lt;class 'database.models.Order'&gt; Where None)  \n    3. Derive Customer.Balance as Sum(Order.AmountTotal Where &lt;function declare_logic.&lt;locals&gt;.&lt;lambda&gt; at 0x11282c280&gt;)  \n  Order  \n    4. RowEvent Order.congratulate_sales_rep()   \n    5. RowEvent Order.clone_order()   \n</code></pre> Logic Log in Scenario: Alter Required Date - adjust logic pruned <pre><code>Logic Phase:        ROW LOGIC(session=0x113129c70) (sqlalchemy before_flush)             - 2022-04-24 11:30:22,726 - logic_logger - INF\n..Order[10643] {Update - client} Id: 10643, CustomerId: ALFKI, EmployeeId: 6, OrderDate: 2013-08-25, RequiredDate:  [2013-09-22--&gt;] 2013-10-13 00:00:00, ShippedDate: None, ShipVia: 1, Freight: 29.4600000000, ShipName: Alfreds Futterkiste, ShipAddress: Obere Str. 57, ShipCity: Berlin, ShipRegion: Western Europe, ShipPostalCode: 12209, ShipCountry: Germany, AmountTotal: 1086.00, Country: None, City: None, Ready: True, OrderDetailCount: 3, CloneFromOrder: None  row: 0x11314d130  session: 0x113129c70  ins_upd_dlt: upd - 2022-04-24 11:30:22,728 - logic_logger - INF\nLogic Phase:        COMMIT(session=0x113129c70)                                          - 2022-04-24 11:30:22,730 - logic_logger - INF\n..Order[10643] {Commit Event} Id: 10643, CustomerId: ALFKI, EmployeeId: 6, OrderDate: 2013-08-25, RequiredDate:  [2013-09-22--&gt;] 2013-10-13 00:00:00, ShippedDate: None, ShipVia: 1, Freight: 29.4600000000, ShipName: Alfreds Futterkiste, ShipAddress: Obere Str. 57, ShipCity: Berlin, ShipRegion: Western Europe, ShipPostalCode: 12209, ShipCountry: Germany, AmountTotal: 1086.00, Country: None, City: None, Ready: True, OrderDetailCount: 3, CloneFromOrder: None  row: 0x11314d130  session: 0x113129c70  ins_upd_dlt: upd - 2022-04-24 11:30:22,731 - logic_logger - INF\n</code></pre></p> <p> </p>"},{"location":"Behave-Logic-Report/#scenario-set-shipped-adjust-logic-reuse","title":"Scenario: Set Shipped - adjust logic reuse","text":"<p>\u2003  Scenario: Set Shipped - adjust logic reuse \u2003\u2003    Given Customer Account: ALFKI \u2003\u2003    When Order ShippedDate altered (2013-10-13) \u2003\u2003    Then Balance reduced 1086  </p> Tests - and their logic - are transparent.. click to see Logic <p> </p> <p>Logic Doc for scenario: Set Shipped - adjust logic reuse</p> <p>We set <code>Order.ShippedDate</code>.</p> <p>This cascades to the Order Details, per the <code>derive=models.OrderDetail.ShippedDate</code> rule.</p> <p>This chains to adjust the <code>Product.UnitsShipped</code> and recomputes <code>UnitsInStock</code>, as above</p> <p>Key Takeaway: parent references (e.g., <code>OrderDetail.ShippedDate</code>) automate chain-down multi-table transactions.</p> <p>Key Takeaway: Automatic Reuse (design one, solve many)</p> <p> </p> <p>Rules Used in Scenario: Set Shipped - adjust logic reuse <pre><code>  Customer  \n    1. Derive Customer.UnpaidOrderCount as Count(&lt;class 'database.models.Order'&gt; Where &lt;function declare_logic.&lt;locals&gt;.&lt;lambda&gt; at 0x11291e940&gt;)  \n    2. Derive Customer.OrderCount as Count(&lt;class 'database.models.Order'&gt; Where None)  \n    3. Derive Customer.Balance as Sum(Order.AmountTotal Where &lt;function declare_logic.&lt;locals&gt;.&lt;lambda&gt; at 0x11282c280&gt;)  \n  Order  \n    4. RowEvent Order.congratulate_sales_rep()   \n    5. Derive Order.OrderDetailCount as Count(&lt;class 'database.models.OrderDetail'&gt; Where None)  \n    6. RowEvent Order.clone_order()   \n    7. Derive Order.AmountTotal as Sum(OrderDetail.Amount Where None)  \n  OrderDetail  \n    8. Derive OrderDetail.ShippedDate as Formula (2): row.Order.ShippedDate  \n  Product  \n    9. Derive Product.UnitsInStock as Formula (1): &lt;function&gt;  \n    10. Derive Product.UnitsShipped as Sum(OrderDetail.Quantity Where &lt;function declare_logic.&lt;locals&gt;.&lt;lambda&gt; at 0x11291e700&gt;)  \n</code></pre> Logic Log in Scenario: Set Shipped - adjust logic reuse <pre><code>Logic Phase:        ROW LOGIC(session=0x113129dc0) (sqlalchemy before_flush)             - 2022-04-24 11:30:22,931 - logic_logger - INF\n..Order[10643] {Update - client} Id: 10643, CustomerId: ALFKI, EmployeeId: 6, OrderDate: 2013-08-25, RequiredDate: 2013-10-13, ShippedDate:  [None--&gt;] 2013-10-13, ShipVia: 1, Freight: 29.4600000000, ShipName: Alfreds Futterkiste, ShipAddress: Obere Str. 57, ShipCity: Berlin, ShipRegion: Western Europe, ShipPostalCode: 12209, ShipCountry: Germany, AmountTotal: 1086.00, Country: None, City: None, Ready: True, OrderDetailCount: 3, CloneFromOrder: None  row: 0x11314da90  session: 0x113129dc0  ins_upd_dlt: upd - 2022-04-24 11:30:22,932 - logic_logger - INF\n....Customer[ALFKI] {Update - Adjusting Customer: Balance, UnpaidOrderCount} Id: ALFKI, CompanyName: Alfreds Futterkiste, ContactName: Maria Anders, ContactTitle: Sales Representative, Address: Obere Str. 57A, City: Berlin, Region: Western Europe, PostalCode: 12209, Country: Germany, Phone: 030-0074321, Fax: 030-0076545, Balance:  [2102.0000000000--&gt;] 1016.0000000000, CreditLimit: 2300.0000000000, OrderCount: 15, UnpaidOrderCount:  [10--&gt;] 9  row: 0x1131698e0  session: 0x113129dc0  ins_upd_dlt: upd - 2022-04-24 11:30:22,936 - logic_logger - INF\n....OrderDetail[1040] {Update - Cascading Order.ShippedDate (,...)} Id: 1040, OrderId: 10643, ProductId: 28, UnitPrice: 45.6000000000, Quantity: 15, Discount: 0.25, Amount: 684.0000000000, ShippedDate: None  row: 0x113169280  session: 0x113129dc0  ins_upd_dlt: upd - 2022-04-24 11:30:22,940 - logic_logger - INF\n....OrderDetail[1040] {Prune Formula: Amount [['UnitPrice', 'Quantity']]} Id: 1040, OrderId: 10643, ProductId: 28, UnitPrice: 45.6000000000, Quantity: 15, Discount: 0.25, Amount: 684.0000000000, ShippedDate: None  row: 0x113169280  session: 0x113129dc0  ins_upd_dlt: upd - 2022-04-24 11:30:22,941 - logic_logger - INF\n....OrderDetail[1040] {Formula ShippedDate} Id: 1040, OrderId: 10643, ProductId: 28, UnitPrice: 45.6000000000, Quantity: 15, Discount: 0.25, Amount: 684.0000000000, ShippedDate:  [None--&gt;] 2013-10-13  row: 0x113169280  session: 0x113129dc0  ins_upd_dlt: upd - 2022-04-24 11:30:22,942 - logic_logger - INF\n......Product[28] {Update - Adjusting Product: UnitsShipped} Id: 28, ProductName: R\u00f6ssle Sauerkraut, SupplierId: 12, CategoryId: 7, QuantityPerUnit: 25 - 825 g cans, UnitPrice: 45.6000000000, UnitsInStock: 26, UnitsOnOrder: 0, ReorderLevel: 0, Discontinued: 1, UnitsShipped:  [0--&gt;] -15  row: 0x1131691c0  session: 0x113129dc0  ins_upd_dlt: upd - 2022-04-24 11:30:22,944 - logic_logger - INF\n......Product[28] {Formula UnitsInStock} Id: 28, ProductName: R\u00f6ssle Sauerkraut, SupplierId: 12, CategoryId: 7, QuantityPerUnit: 25 - 825 g cans, UnitPrice: 45.6000000000, UnitsInStock:  [26--&gt;] 41, UnitsOnOrder: 0, ReorderLevel: 0, Discontinued: 1, UnitsShipped:  [0--&gt;] -15  row: 0x1131691c0  session: 0x113129dc0  ins_upd_dlt: upd - 2022-04-24 11:30:22,945 - logic_logger - INF\n....OrderDetail[1041] {Update - Cascading Order.ShippedDate (,...)} Id: 1041, OrderId: 10643, ProductId: 39, UnitPrice: 18.0000000000, Quantity: 21, Discount: 0.25, Amount: 378.0000000000, ShippedDate: None  row: 0x1131698b0  session: 0x113129dc0  ins_upd_dlt: upd - 2022-04-24 11:30:22,947 - logic_logger - INF\n....OrderDetail[1041] {Prune Formula: Amount [['UnitPrice', 'Quantity']]} Id: 1041, OrderId: 10643, ProductId: 39, UnitPrice: 18.0000000000, Quantity: 21, Discount: 0.25, Amount: 378.0000000000, ShippedDate: None  row: 0x1131698b0  session: 0x113129dc0  ins_upd_dlt: upd - 2022-04-24 11:30:22,947 - logic_logger - INF\n....OrderDetail[1041] {Formula ShippedDate} Id: 1041, OrderId: 10643, ProductId: 39, UnitPrice: 18.0000000000, Quantity: 21, Discount: 0.25, Amount: 378.0000000000, ShippedDate:  [None--&gt;] 2013-10-13  row: 0x1131698b0  session: 0x113129dc0  ins_upd_dlt: upd - 2022-04-24 11:30:22,948 - logic_logger - INF\n......Product[39] {Update - Adjusting Product: UnitsShipped} Id: 39, ProductName: Chartreuse verte, SupplierId: 18, CategoryId: 1, QuantityPerUnit: 750 cc per bottle, UnitPrice: 18.0000000000, UnitsInStock: 69, UnitsOnOrder: 0, ReorderLevel: 5, Discontinued: 0, UnitsShipped:  [0--&gt;] -21  row: 0x113169b50  session: 0x113129dc0  ins_upd_dlt: upd - 2022-04-24 11:30:22,950 - logic_logger - INF\n......Product[39] {Formula UnitsInStock} Id: 39, ProductName: Chartreuse verte, SupplierId: 18, CategoryId: 1, QuantityPerUnit: 750 cc per bottle, UnitPrice: 18.0000000000, UnitsInStock:  [69--&gt;] 90, UnitsOnOrder: 0, ReorderLevel: 5, Discontinued: 0, UnitsShipped:  [0--&gt;] -21  row: 0x113169b50  session: 0x113129dc0  ins_upd_dlt: upd - 2022-04-24 11:30:22,951 - logic_logger - INF\n....OrderDetail[1042] {Update - Cascading Order.ShippedDate (,...)} Id: 1042, OrderId: 10643, ProductId: 46, UnitPrice: 12.0000000000, Quantity: 2, Discount: 0.25, Amount: 24.0000000000, ShippedDate: None  row: 0x1131696d0  session: 0x113129dc0  ins_upd_dlt: upd - 2022-04-24 11:30:22,953 - logic_logger - INF\n....OrderDetail[1042] {Prune Formula: Amount [['UnitPrice', 'Quantity']]} Id: 1042, OrderId: 10643, ProductId: 46, UnitPrice: 12.0000000000, Quantity: 2, Discount: 0.25, Amount: 24.0000000000, ShippedDate: None  row: 0x1131696d0  session: 0x113129dc0  ins_upd_dlt: upd - 2022-04-24 11:30:22,954 - logic_logger - INF\n....OrderDetail[1042] {Formula ShippedDate} Id: 1042, OrderId: 10643, ProductId: 46, UnitPrice: 12.0000000000, Quantity: 2, Discount: 0.25, Amount: 24.0000000000, ShippedDate:  [None--&gt;] 2013-10-13  row: 0x1131696d0  session: 0x113129dc0  ins_upd_dlt: upd - 2022-04-24 11:30:22,954 - logic_logger - INF\n......Product[46] {Update - Adjusting Product: UnitsShipped} Id: 46, ProductName: Spegesild, SupplierId: 21, CategoryId: 8, QuantityPerUnit: 4 - 450 g glasses, UnitPrice: 12.0000000000, UnitsInStock: 95, UnitsOnOrder: 0, ReorderLevel: 0, Discontinued: 0, UnitsShipped:  [0--&gt;] -2  row: 0x113172250  session: 0x113129dc0  ins_upd_dlt: upd - 2022-04-24 11:30:22,956 - logic_logger - INF\n......Product[46] {Formula UnitsInStock} Id: 46, ProductName: Spegesild, SupplierId: 21, CategoryId: 8, QuantityPerUnit: 4 - 450 g glasses, UnitPrice: 12.0000000000, UnitsInStock:  [95--&gt;] 97, UnitsOnOrder: 0, ReorderLevel: 0, Discontinued: 0, UnitsShipped:  [0--&gt;] -2  row: 0x113172250  session: 0x113129dc0  ins_upd_dlt: upd - 2022-04-24 11:30:22,957 - logic_logger - INF\nLogic Phase:        COMMIT(session=0x113129dc0)                                          - 2022-04-24 11:30:22,959 - logic_logger - INF\n..Order[10643] {Commit Event} Id: 10643, CustomerId: ALFKI, EmployeeId: 6, OrderDate: 2013-08-25, RequiredDate: 2013-10-13, ShippedDate:  [None--&gt;] 2013-10-13, ShipVia: 1, Freight: 29.4600000000, ShipName: Alfreds Futterkiste, ShipAddress: Obere Str. 57, ShipCity: Berlin, ShipRegion: Western Europe, ShipPostalCode: 12209, ShipCountry: Germany, AmountTotal: 1086.00, Country: None, City: None, Ready: True, OrderDetailCount: 3, CloneFromOrder: None  row: 0x11314da90  session: 0x113129dc0  ins_upd_dlt: upd - 2022-04-24 11:30:22,961 - logic_logger - INF\n</code></pre></p> <p> </p>"},{"location":"Behave-Logic-Report/#scenario-reset-shipped-adjust-logic-reuse","title":"Scenario: Reset Shipped - adjust logic reuse","text":"<p>\u2003  Scenario: Reset Shipped - adjust logic reuse \u2003\u2003    Given Shipped Order \u2003\u2003    When Order ShippedDate set to None \u2003\u2003    Then Logic adjusts Balance by -1086  </p> Tests - and their logic - are transparent.. click to see Logic <p> </p> <p>Logic Doc for scenario: Reset Shipped - adjust logic reuse</p> <p>Same logic as above.</p> <p>Key Takeaway: Automatic Reuse (design one, solve many)</p> <p> </p> <p>Rules Used in Scenario: Reset Shipped - adjust logic reuse <pre><code>  Customer  \n    1. Derive Customer.UnpaidOrderCount as Count(&lt;class 'database.models.Order'&gt; Where &lt;function declare_logic.&lt;locals&gt;.&lt;lambda&gt; at 0x11291e940&gt;)  \n    2. Derive Customer.OrderCount as Count(&lt;class 'database.models.Order'&gt; Where None)  \n    3. Derive Customer.Balance as Sum(Order.AmountTotal Where &lt;function declare_logic.&lt;locals&gt;.&lt;lambda&gt; at 0x11282c280&gt;)  \n  Order  \n    4. RowEvent Order.congratulate_sales_rep()   \n    5. Derive Order.OrderDetailCount as Count(&lt;class 'database.models.OrderDetail'&gt; Where None)  \n    6. RowEvent Order.clone_order()   \n    7. Derive Order.AmountTotal as Sum(OrderDetail.Amount Where None)  \n  OrderDetail  \n    8. Derive OrderDetail.ShippedDate as Formula (2): row.Order.ShippedDate  \n  Product  \n    9. Derive Product.UnitsInStock as Formula (1): &lt;function&gt;  \n    10. Derive Product.UnitsShipped as Sum(OrderDetail.Quantity Where &lt;function declare_logic.&lt;locals&gt;.&lt;lambda&gt; at 0x11291e700&gt;)  \n</code></pre> Logic Log in Scenario: Reset Shipped - adjust logic reuse <pre><code>Logic Phase:        ROW LOGIC(session=0x11317f5e0) (sqlalchemy before_flush)             - 2022-04-24 11:30:23,163 - logic_logger - INF\n..Order[10643] {Update - client} Id: 10643, CustomerId: ALFKI, EmployeeId: 6, OrderDate: 2013-08-25, RequiredDate: 2013-10-13, ShippedDate:  [2013-10-13--&gt;] None, ShipVia: 1, Freight: 29.4600000000, ShipName: Alfreds Futterkiste, ShipAddress: Obere Str. 57, ShipCity: Berlin, ShipRegion: Western Europe, ShipPostalCode: 12209, ShipCountry: Germany, AmountTotal: 1086.00, Country: None, City: None, Ready: True, OrderDetailCount: 3, CloneFromOrder: None  row: 0x11317f850  session: 0x11317f5e0  ins_upd_dlt: upd - 2022-04-24 11:30:23,164 - logic_logger - INF\n....Customer[ALFKI] {Update - Adjusting Customer: Balance, UnpaidOrderCount} Id: ALFKI, CompanyName: Alfreds Futterkiste, ContactName: Maria Anders, ContactTitle: Sales Representative, Address: Obere Str. 57A, City: Berlin, Region: Western Europe, PostalCode: 12209, Country: Germany, Phone: 030-0074321, Fax: 030-0076545, Balance:  [1016.0000000000--&gt;] 2102.0000000000, CreditLimit: 2300.0000000000, OrderCount: 15, UnpaidOrderCount:  [9--&gt;] 10  row: 0x11317fe80  session: 0x11317f5e0  ins_upd_dlt: upd - 2022-04-24 11:30:23,167 - logic_logger - INF\n....OrderDetail[1040] {Update - Cascading Order.ShippedDate (,...)} Id: 1040, OrderId: 10643, ProductId: 28, UnitPrice: 45.6000000000, Quantity: 15, Discount: 0.25, Amount: 684.0000000000, ShippedDate: 2013-10-13  row: 0x1131867c0  session: 0x11317f5e0  ins_upd_dlt: upd - 2022-04-24 11:30:23,171 - logic_logger - INF\n....OrderDetail[1040] {Prune Formula: Amount [['UnitPrice', 'Quantity']]} Id: 1040, OrderId: 10643, ProductId: 28, UnitPrice: 45.6000000000, Quantity: 15, Discount: 0.25, Amount: 684.0000000000, ShippedDate: 2013-10-13  row: 0x1131867c0  session: 0x11317f5e0  ins_upd_dlt: upd - 2022-04-24 11:30:23,172 - logic_logger - INF\n....OrderDetail[1040] {Formula ShippedDate} Id: 1040, OrderId: 10643, ProductId: 28, UnitPrice: 45.6000000000, Quantity: 15, Discount: 0.25, Amount: 684.0000000000, ShippedDate:  [2013-10-13--&gt;] None  row: 0x1131867c0  session: 0x11317f5e0  ins_upd_dlt: upd - 2022-04-24 11:30:23,173 - logic_logger - INF\n......Product[28] {Update - Adjusting Product: UnitsShipped} Id: 28, ProductName: R\u00f6ssle Sauerkraut, SupplierId: 12, CategoryId: 7, QuantityPerUnit: 25 - 825 g cans, UnitPrice: 45.6000000000, UnitsInStock: 41, UnitsOnOrder: 0, ReorderLevel: 0, Discontinued: 1, UnitsShipped:  [-15--&gt;] 0  row: 0x11317fbb0  session: 0x11317f5e0  ins_upd_dlt: upd - 2022-04-24 11:30:23,175 - logic_logger - INF\n......Product[28] {Formula UnitsInStock} Id: 28, ProductName: R\u00f6ssle Sauerkraut, SupplierId: 12, CategoryId: 7, QuantityPerUnit: 25 - 825 g cans, UnitPrice: 45.6000000000, UnitsInStock:  [41--&gt;] 26, UnitsOnOrder: 0, ReorderLevel: 0, Discontinued: 1, UnitsShipped:  [-15--&gt;] 0  row: 0x11317fbb0  session: 0x11317f5e0  ins_upd_dlt: upd - 2022-04-24 11:30:23,176 - logic_logger - INF\n....OrderDetail[1041] {Update - Cascading Order.ShippedDate (,...)} Id: 1041, OrderId: 10643, ProductId: 39, UnitPrice: 18.0000000000, Quantity: 21, Discount: 0.25, Amount: 378.0000000000, ShippedDate: 2013-10-13  row: 0x113186820  session: 0x11317f5e0  ins_upd_dlt: upd - 2022-04-24 11:30:23,177 - logic_logger - INF\n....OrderDetail[1041] {Prune Formula: Amount [['UnitPrice', 'Quantity']]} Id: 1041, OrderId: 10643, ProductId: 39, UnitPrice: 18.0000000000, Quantity: 21, Discount: 0.25, Amount: 378.0000000000, ShippedDate: 2013-10-13  row: 0x113186820  session: 0x11317f5e0  ins_upd_dlt: upd - 2022-04-24 11:30:23,178 - logic_logger - INF\n....OrderDetail[1041] {Formula ShippedDate} Id: 1041, OrderId: 10643, ProductId: 39, UnitPrice: 18.0000000000, Quantity: 21, Discount: 0.25, Amount: 378.0000000000, ShippedDate:  [2013-10-13--&gt;] None  row: 0x113186820  session: 0x11317f5e0  ins_upd_dlt: upd - 2022-04-24 11:30:23,179 - logic_logger - INF\n......Product[39] {Update - Adjusting Product: UnitsShipped} Id: 39, ProductName: Chartreuse verte, SupplierId: 18, CategoryId: 1, QuantityPerUnit: 750 cc per bottle, UnitPrice: 18.0000000000, UnitsInStock: 90, UnitsOnOrder: 0, ReorderLevel: 5, Discontinued: 0, UnitsShipped:  [-21--&gt;] 0  row: 0x11307b280  session: 0x11317f5e0  ins_upd_dlt: upd - 2022-04-24 11:30:23,181 - logic_logger - INF\n......Product[39] {Formula UnitsInStock} Id: 39, ProductName: Chartreuse verte, SupplierId: 18, CategoryId: 1, QuantityPerUnit: 750 cc per bottle, UnitPrice: 18.0000000000, UnitsInStock:  [90--&gt;] 69, UnitsOnOrder: 0, ReorderLevel: 5, Discontinued: 0, UnitsShipped:  [-21--&gt;] 0  row: 0x11307b280  session: 0x11317f5e0  ins_upd_dlt: upd - 2022-04-24 11:30:23,182 - logic_logger - INF\n....OrderDetail[1042] {Update - Cascading Order.ShippedDate (,...)} Id: 1042, OrderId: 10643, ProductId: 46, UnitPrice: 12.0000000000, Quantity: 2, Discount: 0.25, Amount: 24.0000000000, ShippedDate: 2013-10-13  row: 0x113186760  session: 0x11317f5e0  ins_upd_dlt: upd - 2022-04-24 11:30:23,183 - logic_logger - INF\n....OrderDetail[1042] {Prune Formula: Amount [['UnitPrice', 'Quantity']]} Id: 1042, OrderId: 10643, ProductId: 46, UnitPrice: 12.0000000000, Quantity: 2, Discount: 0.25, Amount: 24.0000000000, ShippedDate: 2013-10-13  row: 0x113186760  session: 0x11317f5e0  ins_upd_dlt: upd - 2022-04-24 11:30:23,184 - logic_logger - INF\n....OrderDetail[1042] {Formula ShippedDate} Id: 1042, OrderId: 10643, ProductId: 46, UnitPrice: 12.0000000000, Quantity: 2, Discount: 0.25, Amount: 24.0000000000, ShippedDate:  [2013-10-13--&gt;] None  row: 0x113186760  session: 0x11317f5e0  ins_upd_dlt: upd - 2022-04-24 11:30:23,185 - logic_logger - INF\n......Product[46] {Update - Adjusting Product: UnitsShipped} Id: 46, ProductName: Spegesild, SupplierId: 21, CategoryId: 8, QuantityPerUnit: 4 - 450 g glasses, UnitPrice: 12.0000000000, UnitsInStock: 97, UnitsOnOrder: 0, ReorderLevel: 0, Discontinued: 0, UnitsShipped:  [-2--&gt;] 0  row: 0x11307b310  session: 0x11317f5e0  ins_upd_dlt: upd - 2022-04-24 11:30:23,186 - logic_logger - INF\n......Product[46] {Formula UnitsInStock} Id: 46, ProductName: Spegesild, SupplierId: 21, CategoryId: 8, QuantityPerUnit: 4 - 450 g glasses, UnitPrice: 12.0000000000, UnitsInStock:  [97--&gt;] 95, UnitsOnOrder: 0, ReorderLevel: 0, Discontinued: 0, UnitsShipped:  [-2--&gt;] 0  row: 0x11307b310  session: 0x11317f5e0  ins_upd_dlt: upd - 2022-04-24 11:30:23,187 - logic_logger - INF\nLogic Phase:        COMMIT(session=0x11317f5e0)                                          - 2022-04-24 11:30:23,189 - logic_logger - INF\n..Order[10643] {Commit Event} Id: 10643, CustomerId: ALFKI, EmployeeId: 6, OrderDate: 2013-08-25, RequiredDate: 2013-10-13, ShippedDate:  [2013-10-13--&gt;] None, ShipVia: 1, Freight: 29.4600000000, ShipName: Alfreds Futterkiste, ShipAddress: Obere Str. 57, ShipCity: Berlin, ShipRegion: Western Europe, ShipPostalCode: 12209, ShipCountry: Germany, AmountTotal: 1086.00, Country: None, City: None, Ready: True, OrderDetailCount: 3, CloneFromOrder: None  row: 0x11317f850  session: 0x11317f5e0  ins_upd_dlt: upd - 2022-04-24 11:30:23,191 - logic_logger - INF\n</code></pre></p> <p> </p>"},{"location":"Behave-Logic-Report/#scenario-clone-existing-order","title":"Scenario: Clone Existing Order","text":"<p>\u2003  Scenario: Clone Existing Order \u2003\u2003    Given Shipped Order \u2003\u2003    When Cloning Existing Order \u2003\u2003    Then Logic Copies ClonedFrom OrderDetails  </p> Tests - and their logic - are transparent.. click to see Logic <p> </p> <p>Logic Doc for scenario: Clone Existing Order</p> <p>We create an order, setting CloneFromOrder.</p> <p>This copies the CloneFromOrder OrderDetails to our new Order.</p> <p>The copy operation is automated using <code>logic_row.copy_children()</code>:</p> <ol> <li> <p><code>place_order.feature</code> defines the test</p> </li> <li> <p><code>place_order.py</code> implements the test.  It uses the API to Post an Order, setting <code>CloneFromOrder</code> to trigger the copy logic</p> </li> <li> <p><code>declare_logic.py</code> implements the logic, by invoking <code>logic_row.copy_children()</code>.  <code>which</code> defines which children to copy, here just <code>OrderDetailList</code></p> </li> </ol> <p><code>CopyChildren</code> For more information, see here</p> <pre><code>Useful in row event handlers to copy multiple children types to self from copy_from children.\n\nchild-spec := &lt; \u2018child-list-name\u2019 | &lt; \u2018child-list-name = parent-list-name\u2019 &gt;\nchild-list-spec := [child-spec | (child-spec, child-list-spec)]\n\nEg. RowEvent on Order\n    which = [\"OrderDetailList\"]\n    logic_row.copy_children(copy_from=row.parent, which_children=which)\n\nEg, test/copy_children:\n    child_list_spec = [\n        (\"MileStoneList\",\n            [\"DeliverableList\"]  # for each Milestone, get the Deliverables\n        ),\n        \"StaffList\"\n    ]\n</code></pre> <p>Key Takeaway: copy_children provides a deep-copy service.</p> <p> </p> <p>Rules Used in Scenario: Clone Existing Order <pre><code>  Customer  \n    1. Constraint Function: None   \n    2. Derive Customer.UnpaidOrderCount as Count(&lt;class 'database.models.Order'&gt; Where &lt;function declare_logic.&lt;locals&gt;.&lt;lambda&gt; at 0x11291e940&gt;)  \n    3. Derive Customer.OrderCount as Count(&lt;class 'database.models.Order'&gt; Where None)  \n    4. Derive Customer.Balance as Sum(Order.AmountTotal Where &lt;function declare_logic.&lt;locals&gt;.&lt;lambda&gt; at 0x11282c280&gt;)  \n  Order  \n    5. RowEvent Order.clone_order()   \n    6. Derive Order.OrderDetailCount as Count(&lt;class 'database.models.OrderDetail'&gt; Where None)  \n    7. Derive Order.AmountTotal as Sum(OrderDetail.Amount Where None)  \n  OrderDetail  \n    8. Derive OrderDetail.UnitPrice as Copy(Product.UnitPrice)  \n    9. Derive OrderDetail.ShippedDate as Formula (2): row.Order.ShippedDate  \n    10. Derive OrderDetail.Amount as Formula (1): as_expression=lambda row: row.UnitPrice * row.Qua [...]  \n  Product  \n    11. Derive Product.UnitsInStock as Formula (1): &lt;function&gt;  \n    12. Derive Product.UnitsShipped as Sum(OrderDetail.Quantity Where &lt;function declare_logic.&lt;locals&gt;.&lt;lambda&gt; at 0x11291e700&gt;)  \n</code></pre> Logic Log in Scenario: Clone Existing Order <pre><code>Logic Phase:        ROW LOGIC(session=0x11318f370) (sqlalchemy before_flush)             - 2022-04-24 11:30:23,373 - logic_logger - INF\n..Order[None] {Insert - client} Id: None, CustomerId: ALFKI, EmployeeId: 1, OrderDate: None, RequiredDate: None, ShippedDate: None, ShipVia: None, Freight: 11, ShipName: None, ShipAddress: None, ShipCity: None, ShipRegion: None, ShipPostalCode: None, ShipCountry: None, AmountTotal: None, Country: None, City: None, Ready: None, OrderDetailCount: None, CloneFromOrder: 10643  row: 0x11318f2e0  session: 0x11318f370  ins_upd_dlt: ins - 2022-04-24 11:30:23,374 - logic_logger - INF\n....Customer[ALFKI] {Update - Adjusting Customer: UnpaidOrderCount, OrderCount} Id: ALFKI, CompanyName: Alfreds Futterkiste, ContactName: Maria Anders, ContactTitle: Sales Representative, Address: Obere Str. 57A, City: Berlin, Region: Western Europe, PostalCode: 12209, Country: Germany, Phone: 030-0074321, Fax: 030-0076545, Balance: 2102.0000000000, CreditLimit: 2300.0000000000, OrderCount:  [15--&gt;] 16, UnpaidOrderCount:  [10--&gt;] 11  row: 0x11318f250  session: 0x11318f370  ins_upd_dlt: upd - 2022-04-24 11:30:23,383 - logic_logger - INF\n....OrderDetail[None] {warning: Order (OrderId not None... fixing} Id: None, OrderId:  [None--&gt;] 10643, ProductId:  [None--&gt;] 28, UnitPrice: None, Quantity:  [None--&gt;] 15, Discount:  [None--&gt;] 0.25, Amount: None, ShippedDate: None  row: 0x11307b9d0  session: 0x11318f370  ins_upd_dlt: ins - 2022-04-24 11:30:23,387 - logic_logger - INF\n....OrderDetail[None] {Insert - Copy Children OrderDetailList} Id: None, OrderId: None, ProductId:  [None--&gt;] 28, UnitPrice: None, Quantity:  [None--&gt;] 15, Discount:  [None--&gt;] 0.25, Amount: None, ShippedDate: None  row: 0x11307b9d0  session: 0x11318f370  ins_upd_dlt: ins - 2022-04-24 11:30:23,388 - logic_logger - INF\n....OrderDetail[None] {copy_rules for role: Product - UnitPrice} Id: None, OrderId: None, ProductId:  [None--&gt;] 28, UnitPrice:  [None--&gt;] 45.6000000000, Quantity:  [None--&gt;] 15, Discount:  [None--&gt;] 0.25, Amount: None, ShippedDate: None  row: 0x11307b9d0  session: 0x11318f370  ins_upd_dlt: ins - 2022-04-24 11:30:23,390 - logic_logger - INF\n....OrderDetail[None] {Formula Amount} Id: None, OrderId: None, ProductId:  [None--&gt;] 28, UnitPrice:  [None--&gt;] 45.6000000000, Quantity:  [None--&gt;] 15, Discount:  [None--&gt;] 0.25, Amount:  [None--&gt;] 684.0000000000, ShippedDate: None  row: 0x11307b9d0  session: 0x11318f370  ins_upd_dlt: ins - 2022-04-24 11:30:23,391 - logic_logger - INF\n......Product[28] {Update - Adjusting Product: UnitsShipped} Id: 28, ProductName: R\u00f6ssle Sauerkraut, SupplierId: 12, CategoryId: 7, QuantityPerUnit: 25 - 825 g cans, UnitPrice: 45.6000000000, UnitsInStock: 26, UnitsOnOrder: 0, ReorderLevel: 0, Discontinued: 1, UnitsShipped:  [0--&gt;] 15  row: 0x113172130  session: 0x11318f370  ins_upd_dlt: upd - 2022-04-24 11:30:23,392 - logic_logger - INF\n......Product[28] {Formula UnitsInStock} Id: 28, ProductName: R\u00f6ssle Sauerkraut, SupplierId: 12, CategoryId: 7, QuantityPerUnit: 25 - 825 g cans, UnitPrice: 45.6000000000, UnitsInStock:  [26--&gt;] 11, UnitsOnOrder: 0, ReorderLevel: 0, Discontinued: 1, UnitsShipped:  [0--&gt;] 15  row: 0x113172130  session: 0x11318f370  ins_upd_dlt: upd - 2022-04-24 11:30:23,393 - logic_logger - INF\n......Order[None] {Update - Adjusting Order: AmountTotal, OrderDetailCount} Id: None, CustomerId: ALFKI, EmployeeId: 1, OrderDate: None, RequiredDate: None, ShippedDate: None, ShipVia: None, Freight: 11, ShipName: None, ShipAddress: None, ShipCity: None, ShipRegion: None, ShipPostalCode: None, ShipCountry: None, AmountTotal:  [None--&gt;] 684.0000000000, Country: None, City: None, Ready: None, OrderDetailCount:  [None--&gt;] 1, CloneFromOrder: 10643  row: 0x11318f2e0  session: 0x11318f370  ins_upd_dlt: upd - 2022-04-24 11:30:23,395 - logic_logger - INF\n........Customer[ALFKI] {Update - Adjusting Customer: Balance} Id: ALFKI, CompanyName: Alfreds Futterkiste, ContactName: Maria Anders, ContactTitle: Sales Representative, Address: Obere Str. 57A, City: Berlin, Region: Western Europe, PostalCode: 12209, Country: Germany, Phone: 030-0074321, Fax: 030-0076545, Balance:  [2102.0000000000--&gt;] 2786.0000000000, CreditLimit: 2300.0000000000, OrderCount: 16, UnpaidOrderCount: 11  row: 0x11318f250  session: 0x11318f370  ins_upd_dlt: upd - 2022-04-24 11:30:23,397 - logic_logger - INF\n........Customer[ALFKI] {Constraint Failure: balance (2786.0000000000) exceeds credit (2300.0000000000)} Id: ALFKI, CompanyName: Alfreds Futterkiste, ContactName: Maria Anders, ContactTitle: Sales Representative, Address: Obere Str. 57A, City: Berlin, Region: Western Europe, PostalCode: 12209, Country: Germany, Phone: 030-0074321, Fax: 030-0076545, Balance:  [2102.0000000000--&gt;] 2786.0000000000, CreditLimit: 2300.0000000000, OrderCount: 16, UnpaidOrderCount: 11  row: 0x11318f250  session: 0x11318f370  ins_upd_dlt: upd - 2022-04-24 11:30:23,398 - logic_logger - INF\n</code></pre></p> <p> </p>"},{"location":"Behave-Logic-Report/#feature-salary-change","title":"Feature: Salary Change","text":""},{"location":"Behave-Logic-Report/#scenario-audit-salary-change","title":"Scenario: Audit Salary Change","text":"<p>\u2003  Scenario: Audit Salary Change \u2003\u2003    Given Employee 5 (Buchanan) - Salary 95k \u2003\u2003    When Patch Salary to 200k \u2003\u2003    Then Salary_audit row created  </p> Tests - and their logic - are transparent.. click to see Logic <p> </p> <p>Logic Doc for scenario: Audit Salary Change</p> <p>Observe the logic log to see that it creates audit rows:</p> <ol> <li>Discouraged: you can implement auditing with events.  But auditing is a common pattern, and this can lead to repetitive, tedious code</li> <li>Preferred: approaches use extensible rules.</li> </ol> <p>Generic event handlers can also reduce redundant code, illustrated in the time/date stamping <code>handle_all</code> logic.</p> <p>This is due to the <code>copy_row</code> rule.  Contrast this to the tedious <code>audit_by_event</code> alternative:</p> <p>Key Takeaway: use extensible own rule types to automate pattern you identify; events can result in tedious amounts of code.</p> <p> </p> <p>Rules Used in Scenario: Audit Salary Change <pre><code>  Employee  \n    1. RowEvent Employee.audit_by_event()   \n</code></pre> Logic Log in Scenario: Audit Salary Change <pre><code>Logic Phase:        ROW LOGIC(session=0x113197cd0) (sqlalchemy before_flush)             - 2022-04-24 11:30:23,435 - logic_logger - INF\n..Employee[5] {Update - client} Id: 5, LastName: Buchanan, FirstName: Steven, Title: Sales Manager, TitleOfCourtesy: Mr., BirthDate: 1987-03-04, HireDate: 2025-10-17, Address: 14 Garrett Hill, City: London, Region: British Isles, PostalCode: SW1 8JR, Country: UK, HomePhone: (71) 555-4848, Extension: 3453, Photo: None, Notes: Steven Buchanan graduated from St. Andrews University, Scotland, with a BSC degree in 1976.  Upon joining the company as a sales representative in 1992, he spent 6 months in an orientation program at the Seattle office and then returned to his permanent post in London.  He was promoted to sales manager in March 1993.  Mr. Buchanan has completed the courses 'Successful Telemarketing' and 'International Sales Management.'  He is fluent in French., ReportsTo: 2, PhotoPath: http://accweb/emmployees/buchanan.bmp, EmployeeType: Commissioned, Salary:  [95000.0000000000--&gt;] 200000, WorksForDepartmentId: 3, OnLoanDepartmentId: None, UnionId: None, Dues: None  row: 0x1131a62b0  session: 0x113197cd0  ins_upd_dlt: upd - 2022-04-24 11:30:23,436 - logic_logger - INF\n..Employee[5] {BEGIN Copy to: EmployeeAudit} Id: 5, LastName: Buchanan, FirstName: Steven, Title: Sales Manager, TitleOfCourtesy: Mr., BirthDate: 1987-03-04, HireDate: 2025-10-17, Address: 14 Garrett Hill, City: London, Region: British Isles, PostalCode: SW1 8JR, Country: UK, HomePhone: (71) 555-4848, Extension: 3453, Photo: None, Notes: Steven Buchanan graduated from St. Andrews University, Scotland, with a BSC degree in 1976.  Upon joining the company as a sales representative in 1992, he spent 6 months in an orientation program at the Seattle office and then returned to his permanent post in London.  He was promoted to sales manager in March 1993.  Mr. Buchanan has completed the courses 'Successful Telemarketing' and 'International Sales Management.'  He is fluent in French., ReportsTo: 2, PhotoPath: http://accweb/emmployees/buchanan.bmp, EmployeeType: Commissioned, Salary:  [95000.0000000000--&gt;] 200000, WorksForDepartmentId: 3, OnLoanDepartmentId: None, UnionId: None, Dues: None  row: 0x1131a62b0  session: 0x113197cd0  ins_upd_dlt: upd - 2022-04-24 11:30:23,440 - logic_logger - INF\n....EmployeeAudit[None] {Insert - Copy EmployeeAudit} Id: None, Title: Sales Manager, Salary: 200000, LastName: Buchanan, FirstName: Steven, EmployeeId: None, CreatedOn: None  row: 0x11318fee0  session: 0x113197cd0  ins_upd_dlt: ins - 2022-04-24 11:30:23,443 - logic_logger - INF\n....EmployeeAudit[None] {early_row_event_all_classes - handle_all sets 'Created_on} Id: None, Title: Sales Manager, Salary: 200000, LastName: Buchanan, FirstName: Steven, EmployeeId: None, CreatedOn: 2022-04-24 11:30:23.443805  row: 0x11318fee0  session: 0x113197cd0  ins_upd_dlt: ins - 2022-04-24 11:30:23,444 - logic_logger - INF\nLogic Phase:        COMMIT(session=0x113197cd0)                                          - 2022-04-24 11:30:23,444 - logic_logger - INF\n..Employee[5] {Commit Event} Id: 5, LastName: Buchanan, FirstName: Steven, Title: Sales Manager, TitleOfCourtesy: Mr., BirthDate: 1987-03-04, HireDate: 2025-10-17, Address: 14 Garrett Hill, City: London, Region: British Isles, PostalCode: SW1 8JR, Country: UK, HomePhone: (71) 555-4848, Extension: 3453, Photo: None, Notes: Steven Buchanan graduated from St. Andrews University, Scotland, with a BSC degree in 1976.  Upon joining the company as a sales representative in 1992, he spent 6 months in an orientation program at the Seattle office and then returned to his permanent post in London.  He was promoted to sales manager in March 1993.  Mr. Buchanan has completed the courses 'Successful Telemarketing' and 'International Sales Management.'  He is fluent in French., ReportsTo: 2, PhotoPath: http://accweb/emmployees/buchanan.bmp, EmployeeType: Commissioned, Salary:  [95000.0000000000--&gt;] 200000, WorksForDepartmentId: 3, OnLoanDepartmentId: None, UnionId: None, Dues: None  row: 0x1131a62b0  session: 0x113197cd0  ins_upd_dlt: upd - 2022-04-24 11:30:23,446 - logic_logger - INF\n</code></pre></p> <p> </p>"},{"location":"Behave-Logic-Report/#scenario-raise-must-be-meaningful","title":"Scenario: Raise Must be Meaningful","text":"<p>\u2003  Scenario: Raise Must be Meaningful \u2003\u2003    Given Employee 5 (Buchanan) - Salary 95k \u2003\u2003    When Patch Salary to 96k \u2003\u2003    Then Reject - Raise too small  </p> Tests - and their logic - are transparent.. click to see Logic <p> </p> <p>Logic Doc for scenario: Raise Must be Meaningful</p> <p>Observe the use of <code>old_row</code></p> <p>Key Takeaway: State Transition Logic enabled per <code>old_row</code></p> <p> </p> <p>Rules Used in Scenario: Raise Must be Meaningful <pre><code>  Employee  \n    1. Constraint Function: &lt;function declare_logic.&lt;locals&gt;.raise_over_20_percent at 0x1129501f0&gt;   \n</code></pre> Logic Log in Scenario: Raise Must be Meaningful <pre><code>Logic Phase:        ROW LOGIC(session=0x11314d100) (sqlalchemy before_flush)             - 2022-04-24 11:30:23,643 - logic_logger - INF\n..Employee[5] {Update - client} Id: 5, LastName: Buchanan, FirstName: Steven, Title: Sales Manager, TitleOfCourtesy: Mr., BirthDate: 1987-03-04, HireDate: 2025-10-17, Address: 14 Garrett Hill, City: London, Region: British Isles, PostalCode: SW1 8JR, Country: UK, HomePhone: (71) 555-4848, Extension: 3453, Photo: None, Notes: Steven Buchanan graduated from St. Andrews University, Scotland, with a BSC degree in 1976.  Upon joining the company as a sales representative in 1992, he spent 6 months in an orientation program at the Seattle office and then returned to his permanent post in London.  He was promoted to sales manager in March 1993.  Mr. Buchanan has completed the courses 'Successful Telemarketing' and 'International Sales Management.'  He is fluent in French., ReportsTo: 2, PhotoPath: http://accweb/emmployees/buchanan.bmp, EmployeeType: Commissioned, Salary:  [95000.0000000000--&gt;] 96000, WorksForDepartmentId: 3, OnLoanDepartmentId: None, UnionId: None, Dues: None  row: 0x11307b130  session: 0x11314d100  ins_upd_dlt: upd - 2022-04-24 11:30:23,644 - logic_logger - INF\n..Employee[5] {Constraint Failure: Buchanan needs a more meaningful raise} Id: 5, LastName: Buchanan, FirstName: Steven, Title: Sales Manager, TitleOfCourtesy: Mr., BirthDate: 1987-03-04, HireDate: 2025-10-17, Address: 14 Garrett Hill, City: London, Region: British Isles, PostalCode: SW1 8JR, Country: UK, HomePhone: (71) 555-4848, Extension: 3453, Photo: None, Notes: Steven Buchanan graduated from St. Andrews University, Scotland, with a BSC degree in 1976.  Upon joining the company as a sales representative in 1992, he spent 6 months in an orientation program at the Seattle office and then returned to his permanent post in London.  He was promoted to sales manager in March 1993.  Mr. Buchanan has completed the courses 'Successful Telemarketing' and 'International Sales Management.'  He is fluent in French., ReportsTo: 2, PhotoPath: http://accweb/emmployees/buchanan.bmp, EmployeeType: Commissioned, Salary:  [95000.0000000000--&gt;] 96000, WorksForDepartmentId: 3, OnLoanDepartmentId: None, UnionId: None, Dues: None  row: 0x11307b130  session: 0x11314d100  ins_upd_dlt: upd - 2022-04-24 11:30:23,646 - logic_logger - INF\n</code></pre></p> <p>  Completed at April 24, 2022 11:30:2  </p>"},{"location":"Behave/","title":"Testing With Behave","text":""},{"location":"Behave/#behave-creates-executable-test-suite-documentation","title":"Behave Creates Executable Test Suite, Documentation","text":"<p>You can optionally use the Behave test framework to (here is an Agile Approach for using Behave):</p> <ol> <li> <p>Create and Run an Executable Test Suite: in your IDE, create test definitions (similar to what is shown in the report below), and Python code to execute tests.  You can then execute your test suite with 1 command.</p> </li> <li> <p>Requirements and Test Documentation: as shown below, you can then create a wiki report that documents your requirements, and the tests (Scenarios) that confirm their proper operation.</p> </li> <li> <p>Integrated Logic Documentation: the report integrates your logic, including a logic report showing your logic (rules and Python), and a Logic Log that shows exactly how the rules executed.  Logic Doc is transparent to business users, so can further contribute to Agile Collaboration.</p> </li> </ol> <p>Behave is a framework for defining and executing tests.  It is based on TDD (Test Driven Development), an Agile approach for defining system requirements as executable tests.</p> <p> </p>"},{"location":"Behave/#using-behave","title":"Using Behave","text":"<p>Behave is pre-installed with API Logic Server.  Use it as shown above:</p> <ol> <li> <p>Create <code>.feature</code> files to define Scenarios (aka tests) for Features (aka Stories)</p> </li> <li> <p>Code <code>.py</code> files to implement Scenario tests</p> </li> <li> <p>Run Test Suite: Launch Configuration <code>Behave Run</code>.  This runs all your Scenarios, and produces a summary report of your Features and the test results.</p> </li> <li> <p>Report: Launch Configuration <code>Behave Report</code> to create the wiki file shown at the top of this page.</p> </li> </ol> <p>These steps are further defined, below.  Explore the samples in the sample project.</p> <p> </p>"},{"location":"Behave/#1-create-feature-file-to-define-scenario","title":"1. Create <code>.feature</code> file to define Scenario","text":"<p>Feature (aka Story) files are designed to promote IT / business user collaboration.  </p> <p> </p>"},{"location":"Behave/#2-code-py-file-to-implement-test","title":"2. Code <code>.py</code> file to implement test","text":"<p>Implement your tests in Python.  Here, the tests are largely read existing data, run transaction, and test results, using the API.  You can obtain the URLs from the swagger.</p> <p>Key points:</p> <ul> <li> <p>Link your scenario / implementations with annotations, as shown for Order Placed with excessive quantity.</p> </li> <li> <p>Include the <code>test_utils.prt()</code> call; be sure to use specify the scenario name as the 2nd argument.  This is what drives the name of the Logic Log file, discussed below.</p> </li> <li> <p>Optionally, include a Python docstring on your <code>when</code> implementation as shown above, delimited by <code>\"\"\"</code> strings (see \"Familiar logic pattern\" in the screen shot, above). If provided, this will be written into the wiki report.</p> </li> <li> <p>Important: the system assumes the following line identifies the scenario_name; be sure to include it.</p> </li> </ul> <p> </p>"},{"location":"Behave/#3-run-test-suite-launch-configuration-behave-run","title":"3. Run Test Suite: Launch Configuration <code>Behave Run</code>","text":"<p>You can now execute your Test Suite.  Run the <code>Behave Run</code> Launch Configuration, and Behave will run all of the tests, producing the outputs (<code>behave.log</code> and <code>&lt;scenario.logs&gt;</code> shown above.</p> <ul> <li> <p>Windows users will need to run <code>Windows Behave Run</code></p> </li> <li> <p>You can run just 1 scenario using <code>Behave Scenario</code></p> </li> <li> <p>You can set breakpoints in your tests</p> </li> </ul> <p>The server must be running for these tests.  Use the Launch Configuration <code>ApiLogicServer</code>, or <code>python api_logic_server_run.py</code>.  The latter does not run the debugger, which you may find more convenient since changes to your test code won't restart the server.</p> <p> </p>"},{"location":"Behave/#4-report-launch-configuration-behave-report","title":"4. Report: Launch Configuration `Behave Report'","text":"<p>Run this to create the wiki reports from the logs in step 3.</p> <p> </p>"},{"location":"Create-ApiLogicProject/","title":"Create an API Logic Project","text":"<p>Create projects by establishing your Python environment, then issuing <code>ApiLogicServer create ...</code>.  The process differs slighly on whether you are using Docker, or a local install.</p> <p>The procedures here will create the Tutorial, the recommended starting point.  You will then want to create a project with your own database.  For that, you will require a SQLAlchemy URI.  You can see some examples with the command <code>ApiLogicServer examples</code>.</p> Local InstallDocker Install <p>If necessary, re-establish your Python environment:</p> Re-establish Python environment (already estaslished if you just installed)<pre><code>cd ApiLogicServer          # your install folder\nsource venv/bin/activate   # windows venv\\Scripts\\activate\nApiLogicServer create      # accept default project name, db\n</code></pre> <p>Then, create your project: Create API Logic Project<pre><code>ApiLogicServer create      # accept default project name, db (sample tutorial)\n</code></pre></p> <p>If necessary, re-establish your Python environment:</p> Re-establish Python environment (already estaslished if you just installed)<pre><code>cd ApiLogicServer  # directory of API Logic Server projects on local host\n\n# Start (install if required) the API Logic Server docker container\n\ndocker run -it --name api_logic_server --rm -p 5656:5656 -p 5002:5002 -v ${PWD}:/localhost apilogicserver/api_logic_server\n</code></pre> <p>Then, create your project: Create API Logic Project<pre><code>$ ApiLogicServer create --project_name=/localhost/ApiLogicProject --db_url=\n</code></pre></p>"},{"location":"Create-ApiLogicProject/#_1","title":"","text":""},{"location":"Create-ApiLogicProject/#project-directory-created","title":"Project Directory Created","text":"<p>In either case, the <code>create</code> command builds an <code>ApiLogicProject</code> - a directory, shown here in VSCode:</p>"},{"location":"Data-Model-Classes/","title":"Data Model Classes","text":"<p>Most of API Logic Server functionality derives from the data model classes created from your schema when you create your project with <code>ApiLogicServer create</code>.  </p> <p>It operates as described below.</p>"},{"location":"Data-Model-Classes/#create-modelspy-from-schema","title":"Create <code>models.py</code> from schema","text":"<p><code>ApiLogicServer create</code> builds the <code>database/models.py</code> file, with a class for each table: </p> <pre><code>class Category(SAFRSBase, Base):             #  &lt;--- singular/capitalized tablename\n    __tablename__ = 'CategoryTableNameTest'  #  &lt;--- from schema\n    _s_collection_name = 'Category'          #  &lt;--- defaults from class name - endpoint, admin reference\n    Id = Column(Integer, primary_key=True)\n    CategoryName = Column(String(8000))\n    Description = Column(String(8000))\n\n\n\nclass Order(SAFRSBase, Base):\n    __tablename__ = 'Order'\n    _s_collection_name = 'Order'\n    __table_args__ = (\n        ForeignKeyConstraint(['Country', 'City'], ['Location.country', 'Location.city']),\n    )\n\n    Id = Column(Integer, primary_key=True)\n    CustomerId = Column(ForeignKey('Customer.Id'), nullable=False, index=True)\n    EmployeeId = Column(ForeignKey('Employee.Id'), nullable=False, index=True)\n    # etc\n    AmountTotal = Column(DECIMAL(10, 2))\n    Country = Column(String(50))\n    City = Column(String(50))\n    Ready = Column(Boolean, server_default=text(\"TRUE\"))\n    OrderDetailCount = Column(Integer, server_default=text(\"0\"))\n    CloneFromOrder = Column(ForeignKey('Order.Id'))\n\n    # see backref on parent: parent = relationship('Order', remote_side=[Id], cascade_backrefs=True, backref='OrderList')\n    # see backref on parent: Location = relationship('Location', cascade_backrefs=True, backref='OrderList')\n    # see backref on parent: Customer = relationship('Customer', cascade_backrefs=True, backref='OrderList')\n    # see backref on parent: Employee = relationship('Employee', cascade_backrefs=True, backref='OrderList')\n\n    parent = relationship('Order', remote_side=[Id], cascade_backrefs=True, backref='OrderList')  # special handling for self-relationships\n    OrderDetailList = relationship('OrderDetail', cascade='all, delete', cascade_backrefs=True, backref='Order')  # manual fix\n</code></pre> <p>This was derived from sqlacodgen -- many thanks!  (It is not necessary to <code>pip</code> this into your project - it's part of API Logic Server).</p> <p> </p>"},{"location":"Data-Model-Classes/#class-end-point-for-each-table","title":"Class (end point) for each table","text":"<p>A class is created for each table.  The name (e.g. <code>Order</code>) is derived from the table name: capitalized and singlularized.</p> <p> </p>"},{"location":"Data-Model-Classes/#end-point-name-from-class","title":"End point name from Class","text":"<p>These class names are used as the default API endpoint name.  Override them as described below.</p> <p> </p>"},{"location":"Data-Model-Classes/#overriding-the-class-name","title":"Overriding the Class Name","text":"<p>Developers often want to control endpoint names.  To do so, edit the value of <code>_s_collection_name</code> as shown above. </p> <p> </p>"},{"location":"Data-Model-Classes/#relationship-names","title":"Relationship Names","text":"<p>Your class model includes accessors for related data:</p> <ol> <li> <p>Relationships are created on the one side of one-to-many relationships.  The relationship name is the target class + \"List\", and is available in Python (<code>items = anOrder.OrderDetailList</code>).  These names are used in your UI admin apps, and your API</p> </li> <li> <p>Relationships have 2 names; the backref name is now the many side refers to the _one\" side (e.g., anOrder = anOrderDetail.order`)</p> </li> </ol> <p>Relationship names are also part of your API:</p> <p>Each database has extensions which can introduce issues in model generation, so facilities are described in Troubleshooting to edit models and rebuild.</p>"},{"location":"Data-Model-Classes/#model-linkages","title":"Model Linkages","text":"<p>The diagram below illustrates how the class aspects and the admin app tie together:</p> <p> </p>"},{"location":"Data-Model-Classes/#appendix-pre-650-end-point-names-from-table-names","title":"Appendix: Pre 6.5.0 (End Point names from table names)","text":"<p>This functionality was altered in version 6.4.6.  In prior versions, it operated as shown in the example below:</p> <ul> <li>On the right are the created data model classes</li> <li>On the left are references to it from the Admin Web App <code>admin.yaml</code> model file that defines how the app behaves:</li> </ul> <p>Observe that:</p> <ol> <li> <p>A class is created for each table.  The name (e.g. <code>OrderDetail</code>) is derived from the table name, but is capitalized and singlularized</p> </li> <li> <p>The table name is from your schema, this corresponds to a resource collection in the API</p> </li> <li> <p>Relationships are created on the one side of one-to-many relationships.  The relationship name is the target class + \"List\", and is available in Python (<code>items = anOrder.OrderDetailList</code>).  These names are used in your UI admin apps, and your API</p> </li> <li> <p>Relationships have 2 names; the backref name is now the many side refers to the _one\" side (e.g., anOrder = anOrderDetail.order`)</p> </li> </ol> <p>Relationship names are also part of your API:</p> <p>Each database has extensions which can introduce issues in model generation, so facilities are described in Troubleshooting to edit models and rebuild.</p>"},{"location":"Data-Model-Customization/","title":"Data Model Customization","text":""},{"location":"Data-Model-Customization/#customize-the-model-add-relationships-derived-attributes","title":"Customize the Model: add relationships, derived attributes","text":"<p>Model files describe your database tables.  You can extend these, e.g. to add relationships, and add derived attributes.</p> <p>Note: relationships are a particularly critical aspect of the model.  While they normally come from your schema and are discovered during <code>ApiLogicServer create</code>, they are often missing from the database.  You can add them as shown below.</p> <p> </p>"},{"location":"Data-Model-Customization/#edit-modelspy-referential-integrity-eg-sqlite","title":"Edit <code>models.py</code>: referential integrity (e.g., sqlite)","text":"<p>Rebuild support enables you to rebuild your project, preserving customizations you have made to the api, logic and app.  You can rebuild from the database, or from the model.</p> <p>This enables you to edit the model to specify aspects not captured in creating the model from your schema.  For example, sqlite often is not configured to enforce referential integrity.  SQLAlchemy provides  support to fill such gaps.</p> <p>For example, try to delete the last order for the first customer.  You will encounter an error since the default is to nullify foreign keys, which in this case is not allowed.</p> <p>You can fix this by altering your <code>models.py:</code></p> <pre><code>    OrderDetailList = relationship('OrderDetail', cascade='all, delete', cascade_backrefs=True, backref='Order')\n</code></pre> <p>Your api, logic and ui are not (directly) dependent on this setting, so there is no need to rebuild; just restart the server, and the system will properly cascade the <code>Order</code> delete to the <code>OrderDetail</code> rows.  Note further that logic will automatically adjust any data dependent on these deletions (e.g. adjust sums and counts).</p> <p> </p>"},{"location":"Data-Model-Customization/#edit-model_extpy-add-relationships-derived-attributes","title":"Edit <code>model_ext.py</code>: add relationships, derived attributes","text":"<p>In addition, you may wish to edit <code>models_ext.py</code>, for example:</p> <ul> <li> <p>to define relationships, critical for multi-table logic, APIs, and web apps</p> </li> <li> <p>to describe derived attributes, so that your API, logic and apps are not limited to the physical data model</p> </li> </ul> <p> </p>"},{"location":"Data-Model-Customization/#use-alembic-to-update-database-schema-from-model","title":"Use Alembic to update database schema from model","text":"<p>As of release 5.02.03, created API Logic Projects integrate Alembic to perform database migrations.</p> <ul> <li>Manual: create migration scripts by hand, or</li> <li>Autogenerate: alter your <code>database/models.py</code>, and have alembic create the migration scripts for you</li> </ul> <p>Preconfiguration includes:</p> <ul> <li>initialized <code>database/alembic</code> directory</li> <li>configured <code>database/alembic/env.py</code> for autogenerations</li> <li>configured <code>database/alembic.ini</code> for directory structure</li> </ul> <p>See the <code>readme</code> in your <code>database/alembic</code> for more information.</p>"},{"location":"Data-Model-Examples/","title":"Examples","text":"<p>To make experimenting easier, several sqlite databases are included in the install.  Use them as described below.</p>"},{"location":"Data-Model-Examples/#db_url-abbreviations","title":"<code>db_url</code> Abbreviations","text":"<p>SQLAlchemy URIs can be fiddly.  For example, the sample database is specified like this:</p> <pre><code>ApiLogicServer create --project_name=Allocation --db_url=sqlite:////Users/val/Desktop/database.sqlite\n</code></pre> <p>So, API Logic Server supports the following <code>db_url</code> shortcuts:</p> <ul> <li>nw - same as the sample (customers and orders; you can also use an empty <code>db_url</code>)</li> <li>nw- - same as nw, but no customizations</li> <li>chinook - albums and artists</li> <li>classicmodels - customers and orders</li> <li>auth - authentication data</li> <li>todo - a simple 1 table database</li> </ul> <p> </p>"},{"location":"Data-Model-Examples/#creating-sample-projects","title":"Creating Sample Projects","text":"<p>You can use the abbreviations to create projects.  For example, create the sample project without customizations to see how API Logic Server would support your own databases:</p> <pre><code>ApiLogicServer create --project_name=nw_no_customizations --db_url=nw-\n</code></pre> <p>Notes:</p> <ol> <li> <p>Docker users would typically precede the <code>project_name</code> with <code>localhost/</code></p> </li> <li> <p>Codespaces users should specify <code>project_name</code> as <code>./</code></p> </li> </ol>"},{"location":"Data-Model-Keys/","title":"Data Model Keys","text":"<p>A critical part of enabling API Logic Server automation is providing for Primary and Foreign Keys.  </p>"},{"location":"Data-Model-Keys/#primary-keys","title":"Primary Keys","text":"<p>These are expected to defined in the database.  They are required for updates, and for the Admin App.</p> <p> </p>"},{"location":"Data-Model-Keys/#infer-primary-key","title":"Infer Primary Key","text":"<p>In some (discouraged) cases, your schema might not declare a primary key, but designate a specific column as <code>unique</code>.  The <code>infer_unqiue_keys</code> option is provided to address such cases.</p> <p> </p>"},{"location":"Data-Model-Keys/#foreign-keys","title":"Foreign Keys","text":"<p>These are also expected to be defined in the database.  They are required for a large set of automation, including:</p> <ul> <li> <p>Multi-table APIs</p> </li> <li> <p>Multi-table forms, including Automatic Joins</p> </li> <li> <p>Multi-Table logic (such as sums, counts, parent references, and copy)</p> </li> </ul> <p>If these are missing in the schema, you can provide them in the SQLAlchemy models, as illustrated in the sample project.</p>"},{"location":"Data-Model-Multi/","title":"Multiple Databases","text":"<p>API Logic Server enables you to create projects that support multiple databases, as follows:</p> <ol> <li> <p>Create the project, specifying your \"main\" database</p> </li> <li> <p>Use the <code>ApiLogicServer add-db</code> command for each additional database</p> <ul> <li>See the example below</li> </ul> </li> </ol> <p> </p>"},{"location":"Data-Model-Multi/#example","title":"Example","text":"<p>SQLAlchemy supports multiple databases by using the <code>bind_key</code> which is supported by Flask.  It is leveraged in creating Api Logic Projects when you add databases like this:</p> <pre><code>cd YourApiLogicProject\nApiLogicServer add-db --db-url=todo --bind_key=Todo\n</code></pre> <p> </p> <p>Observe:</p> <ol> <li>Model files are created (prefixed by your <code>bind-key</code>) for each table in your <code>db-url</code>.  Note:<ul> <li>The <code>bind-key</code> is inserted into the table class.</li> <li>Sqlite databases are copied to your database folder, simplifying source control.</li> <li>This example uses the shorthand for sqlite databases: <code>todo</code>, <code>classicmodels</code>, <code>chinook</code> and <code>nw</code>.  These are included in the install, so you can experiment with them.</li> </ul> </li> <li>The <code>config.py</code> file is altered per your <code>db-url</code><ul> <li>You can use environment variables to override these assignments, to avoid placing passwords in projects.</li> </ul> </li> <li>The <code>bind_databases.py</code> file is created to bind the <code>bind_key</code> to the database url.   This enables SQLAlchemy to access the proper database.</li> </ol> <p> </p>"},{"location":"Data-Model-Multi/#internals","title":"Internals","text":"<p>The example above will result in the following log:</p> <pre><code>ApiLogicServer 6.90.08 Creation Log:\n1. Not Deleting Existing Project\n2. Using Existing Project\n.. ..Adding Database [Todo] to existing project\n.. .. ..Copying sqlite database to: database/Todo_db.sqlite\n.. .. ..From /Users/val/dev/ApiLogicServer/api_logic_server_cli/database/todos.sqlite\n.. ..Updating config.py file with SQLALCHEMY_DATABASE_URI_TODO...\n.. ..Updating database/bind_databases.py with SQLALCHEMY_DATABASE_URI_TODO...\n3. Create/verify database/Todo_models.py, then use that to create api/ and ui/ models\n a.  Create Models - create database/Todo_models.py, using sqlcodegen\n.. .. ..For database:  sqlite:////Users/val/dev/servers/ApiLogicProject/database/Todo_db.sqlite\n.. .. ..Setting bind_key = Todo\n.. .. ..Create resource_list - dynamic import database/Todo_models.py, inspect 2 classes in &lt;project&gt;/database\n b.  Create api/expose_api_models.py from models\n c.  Create ui/admin/admin.yaml from models\n.. .. ..WARNING - no relationships detected - add them to your database or model\n.. .. ..  See https://github.com/valhuber/LogicBank/wiki/Managing-Rules#database-design\n.. .. ..Write /Users/val/dev/servers/ApiLogicProject/ui/admin/Todo_admin.yaml\n d.  Create ui/basic_web_app -- declined\n4. Final project fixup\n b.   Update api_logic_server_run.py with project_name=/Users/val/dev/servers/ApiLogicProject and api_name, host, port\n c.   Fixing api/expose_services - port, host\n d.   Updated customize_api_py with port=5656 and host=localhost\n e.   Updated python_anywhere_wsgi.py with /Users/val/dev/servers/ApiLogicProject\n</code></pre> <p>Notes:</p> <ol> <li>In step 2:<ol> <li>Updating <code>config.py</code> file with the location of the new database</li> <li>Updating <code>database/bind_databases.py</code> to open this database for SQLAlchemy access</li> </ol> </li> <li>In Step 3:<ol> <li>Creating a <code>models.py</code> file; note:<ul> <li>The additional superclasses,</li> <li>Inclusion of your designated <code>bind_key</code>, for step 1.2</li> </ul> </li> </ol> </li> <li>Note the shorthand for sqlite versions of <code>todo</code>, <code>classicmodels</code>, <code>chinook</code>.  These are included in the install.</li> </ol> <p> </p>"},{"location":"Data-Model-Multi/#runtime-support","title":"Runtime Support","text":""},{"location":"Data-Model-Multi/#api-support","title":"API support","text":"<p>Tables in your new databases are available through swagger.</p> <p> </p>"},{"location":"Data-Model-Multi/#admin-support","title":"Admin support","text":"<p>An admin app is built for the table in your new database.  Access it via a url that prefixes the <code>bind-key</code>, such as <code>http://localhost:5656/admin/Todo_admin/</code> (note the trailing slash).</p>"},{"location":"Database-Connectivity/","title":"Connection Examples","text":"<p>This page lists some of the databases we have tested, including various (Mac-oriented) configuration notes.</p> <p>Recall the <code>db_url</code> parameter is a SQLAlchemy URI.  To see some examples, see below, and use</p> <pre><code>ApiLogicServer examples\n</code></pre> <p>This produces a console log like: <pre><code>Creates and optionally runs a customizable Api Logic Project\n\nExamples:\n  ApiLogicServer create-and-run\n  ApiLogicServer create-and-run --db_url=sqlite:///nw.sqlite\n  ApiLogicServer create-and-run --db_url=mysql+pymysql://root:p@mysql-container:3306/classicmodels --project_name=/localhost/docker_db_project\n  ApiLogicServer create-and-run --db_url=mssql+pyodbc://sa:Posey3861@localhost:1433/NORTHWND?driver=ODBC+Driver+17+for+SQL+Server&amp;trusted_connection=no\n  ApiLogicServer create-and-run --db_url=postgresql://postgres:p@10.0.0.234/postgres\n  ApiLogicServer create --project_name=my_schema --db_url=postgresql://postgres:p@localhost/my_schema\n  ApiLogicServer create --db_url=postgresql+psycopg2://postgres:password@localhost:5432/postgres?options=-csearch_path%3Dmy_db_schema\n  ApiLogicServer create --project_name=Chinook \\\n--host=ApiLogicServer.pythonanywhere.com --port= \\\n--db_url=mysql+pymysql://ApiLogicServer:***@ApiLogicServer.mysql.pythonanywhere-services.com/ApiLogicServer\\$Chinook\n\nWhere --db_url is one of...\n   &lt;default&gt;                     Sample DB                    - https://valhuber.github.io/ApiLogicServer/Sample-Database/\n   nw-                           Sample DB, no customizations - add later with perform_customizations.py\n   &lt;SQLAlchemy Database URI&gt;     Your own database            - https://docs.sqlalchemy.org/en/14/core/engines.html\n                                      Other URI examples:     - https://apilogicserver.github.io/Docs/Database-Connectivity/\n\nDocs: https://valhuber.github.io/ApiLogicServer/\n</code></pre></p> <p>Important notes:</p> <ul> <li>tables without primary keys are not imported as classes, and do not appear in your API or Admin application</li> </ul> <p> </p>"},{"location":"Database-Connectivity/#verify-database-connectivity","title":"Verify Database Connectivity","text":"<p>Database connectivity can be... trying.  Before attempting the SQLAlchemy connectivity discussed here, it's a best practice to make sure your computer can connec to the database server.  One possible approach is a command line utility called <code>telnet</code>.</p> <p>First, ensure your machine has telnet installed.  Consult the documentation for your OS type.  Note that Windows 11 requires this command (use Powershell, and run as adminstrator):</p> <pre><code>Enable-WindowsOptionalFeature -Online -FeatureName TelnetClient\n</code></pre> <p>Then, you can issue a command such as:</p> <p><pre><code>telnet 10.0.0.77 3306  # where you subsitute IP address)\n</code></pre> If you are prompted for your database password, you have established connectivity.</p> <p> </p>"},{"location":"Database-Connectivity/#sqlite","title":"Sqlite","text":"<p>You can use an existing sqlite database like this: <pre><code>ApiLogicServer create --project_name=Allocation --db_url=sqlite:////Users/val/Desktop/database.sqlite\n</code></pre></p> <p>Other important notes:</p> <ul> <li>As shown above, use the full path</li> <li>So that such databases are included in your project, they are copied to the <code>database</code> folder, and renamed to `db.sqlite'</li> </ul>"},{"location":"Database-Connectivity/#northwind-sqlite-default-sample","title":"Northwind - sqlite (default sample)","text":"<p>See Sample Database.</p> <p>This is a sqlite database, packaged with API Logic Server, so you can explore without any installs.  It is obtained from Northwind, and altered to include several columns to demonstrate rules.</p> <p>Run under API Logic Server docker: <pre><code>ApiLogicServer run --project_name=/localhost/docker_project\n</code></pre></p>"},{"location":"Database-Connectivity/#chinook-albums-and-artists","title":"Chinook - Albums and Artists","text":"<p>Designate this as follows: <code>--db_url={install}/Chinook_Sqlite.sqlite</code>, e.g.:</p> <pre><code>~/ApiLogicServer/api_logic_server_cli/database/Chinook_Sqlite.sqlite\n</code></pre> <p> </p>"},{"location":"Database-Connectivity/#sqlite-database-abbreviations","title":"SQLite Database Abbreviations","text":"<p>To make experimenting easier, you can specify a <code>db_url</code> shortcut.</p> <p> </p>"},{"location":"Database-Connectivity/#docker-databases","title":"Docker Databases","text":"<p>Docker is a wonderful way to get known databases for your project, and eliminate often-messy database installs.  The docker databases below were created for use with API Logic Server, but you may find them generally useful.  </p> <p>You probably don't need all these, but here's how you start the docker databases (schema details below):</p> <pre><code>docker run --name mysql-container --net dev-network -p 3306:3306 -d -e MYSQL_ROOT_PASSWORD=p apilogicserver/mysql8.0:version1.0.7\n\ndocker run -d --name postgresql-container --net dev-network -p 5432:5432 -e PGDATA=/pgdata -e POSTGRES_PASSWORD=p apilogicserver/postgres:version2.0.0\n\ndocker run --name sqlsvr-container --net dev-network -p 1433:1433 -d apilogicserver/sqlsvr:version2.0.1\n\ndocker run --name sqlsvr-container --net dev-network -p 1433:1433 -d apilogicserver/sqlsvr-m1:version1.0.2  # Mac M1\n</code></pre> <p> </p>"},{"location":"Database-Connectivity/#connecting-to-docker-dbs","title":"Connecting to Docker DBs","text":"<p>The examples below illustrate connecting to dockerized databases.  You can connect from <code>pip</code> installs, or from API Logic Server containers, as described below.</p> <p> </p>"},{"location":"Database-Connectivity/#from-pip-install","title":"From <code>pip</code> install","text":"<p>If you are using <code>pip install</code> version of API Logic Server.  Differences to note:</p> <ul> <li>the <code>/localhost</code> path is typically not required</li> <li>the server host address is <code>localhost</code></li> <li>Note related in install procedure, the SqlServer example illustrates you can single-quote the url, instead of using the <code>\\</code> escapes</li> </ul> <pre><code>ApiLogicServer create --project_name=sqlserver --db_url='mssql+pyodbc://sa:Posey3861@localhost:1433/NORTHWND?driver=ODBC+Driver+17+for+SQL+Server&amp;trusted_connection=no'\n\nApiLogicServer create --project_name=classicmodels --db_url='mysql+pymysql://root:p@localhost:3306/classicmodels'\n\nApiLogicServer create --project_name=postgres --db_url=postgresql://postgres:p@localhost/postgres\n</code></pre> <p> </p>"},{"location":"Database-Connectivity/#from-api-logic-server-container","title":"From API Logic Server Container","text":"<p>If you are using the docker version of API Logic Server, you must to enable connectivity from your API Logic Server container to your database container.  See the instructions below.</p>"},{"location":"Database-Connectivity/#create-docker-network","title":"Create Docker network","text":"<p>Start the docker machine like this (Windows users - use Powershell) to enable connectivity from your API Logic Server container to your database container:</p> <pre><code>cd ~/dev/servers  # project directories will be created here\ndocker network create dev-network  # only required once\ndocker run -it --name api_logic_server --rm -p 5656:5656 -p 5002:5002 --net dev-network -v ${PWD}:/localhost apilogicserver/api_logic_server\n</code></pre>"},{"location":"Database-Connectivity/#vscode-enable-network","title":"VSCode - enable network","text":"<p>If you are running API Logic Server in a container, and accessing dockerized databases, you will need to enable connectivity by uncommenting the indicated line in the diagram below:</p> <p>The diagram above, and the examples below, presume you have created a docker network called <code>dev-network</code>, as shown at the top of this page.</p> <p> </p> <p> </p>"},{"location":"Database-Connectivity/#classicmodels-mysql-docker","title":"classicmodels - MySQL / Docker","text":"<p>Docker below built from MySQL Tutorials - Customers, Orders...</p> <pre><code>docker run --name mysql-container --net dev-network -p 3306:3306 -d -e MYSQL_ROOT_PASSWORD=p apilogicserver/mysql8.0:version1.0.7\n</code></pre> <p>Then access using Docker: <pre><code>ApiLogicServer create --project_name=/localhost/classicmodels --db_url=mysql+pymysql://root:p@mysql-container:3306/classicmodels\n</code></pre></p> <p> </p>"},{"location":"Database-Connectivity/#mysql-native-user","title":"MySQL Native user","text":"<p>If you are using VSCode, you may wish to use tools to manage and query your database.  A useful resource is this video, which illustrates using SQLTools, a VSCode extension.  Connecting to Docker databases has proven difficult for many, but this video shows that the solution is to create a native user: <pre><code>Create new MySQL user with old authentication method:\nCREATE USER 'sqluser'@'%' IDENTIFIED WITH mysql_native_password BY 'password';\nGRANT ALL PRIVILEGES ON *.* TO 'sqluser'@'%';\nFLUSH PRIVILEGES;\n</code></pre></p> <p> </p>"},{"location":"Database-Connectivity/#additional-mysql-databases","title":"Additional MySQL databases","text":"<p>These databases are also provided in the MySQL docker loaded above.</p> <p> </p>"},{"location":"Database-Connectivity/#sakila-mysql-docker","title":"Sakila - MySQL / Docker","text":"<p>Obtained from Sakila - Actors and Films.</p> <p>Installed in Docker per these instructions.</p> <pre><code>ApiLogicServer create --project_name=/localhost/sakila --db_url=mysql+pymysql://root:p@mysql-container/sakila\n</code></pre> <p> </p>"},{"location":"Database-Connectivity/#chinook-mysql-docker","title":"Chinook - MySql / Docker","text":"<p>Obtained from Chinook - Artists and Tracks.</p> <pre><code>ApiLogicServer create --project_name=/localhost/chinook --db_url=mysql+pymysql://root:p@mysql-container/Chinook\n</code></pre> <p> </p>"},{"location":"Database-Connectivity/#northwind-postgres-docker","title":"Northwind - Postgres / Docker","text":"<p>Obtained from pthom at git - many thanks!</p> <p>Installed in Docker per these instructions.</p> <pre><code>docker run -d --name postgresql-container --net dev-network -p 5432:5432 -e PGDATA=/pgdata -e POSTGRES_PASSWORD=p apilogicserver/postgres:version2.0.0\n</code></pre> <p>Run under API Logic Server docker: <pre><code>ApiLogicServer create --project_name=/localhost/postgres --db_url=postgresql://postgres:p@postgresql-container/postgres\n</code></pre></p> <p>It may be necessary to replace the docker container name with your IP address, e.g., --db_url=postgresql://postgres:p@10.0.0.236/postgres</p> <p>Docker pgadmin: <pre><code>docker run --name pgadmin -p 5050:5050 thajeztah/pgadmin4\n</code></pre></p> <p>JDBC (for tools): <code>postgresql://postgres:p@10.0.0.234/postgres</code></p>"},{"location":"Database-Connectivity/#version-update-200","title":"Version Update: 2.0.0","text":"<p>In prior versions, note the datatype <code>bpchar</code> (blank-padded char) results in several evidently benign messages like: <pre><code>packages/sqlalchemy/dialects/postgresql/base.py:3185: SAWarning: Did not recognize type 'bpchar' of column 'customer_id'\n</code></pre></p> <p>The current version uses <code>character varying(5)</code>, and should not exhibit issues such as Element does not exist.</p> <p> </p>"},{"location":"Database-Connectivity/#northwind-sqlserver-docker","title":"Northwind - SqlServer / Docker","text":"<p>Start SQL Server:</p> <pre><code>docker run --name sqlsvr-container --net dev-network -p 1433:1433 -d apilogicserver/sqlsvr:version2.0.1\n</code></pre> <p>Then, under API Logic Server, Docker installed: <pre><code>ApiLogicServer create --project_name=/localhost/sqlserver --db_url=mssql+pyodbc://sa:Posey3861@sqlsvr-container:1433/NORTHWND?driver=ODBC+Driver+17+for+SQL+Server\\&amp;trusted_connection=no\n</code></pre></p> <p>You will probably also want to get Azure Data Studio, and configure a connection like this (password: posey3861):</p>"},{"location":"Database-Connectivity/#sqlserver-sqlalchemy-uris","title":"SqlServer SQLAlchemy URIs","text":"<p>Important considerations for SQLAlchemy URIs:</p> <ul> <li> <p>The example above runs on a mac</p> </li> <li> <p>It depends on the version of ODBC Driver; for example, a more recent version is:</p> </li> </ul> <pre><code>  mssql+pyodbc://sa:Posey3861@localhost:1433/NORTHWND?driver=ODBC+Driver+18+for+SQL+Server&amp;trusted_connection=no&amp;Encrypt=no\n</code></pre> <ul> <li> <p>Observe the additional parameter for encryption (see here)</p> </li> <li> <p>On Linux (and inside docker), the URI is:</p> </li> </ul> <pre><code>--db_url='mssql+pyodbc://sa:Posey3861@sqlsvr-container:1433/NORTHWND?driver=ODBC+Driver+18+for+SQL+Server&amp;trusted_connection=no&amp;Encrypt=no'\n</code></pre> <ul> <li>In VSCode launch configurations, the <code>db_url</code> fails, a situation I have resolved and would welcome help on...</li> </ul> <p> </p>"},{"location":"Database-Connectivity/#managing-database-in-your-ide","title":"Managing Database in your IDE","text":"<p>Various IDEs provide tools for managing databases.</p>"},{"location":"Database-Connectivity/#pycharm-database-tools","title":"PyCharm Database Tools","text":"<p>Pycharm provides database tools, as shown below:</p> <p> </p>"},{"location":"Database-Connectivity/#vscode-database-tools","title":"VSCode Database Tools","text":"<p>I use SQLTools.  To use it, you must first install drivers:</p> <p>Then, you can explore the sample:</p> <p> </p> <p> </p>"},{"location":"Database-Connectivity/#pythonanywhere","title":"PythonAnywhere","text":"<p>PythonAnyWhere provides the ability to create and connect to databases.  For example, create a project like this from within PythonAnyWhere:</p> Create database for mysql/Chinook<pre><code>  ApiLogicServer create --project_name=Chinook \\\n--host=ApiLogicServer.pythonanywhere.com --port= \\\n--db_url=mysql+pymysql://ApiLogicServer:Your-DB-Password@ApiLogicServer.mysql.pythonanywhere-services.com/ApiLogicServer\\$Chinook\n</code></pre> <p>Notes:</p> <ul> <li>Be aware of connectivity and firewall issues.</li> </ul> <p> </p>"},{"location":"Execute/","title":"Execute From Terminal","text":"<p>You can execute API Logic Projects in your IDE, or directly in a Terminal window, as described below.</p> <p> </p>"},{"location":"Execute/#most-commonly-in-your-ide","title":"Most commonly - in your IDE","text":"<p>In most cases, you will probably want to run it from your IDE (see IDE &gt; Open and Execute).  </p> <p>If you are following the Tutorial (recommended first step), proceed to the link above.</p> <p> </p>"},{"location":"Execute/#from-the-terminal","title":"From the Terminal","text":""},{"location":"Execute/#1-start-the-server","title":"1. Start the Server","text":"<p>The <code>api_logic_server_run.py</code> file is executable.  The simplest way to run it is:</p> Either from Docker terminal, or from local terminal with `venv` set<pre><code>ApiLogicServer run\n</code></pre> <p>You can also run it directly (see also start args):</p> Either from Docker terminal, or from local terminal with `venv` set<pre><code>python api_logic_server_run.py       # options exist to override URL, port\n</code></pre>"},{"location":"Execute/#2-open-in-your-browser","title":"2. Open in your Browser","text":"<p>The server should start, and suggest the URL for your Browser.  That will open a page like this, where you can explore your data using the automatically created Admin app, and explore the API with automatically generated Swagger:</p>"},{"location":"FAQ-Frameworks/","title":"Is this a Framework?","text":""},{"location":"FAQ-Frameworks/#tldr-not-a-framework-rather-a-low-code-approach-for-creating-systems","title":"TL;DR - not a framework, rather a low-code approach for creating systems","text":"<p>There are many excellent frameworks for developing web apps.  They provide tools for writing code to handle API and application events.</p> <p>API Logic Server is not a framework - it is built on frameworks (Flask currently, more are possible).  It is a low-code approach for creating customizable microservices - Apps, APIs, and the underlying business logic.</p> <p> </p>"},{"location":"FAQ-Frameworks/#frameworks-code-based-appapi-handlers","title":"Frameworks - code based app/api handlers","text":"<p>Frameworks require extensive background in web app development, and significant amounts of code.  The video at the end provides an excellent summary of Flask, FAST API, and Django.  While flexibile, they are complex and time consuming.</p> <p> </p>"},{"location":"FAQ-Frameworks/#api-logic-server-low-code-declarative-extensible-system-creation","title":"API Logic Server - low-code declarative, extensible system creation","text":"<p>API Logic Server is designed to provide a significantly faster and simpler low-code approach for creating database systems:</p> <ul> <li> <p>Remarkable speed and simplicity: given a database, you get an instant system  - no training, no coding:</p> <ul> <li>an API, including filtering, pagination, sorting, related data and swagger</li> <li>a multi-page, multi-table Admin Web App, and </li> <li>SQLAlchemy model classes</li> </ul> </li> <li> <p>Fully Customizable: you get a customizable project you can use in your IDE to create custom services with all the flexibility and power of Python, Flask and SQLAlchemy</p> </li> <li> <p> Declarative Business Logic: unique spreadsheet-like rules that are 40X more concise than legacy code, extensible with Python</p> </li> </ul> <p> </p>"},{"location":"FAQ-Frameworks/#example-todos-1-command-project-creation","title":"Example: todos  -- 1 command project creation","text":"<p>The video at the top shows how to create a system from a <code>todos</code> database.  You can create this system with API Logic Server like this:</p> <ol> <li> <p>Download the todos database to your desktop</p> </li> <li> <p>Install API Logic Server:</p> </li> </ol> <p>Install API Logic Server  \u00a0\u00a0\u00a0\u00a0\u00a0 (also available for Docker)<pre><code>cd ~/Desktop\nmkdir ApiLogicServer\ncd ApiLogicServer\npython -m venv venv        # may require python3 -m venv venv\nsource venv/bin/activate   # windows venv\\Scripts\\activate\npython -m pip install ApiLogicServer\n</code></pre> 3. Create and run your project Create and Run todos project\u00a0\u00a0\u00a0\u00a0\u00a0 1 command<pre><code>ApiLogicServer create-and-run --project_name=todo \\\n--db_url=sqlite:////Users/Val/Desktop/todos.db  # explicit path (no ~)\n</code></pre></p> <p>Explore your project in your IDE, using standard services to code, run and debug.</p> <p> </p>"},{"location":"FAQ-Frameworks/#appendix-video-conventional-approach","title":"Appendix - Video Conventional Approach","text":"<p>This video provides an excellent summary of Flask, FAST API, and Django.</p>"},{"location":"FAQ-Low-Code/","title":"Is this a Low Code approach?","text":"<p>API Logic Server is a Low Code approach for creating database systems.</p> <p>There are many excellent low-code products that focus on User Interfaces.</p> <p>API Logic Server differs from these:</p> <ul> <li> <p>Strong focus on backend logic, with rules</p> </li> <li> <p>Uses your existing IDE</p> </li> </ul> <p>The API Logic server Admin App is designed for instant Agile collaboration, and back office data maintenance.  For richer applications, utilize the automated API.  Importantly, this dramatically simplifies UI development since the API encapsulates business logic.</p>"},{"location":"FAQ-RETE/","title":"Is this a RETE Engine?","text":""},{"location":"FAQ-RETE/#tldr-no-optimized-for-transactions","title":"TL;DR: no - optimized for transactions","text":"<p>The API Logic Server engine is not based on the RETE algorithm.  These technolgies are complemetarty:</p> <ul> <li> <p>RETE is appropriate for Decision Logic, where there are no presumptions about a database</p> </li> <li> <p>API Logic Server optimizes performance, often by several orders of magnitude, since it can prune and optimize rule execution based on comparing the proposed / old state of the database.</p> </li> </ul> <p> </p>"},{"location":"FAQ-RETE/#key-differences-in-rules-engines-process-decision-transaction","title":"Key Differences in Rules Engines: Process, Decision, Transaction","text":"<p>Let's consider these rule technologies in the light of the following requirements:</p>"},{"location":"FAQ-RETE/#transaction-logic-requirements","title":"Transaction Logic Requirements","text":"Category Consideration Scalable Rules should minimize SQL overhead, automatically Extensible Developers must be able to extend rule-based logic Manageable Developers must be able to use existing developer tools and procedures for code editing, debugging, code management, etc Integrity The system should ensure that all the rules are consistently enforced, in all cases Architecture Logic should automatically enforced over all apps and APIs"},{"location":"FAQ-RETE/#process-rules","title":"Process Rules","text":"<p>Such rules are typically graphs governing problem areas such as work flow and data flow integration.  These are completely appropriate applications.</p> <p>Process rules are not well suited to highly interdependent transaction logic: * they are user ordered, so logic changes require the diagrams be redesigned * they are not concise - a \"flowchart\" of thousands of lines of procedural logic is actually less readable than code.</p> <p>Transaction and process rules are synergistic: * process diagrams may need to update rows, leveraging transaction logic * transaction logic may need to start processes (\"start order process\"), or resume them (\"order is approved - execute next steps\").</p>"},{"location":"FAQ-RETE/#decision-rules","title":"Decision Rules","text":"<p>Decision rules look virtually identical to transaction rules - a set of chained derivations.  The difference is in the fundamental interface: * logic engine processes rows changed in a transaction    * logic operation begins by obtaining old values of these rows    * these enable pruning and optimization (discussed below)    * old_rows also enable state transition semantics       * e.g., all raises must exceed 10%    (one of our favorite rules) * decision logic processes an array of objects (rows), and the name of the RuleSet to run</p> <p>Decision engines cannot make presumptions about old rows, so when they encounter a rule like <code>balance is sum of order amounts</code>, it has no choice but to read all the Orders (and each of their OrderDetails).</p> <p>This is fine for a single-user \"what-if\" request.  But for multi-user transaction processing, this can reduce performance by multiple orders of magnitude.</p> <p>We also note that decision logic is explicitly called.  That means that you need to audit all of the accessing code to verify the logic is enforced.  Transaction logic, by contrast, ensures that all sqlalchemy access enforces the logic.</p> <p>That said, these technologies are also synergistic:</p> <ul> <li>You can invoke Decision Logic using Python in transaction logic rules</li> </ul>"},{"location":"FAQ-RETE/#transaction-rules","title":"Transaction Rules","text":"<p>This implementation is a Transaction Rules Engine: rule execution is bound into update processing.</p> Category Consideration Transaction Logic Scalable Rules should minimize SQL overhead, automatically Old row access enables pruning and sql optimizations (see below) Extensible Developers must be able to extend rule-based logic Many rules (events, constraints) invoke Python, providing access to all that entails Manageable Developers must be able to use existing developer tools and procedures for code editing, debugging, code management, etc Rules are Python code - use standard editors (with code completion), debuggers, and source code control systems and procedures Integrity The system should ensure that all the rules are consistently enforced, in all cases All ORM access enforces the rules Architecture Logic should automatically enforced over all apps and APIs Logic enforcement is factored out of UI controllers, so shared over all apps and APIs"},{"location":"FAQ-RETE/#multi-table-logic-execution","title":"Multi-Table Logic Execution","text":"<p>Let's look more carefully at how the watch, react and chain logic operates for multi-table transactions. Transactional systems can leverage the presumption that a set of updates is being applied to an existing database:</p> <ul> <li> <p>each updated row has an existing row on disk - the old values</p> </li> <li> <p>the system can compare the old values to the new update values, and</p> </li> <li> <p>Prune the rules that do not apply</p> </li> <li> <p>And when the rules must be run, the declarative nature of rules enables the system to execute the rules in any manner that returns the correct result.  In particular, the system can avoid expensive aggregate queries, and use the old/new delta to compute a 1-row adjustment to the parent row.</p> </li> </ul> <p>For example, imagine you need to compute the balance for the credit limit check.  You need to add all the order totals (an expensive SQL <code>sum</code>).  But it\u2019s worse - the order total itself is a summed field, so you need to add all of those too.</p> <p>If a customer has thousands of orders, each with thousands of items, this will be painfully slow.</p> <p>But if the system leverages the old/new to make an adjustment update, an order of $50 simply means \u201dadd 50 to the existing balance\u201d - no need to aggregate the totals.</p>"},{"location":"FAQ-RETE/#adjustments-sum-counts-adjusted-in-1-row-updates-not-expensive-aggregate-sqls","title":"Adjustments - sum / counts adjusted in 1 row updates, not expensive aggregate SQLs","text":"<p>Rollups provoke an important design choice: store the aggregate, or sum things on the fly.  Here, the stored aggregates are <code>Customer.Balance</code>, and <code>Order.AmountTotal</code> (a chained aggregate).  There are good cases to be made for both approaches:</p> <ul> <li> <p>Sum on the fly - use sql <code>select sum</code> queries to aggregate child data as required.    This eliminates consistency risks with storing redundant data    (i.e, the aggregate becomes invalid if an application fails to    adjust it in all of the cases).</p> </li> <li> <p>Stored Aggregates - a good choice when data volumes are large, and / or chain,    since the application can adjust (make a 1 row update) the aggregate based on the    delta of the children.</p> </li> </ul> <p>This design decision can dominate application coding.  It's nefarious, since data volumes may not be known when coding begins.  (Ideally, this can be a \"late binding\" decision, like a sql index.)</p> <p>The logic engine uses the Stored Aggregate approach.  This optimizes multi-table update logic chaining, where updates to 1 row trigger updates to other rows, which further chain to still more rows.</p>"},{"location":"FAQ-RETE/#pruning","title":"Pruning","text":"<p>Pruning was core to changing Order dates:</p> <ul> <li> <p><code>DueDate</code> had no dependencies, so all the logic for adjusting Customers and cascading OrderDetails was pruned.</p> </li> <li> <p>Contrast this to the multiple rows retrieved / update when <code>ShippedDate</code> is changed.</p> </li> </ul>"},{"location":"IDE-Customize/","title":"Using Your IDE","text":"<p>The <code>ApiLogicServer create</code> command creates API Logic Projects.  As shown below, they are standard projects you can open in your IDE.</p> <p>For more information on opening projects and establishing their Python Execution environment, see Execute an API Logic Project.</p> <p> </p>"},{"location":"IDE-Customize/#use-your-ide-for-api-logic-projects","title":"Use your IDE for API Logic Projects","text":"<p>The <code>ApiLogicServer create</code> command creates an API Logic Project, which you can open in your IDE as shown below.  As illustrated in the Tutorial, you can use the expected features of your IDE to customize, run and debug your project:</p> <p> </p>"},{"location":"IDE-Customize/#customize","title":"Customize","text":"<p>Customize API Logic Projects using standard IDE Code Editors, including code completion (particularly useful for declaring logic):</p> <p> </p>"},{"location":"IDE-Customize/#run","title":"Run","text":"<p>The <code>ApiLogicServer create</code> command also creates:</p> <ul> <li>Launch configurations to run your project, and run tests.</li> <li>Docker files to open your project, and dockerize your project into a container for DockerHub</li> </ul> <p> </p>"},{"location":"IDE-Customize/#debug","title":"Debug","text":"<p>Utilize IDE Debuggers, including for declarative rules, as described in the Tutorial:</p>"},{"location":"IDE-Execute/","title":"Execute in your IDE","text":"<p>API Logic Projects are simply directories, without restrictions on their location.  You can open them directly in your IDE. (You can also execute them from a Terminal Window). </p> <p>This page describes how to open your project, establish your Python environment, and execute your project.</p>"},{"location":"IDE-Execute/#open-project-and-establish-python-environment","title":"Open Project and Establish Python Environment","text":"<p>IDE instructions depend on whether you are using a local install, or Docker.  Select your desired configuration below, and see how to run, customize and debug your ApiLogicProject.</p> VS Code Local -- Local InstallVS Code -- Docker InstallPyCharm <p>Follow these instructions:</p> <p>1. Open your project with VS Code</p> <p>You can open the IDE yourself, or from the command line:</p> <pre><code>cd ApiLogicServer\n\n# start VS Code either as an application, or via the command line\n#    .. macOS users may require: https://code.visualstudio.com/docs/setup/mac\n\ncode ApiLogicProject  # using command line to open VS Code on project\n</code></pre> <p>2. Remote Container - Decline</p> <p>Decline the option above to use the remote-container.   You can prevent this by deleting the <code>.devcontainer</code> folder.</p> <p>3. Create Virtual Environment</p> <p>You then create your virtual environment, activate it, and install the  ApiLogicServer runtime.  </p> <p>In VS Code: Terminal &gt; New Terminal Window, and...</p> <pre><code>python3 -m venv ./venv                       # windows: python -m venv venv\n# VS Code will recognize your `venv` and ask whether to establish it as your virtual environment.  Say yes.  \nsource venv/bin/activate                     # windows: venv\\Scripts\\activate\npython3 -m pip install -r requirements.txt   # the requirements.txt file was pre-created by ApiLogicServer\n</code></pre> <p>The install sometimes fails due on machines with an older version of <code>pip</code>.  If you see a message suggesting you upgrade  <code>pip</code> , do so.</p> <p>For more information, see Work with Environments, and Project Environment.</p> <p>4. Install Python Extension</p> <p>You may be prompted for this (recent versions of VSCode might auto-detect language support):</p> <p></p> <p>1. Load your docker project</p> <p>You've aleady created your project like this:</p> <pre><code>cd ~/Desktop                # directory of API Logic Server projects on local host\n\n# [Install and] Start the API Logic Server docker container\ndocker run -it --name api_logic_server --rm -p 5656:5656 -p 5002:5002 -v ${PWD}:/localhost apilogicserver/api_logic_server\n\n# (Now inside the container)\nApiLogicServer create   # Return to accept default project name, db\n\nexit  # exit container to localhost\n</code></pre> <p>Container-exit</p> <p>Observe you exit the Docker container.  We'll start VSCode locally below, where it will restart Docker as a Remote Container below.  Local operation means your project files are accessed locally (not via <code>/localhost</code>), which enables local file operations such as git.</p> <p> </p> <p>The project creation above has created a project on your local computer.  You can open it in VSCode like this:</p> Open VSCode on created API Logic Project<pre><code># start VS Code either as an application, or via the command line\n# macOS users may require: https://code.visualstudio.com/docs/setup/mac\ncode ApiLogicProject  # loads VS Code; accept container suggestions, and press F5 to run (described below)\n</code></pre> <p>2. Remote Container - Accept</p> <p>Created projects are pre-configured to support:</p> <ul> <li>launch configurations for running <code>ApiLogicServer</code> and tests</li> <li>Docker-based Python environments, per <code>.devcontainer</code></li> </ul> <p>So, when you open the created project, VS Code recognizes that Docker configuration, and provides an option to Reopen the project in a remote container.  Accept this option.</p> <p>If you already skipped this option, no worries.  Use View &gt; Command Palette &gt; Remote-Containers: Reopen in Container</p> <p></p> <p>Note: when you Execute your application (below), you may need to update your Docker container - see Working with Docker.</p> <p>1. Do not create the <code>venv</code> outside PyCharm</p> <p>2. Open the ApiLogic Project</p> <p>3. Create a new Virtual Environment using PyCharm defaults</p> <p>PyCharm will ask you to configure a Python Interpreter.  Do so as shown below.</p> <p></p> <p>4. <code>pip</code> install</p> <p>Some versions of Pycharm automatically load your dependencies, others do not.  But it's simple to load them using the terminal window:</p> <pre><code>source venv/bin/activate                    # windows: venv\\Scripts\\activate\npython -m pip install -r requirements.txt   # the requirements.txt file was pre-created by ApiLogicServer\n</code></pre> <p>The install sometimes fails due on machines with an older version of <code>pip</code>.  If you see a message suggesting you upgrade  <code>pip</code> , do so.</p> <p>5. Run the pre-configured <code>run</code> launch configuration</p> <p>Some versions of Pycharm may require that you update the Launch Configuration(s) to use your <code>venv</code>.</p> <p> </p>"},{"location":"IDE-Execute/#execute-prebuilt-launch-configurations","title":"Execute - prebuilt Launch Configurations","text":"<p>Once you have established your Python environment, you are ready to run.  The <code>ApiLogicServer create</code> command has built launch configurations, so you can start your server like this:</p>"},{"location":"IDE-Execute/#1-click-run-and-debug","title":"1. Click Run and Debug","text":""},{"location":"IDE-Execute/#2-select-launch-configuation","title":"2. Select Launch Configuation","text":"<p>Select the pre-built <code>ApiLogicServer</code> Launch Configuration (it should be the default).</p> <ul> <li>Use <code>Codespaces</code> if you are running in that environment)</li> </ul>"},{"location":"IDE-Execute/#3-click-green-run-button","title":"3. Click Green Run Button","text":"<p>Press the green run button to start the server.</p> <p>When you run, you may encounter the message below; if so:</p> <ol> <li>Click Extensions (as shown)</li> <li>Ensure Python support is installed and enabled</li> </ol>"},{"location":"IDE-Execute/#4-start-the-browser","title":"4. Start the Browser","text":"<ul> <li>If you are running Docker / VS Code, VS Code will suggest opening a Browser, or previewing it in the Editor (i.e., in VSCode).</li> <li>Otherwise open a browser at http://localhost:5656</li> </ul>"},{"location":"IDE-Execute/#5-proceed-to-the-tutorial","title":"5. Proceed to the Tutorial","text":"<p>The Tutorial will walk you through the sample project.</p> <p> </p> <p>Notes:</p> <ul> <li>Be aware that we have seen some issue where the simple browser fails to start; just use your normal browser  </li> <li>We have also seen that some systems are slow to load caches on first execution; browser refresh can often be helpful</li> <li>You may get a message: \"The Python path in your debug configuration is invalid.\"  Open View &gt; Command Pallet, type \u201cPython Select Interpreter\u201d and Select your <code>venv</code>.</li> </ul> <p> </p>"},{"location":"IDE-Execute/#other-launch-configurations","title":"Other Launch Configurations","text":"<p>The <code>ApiLogicServer create</code> command also creates launch configurations for executing tests, and running the Behave Logic Report. </p>"},{"location":"Install-Eval-x/","title":"Express Eval x","text":"<p>The fastest way to explore API Logic Server - with no install - is to follow this guide to create, explore and customize a project using Codespaces.</p> What is API Logic Server <p>API Logic Server creates customizable database web app projects:</p> <ul> <li> <p>Creation is Instant: create executable projects from your database, with a single command.  Projects are Highly Functional, providing:</p> <ul> <li> <p>API: an endpoint for each table, with filtering, sorting, pagination and related data access</p> </li> <li> <p>Admin UI: multi-page / multi-table apps, with page navigations, automatic joins and declarative hide/show</p> </li> </ul> </li> <li> <p>Projects are Customizable, using your IDE: such as VSCode, PyCharm, etc, for familiar edit/debug services</p> </li> <li> <p>Business Logic Automation: using unique spreadsheet-like rules, extensible with Python </p> </li> </ul> <p>Follow the steps below to be up and running in about a minute - no install, no configuration.  You can run the created project to explore its functionality, and how to customize it in VSCode.</p> <p> </p> Why Does It Matter: Faster, Simpler, Modern Architecture Frameworks are too slow, Low Code is not dev-friendly <p>We looked at approaches for building database systems:   </p> <ul> <li> <p>Frameworks: Frameworks like Flask or Django enable you to build a single endpoint or Hello World page, but a multi-endpoint API and multi-page application would take weeks or more.</p> </li> <li> <p>Low Code Tools: these are great for building great UIs, but</p> <ul> <li>Want a multi-page app, instantly -- no layout required each screen</li> <li>Want to preserve standard dev tools (VSCode, PyCharm, git, etc) - propietary IDEs are not dev-friendly</li> </ul> </li> </ul> <p>And neither provides an answer for backend business logic (it's nearly half the effort).</p> API Logic Server - dev-friendly low-code automation <p>API Logic Server is a low-code, developer-friendly approach that leverages automation to dramatically improve web app development:</p> <ul> <li> <p>Automation makes it faster: moments, instead of weeks or months.  Unblock UI Dev, and engage business users - early - to reduce misunderstandings.  Customize with standard IDEs.</p> </li> <li> <p>Automation makes it simpler: this reduces the risk of architectural errors, e.g., APIs without pagination.</p> </li> <li> <p>Automation ensures a modern software architecture: container-ready, API-based, with shared logic over UIs and APIs (no more logic in UI controllers), in maintainable models.</p> </li> </ul> <p> </p>"},{"location":"Install-Eval-x/#1-open-in-codespaces","title":"1. Open in Codespaces","text":"<p>No install is required - this runs in the cloud, via your Browser, courtesy Codespaces.  Use your existing GitHub account (no signup is required), and:</p> <ol> <li> <p>Click here to open the Create Codespace page.</p> </li> <li> <p>Configure as desired, and click Create codespace.</p> </li> </ol> <p>This process takes about a minute.  Wait until you see the port created.</p> What Is Happening <p>You will now see 3 projects - open in VSCode, in the Browser.  But that's just what you see...</p> <p>Behind the scenes, Codespaces has requisitioned a cloud machine, and loaded the template - with a complete development environment - Python, your dependencies, git, etc.</p> <p>You are attached to this machine in your Browser, running VSCode.</p> <p>These instructions are now visible in VS Code, to minimize window switching.</p> <p> Pretty remarkable.</p> Verify it worked <p>VSCode will open in your Browser, and the project will perform various initialization tasks.  After about 1 minute, verify as follows:</p> <ol> <li>Port is created</li> <li>Port made public</li> <li>3 Sample projects created</li> <li><code>readme</code> opened, showing next step</li> </ol> <p>These instructions will continue in Codespaces in the <code>readme.md</code> (double-click it if it does not open automatically).</p> <p> </p>"},{"location":"Install-Eval-x/#4-explore-the-readme","title":"4. Explore the Readme","text":"<p>Open the Readme to explore the sample project.</p> Tutorial Overview <p>The Tutorial will enable you to explore 2 key aspects:</p> <ul> <li> <p>Initial Automation - API and UI creation are automated from the data model. So, later, you'd see this level of automation for your own databases.</p> </li> <li> <p>Customization and Debugging - this sample also includes customizations for extending the API and declaring logic, and how to use VSCode to debug these.  The Tutorial will clearly identify such pre-built customizations.</p> </li> </ul> <p> </p> <p>Extensive product documentation is available here - checkout the FAQs.</p> <p> </p>"},{"location":"Install-Eval-x/#api-logic-server-background","title":"API Logic Server Background","text":""},{"location":"Install-Eval-x/#motivation","title":"Motivation","text":"<p>We looked at approaches for building database systems:  </p> <p></p> <p>Frameworks</p> <p>Frameworks like Flask or Django enable you to build a single endpoint or Hello World page, but a multi-endpoint API and multi-page application would take weeks or more.</p> <p></p> <p>Low Code Tools</p> <p>These are great for building great UIs, but</p> <ul> <li>Want a multi-page app -- without requiring detail layout for each screen</li> <li>Want to preserve standard dev tools - VSCode, PyCharm, git, etc</li> <li>Need an answer for backend logic (it's nearly half the effort)</li> </ul> <p> </p>"},{"location":"Install-Eval-x/#our-approach-instant-standards-based-customization-logic-automation","title":"Our Approach: Instant, Standards-based Customization, Logic Automation","text":"<p>API Logic Server is an open source Python project.  It runs as a standard Python (<code>pip</code>) install, or under Docker. It consists of:</p> <ul> <li> <p>a set of runtimes (api, user interface, data access) for project execution, plus </p> </li> <li> <p>a CLI (Command Language Interface) to create executable projects with a single command</p> </li> </ul> <p>Then,</p> <ul> <li> <p>Customize your projects in standard IDEs such as VSCode or PyCharm</p> </li> <li> <p>Declare multi-table derivation and constraint logic using spreadsheet-like rules</p> <ul> <li> 40X more concise than code</li> <li>Extend with Python</li> </ul> </li> </ul> <p> API Logic Server reads your schema, and creates an executable, customizable project.</p> <p> </p>"},{"location":"Install-Eval/","title":"Express Eval","text":"<p>The fastest way to explore API Logic Server - with no install - is to follow this guide to create, explore and customize a project using Codespaces.</p> What is API Logic Server <p>API Logic Server creates customizable database web app projects:</p> <ul> <li> <p>Creation is Instant: create executable projects from your database, with a single command.  Projects are Highly Functional, providing:</p> <ul> <li> <p>API: an endpoint for each table, with filtering, sorting, pagination and related data access</p> </li> <li> <p>Admin UI: multi-page / multi-table apps, with page navigations, automatic joins and declarative hide/show</p> </li> </ul> </li> <li> <p>Projects are Customizable, using your IDE: such as VSCode, PyCharm, etc, for familiar edit/debug services</p> </li> <li> <p>Business Logic Automation: using unique spreadsheet-like rules, extensible with Python </p> </li> </ul> <p>Follow the steps below to be up and running in about a minute - no install, no configuration.  You can run the created project to explore its functionality, and how to customize it in VSCode.</p> <p> </p> Why Does It Matter: Faster, Simpler, Modern Architecture Frameworks are too slow, Low Code is not dev-friendly <p>We looked at approaches for building database systems:   </p> <ul> <li> <p>Frameworks: Frameworks like Flask or Django enable you to build a single endpoint or Hello World page, but a multi-endpoint API and multi-page application would take weeks or more.</p> </li> <li> <p>Low Code Tools: these are great for building great UIs, but</p> <ul> <li>Want a multi-page app, instantly -- no layout required each screen</li> <li>Want to preserve standard dev tools (VSCode, PyCharm, git, etc) - propietary IDEs are not dev-friendly</li> </ul> </li> </ul> <p>And neither provides an answer for backend business logic (it's nearly half the effort).</p> API Logic Server - dev-friendly low-code automation <p>API Logic Server is a low-code, developer-friendly approach that leverages automation to dramatically improve web app development:</p> <ul> <li> <p>Automation makes it faster: moments, instead of weeks or months.  Unblock UI Dev, and engage business users - early - to reduce misunderstandings.  Customize with standard IDEs.</p> </li> <li> <p>Automation makes it simpler: this reduces the risk of architectural errors, e.g., APIs without pagination.</p> </li> <li> <p>Automation ensures a modern software architecture: container-ready, API-based, with shared logic over UIs and APIs (no more logic in UI controllers), in maintainable models.</p> </li> </ul> <p> </p>"},{"location":"Install-Eval/#1-open-in-codespaces","title":"1. Open in Codespaces","text":"<p>No install is required - this runs in the cloud, via your Browser, courtesy Codespaces.  Use your existing GitHub account (no signup is required), and:</p> <ol> <li> <p>Click here to open the Create Codespace page.</p> </li> <li> <p>Configure as desired, and click Create codespace.</p> </li> </ol> <p>This process takes about a minute.  Wait until you see the port created.</p> What Is Happening <p>You will now see the template project - open in VSCode, in the Browser.  But that's just what you see...</p> <p>Behind the scenes, Codespaces has requisitioned a cloud machine, and loaded the template - with a complete development environment - Python, your dependencies, git, etc.</p> <p>You are attached to this machine in your Browser, running VSCode.</p> <p>These instructions are now visible in VS Code, to minimize window switching.</p> <p> Pretty remarkable.</p> Verify it worked <p>VSCode will open in your Browser, and the project will perform various initialization tasks.  After about 1 minute, verify as follows:</p> <ol> <li>Port is created</li> <li>Port made public</li> <li><code>readme</code> opened, showing next step</li> </ol> <p>These instructions will continue in Codespaces in the <code>readme.md</code> (double-click it if it does not open automatically).</p> <p> </p>"},{"location":"Install-Eval/#2-create-a-project","title":"2. Create a project","text":"<p>Wait a bit for initialization to complete, then paste this into the Terminal window (lower right):</p> <pre><code>ApiLogicServer create --project_name=./ --db_url=\n</code></pre> <p>When prompted, do not rebuild the container.</p> What Just Happened <p>This is not a coded application.</p> <p>The system examined your database (here, the default), and created an executable project:</p> <ul> <li> <p>API - an endpoint for each table, with full CRUD services, filtering, sorting, pagination and related data access</p> </li> <li> <p>Admin UI - multi-page / multi-table apps, with page navigations and automatic joins</p> </li> </ul> <p>Projects are Customizable, using your IDE: the Project Explorer shows the project structure.  Use the code editor to customize your project, and the debugger to debug it.</p> <p>Business Logic is Automated: use unique spreadsheet-like rules to declare multi-table derivations and constraints - 40X more concise than code.  Extend logic with Python.</p> Using your own database <p>In this case, we used a default Customers/Orders database.  To use your own database, provide the <code>db_url</code> like this.</p> <p> </p>"},{"location":"Install-Eval/#3-start-server-admin-app","title":"3. Start Server, Admin App","text":"<p>The project is ready to run.</p> <p>Use the prebuilt Run Configuration to start the server, and the prebuilt Port to start the web app.</p> Show Me How <p>As shown below:</p> <ol> <li> <p>Use the default Run Configuration to start the server, and </p> </li> <li> <p>Click Ports &gt; Globe to start the web app. </p> </li> </ol> <p> </p>"},{"location":"Install-Eval/#4-explore-the-tutorial","title":"4. Explore the Tutorial","text":"<p>Open the Tutorial to explore the sample project.</p> Tutorial Overview <p>The Tutorial will enable you to explore 2 key aspects:</p> <ul> <li> <p>Initial Automation - API and UI creation are automated from the data model. So, later, you'd see this level of automation for your own databases.</p> </li> <li> <p>Customization and Debugging - this sample also includes customizations for extending the API and declaring logic, and how to use VSCode to debug these.  The Tutorial will clearly identify such pre-built customizations.</p> </li> </ul> <p> </p> <p>Extensive product documentation is available here - checkout the FAQs.</p> <p> </p>"},{"location":"Install-Eval/#api-logic-server-background","title":"API Logic Server Background","text":""},{"location":"Install-Eval/#motivation","title":"Motivation","text":"<p>We looked at approaches for building database systems:  </p> <p></p> <p>Frameworks</p> <p>Frameworks like Flask or Django enable you to build a single endpoint or Hello World page, but a multi-endpoint API and multi-page application would take weeks or more.</p> <p></p> <p>Low Code Tools</p> <p>These are great for building great UIs, but</p> <ul> <li>Want a multi-page app -- without requiring detail layout for each screen</li> <li>Want to preserve standard dev tools - VSCode, PyCharm, git, etc</li> <li>Need an answer for backend logic (it's nearly half the effort)</li> </ul> <p> </p>"},{"location":"Install-Eval/#our-approach-instant-standards-based-customization-logic-automation","title":"Our Approach: Instant, Standards-based Customization, Logic Automation","text":"<p>API Logic Server is an open source Python project.  It runs as a standard Python (<code>pip</code>) install, or under Docker. It consists of:</p> <ul> <li> <p>a set of runtimes (api, user interface, data access) for project execution, plus </p> </li> <li> <p>a CLI (Command Language Interface) to create executable projects with a single command</p> </li> </ul> <p>Then,</p> <ul> <li> <p>Customize your projects in standard IDEs such as VSCode or PyCharm</p> </li> <li> <p>Declare multi-table derivation and constraint logic using spreadsheet-like rules</p> <ul> <li> 40X more concise than code</li> <li>Extend with Python</li> </ul> </li> </ul> <p> API Logic Server reads your schema, and creates an executable, customizable project.</p> <p> </p>"},{"location":"Install-Express-x/","title":"Express Install-x","text":"<p>In most cases, Python and Python Projects are simple and fast to install, as described below.  If you encounter issues, open the Detailed Install.</p> <p>Follow these instructions to:</p> <ol> <li>Install API Logic Server</li> <li>Create the sample Tutorial API Logic Server Project</li> <li>Open it in your IDE</li> <li>Prepare the projects' Python environment</li> </ol>"},{"location":"Install-Express-x/#create-an-install-directory","title":"Create an install directory","text":"<p>You can create this anywhere, such as your home folder or Desktop.</p> Create an install directory<pre><code>mkdir ApiLogicServer      # a directory of projects on your local machine\n</code></pre>"},{"location":"Install-Express-x/#use-local-install-or-docker","title":"Use Local Install, or Docker","text":"<p>You can install API Logic Server locally using <code>pip</code>, or use Docker.  If you already have docker, it can eliminate many of the sometimes-tricky Python install issues.</p> <p>Open the appropriate section below.</p> Local InstallDocker <p>Verify Pre-reqs: Python 3.8+</p> <p>Ensure you have these pre-reqs:</p> Verify 3.8 - 3.10<pre><code>python --version  # on macs, you may need to use Python3\n</code></pre> <p>If you need to install Python (it can be tricky), see these notes. \u00a0</p> <p>Install API Logic Server in a Virtual Environment</p> <p>Then, install API Logic Server in the usual manner:</p> Install API Logic Server in a Virtual Environment<pre><code>python -m venv venv                  # may require python3 -m venv venv\nvenv\\Scripts\\activate                # mac/linux: source venv/bin/activate\npython -m pip install ApiLogicServer\n</code></pre> <p>If you are using SqlServer, you also need to install <code>pyodbc</code>.</p> <p>Create the Tutorial Project</p> <p>Create Tutorial<pre><code>ApiLogicServer tutorial\n</code></pre> Open the Project in VSCode</p> <ol> <li>Open Folder <code>ApiLogicServer/tutorial</code> in VSCode<ul> <li>Decline options for Containers</li> </ul> </li> <li>Establish your Virtual Environment - open Terminal &gt; New Terminal, and</li> </ol> Install API Logic Server in a Virtual Environment<pre><code>python -m venv venv                  # may require python3 -m venv venv\nvenv\\Scripts\\activate                # mac/linux: source venv/bin/activate\npython -m pip install -r requirements.txt  # accept \"new Virtual environment\"\n</code></pre> <p>Start Docker Start (might install) API Logic Server Docker<pre><code>  docker run -it --name api_logic_server --rm -p 5656:5656 -p 5002:5002 -v ${PWD}:/localhost apilogicserver/api_logic_server\n</code></pre></p> <p>Windows: use Powershell (<code>PWD</code> is not supported in Command Line)</p> <p>Create the Tutorial Project</p> <p>You are now running a terminal window in the Docker machine.  Create the Tutorial project:   Create Tutorial<pre><code>$ cd /localhost/             # a directory on your local file system in which...\n$ ApiLogicServer tutorial    # tutorial directory will be created\n$ exit                       # return to local host \n</code></pre> Open the Project in VSCode</p> <ol> <li>Open Folder <code>ApiLogicServer/tutorial</code> in VSCode<ul> <li> <p>Accept option to \"Reopen in Container\"</p> <p>If you already skipped this option, no worries.  Use View &gt; Command Palette &gt; Remote-Containers: Reopen in Container</p> </li> </ul> </li> </ol> <p> </p>"},{"location":"Install-Express-x/#next-steps-tutorial","title":"Next Steps - Tutorial","text":"<p>You're all set - the Tutorial is created, installed and ready to run.  Proceed to Explore the Tutorial.</p>"},{"location":"Install-Express/","title":"Express Install","text":"<p>In most cases, Python and Python Projects are simple and fast to install, as described below.  If you encounter issues, open the Detailed Install.</p> <p>Follow these instructions to:</p> <ol> <li>Install API Logic Server</li> <li>Create the sample Tutorial API Logic Server Project</li> <li>Open it in your IDE</li> <li>Prepare the projects' Python environment</li> </ol>"},{"location":"Install-Express/#create-an-install-directory","title":"Create an install directory","text":"<p>You can create this anywhere, such as your home folder or Desktop.</p> Create an install directory<pre><code>mkdir ApiLogicServer      # a directory of projects on your local machine\n</code></pre>"},{"location":"Install-Express/#use-local-install-or-docker","title":"Use Local Install, or Docker","text":"<p>You can install API Logic Server locally using <code>pip</code>, or use Docker.  If you already have docker, it can eliminate many of the sometimes-tricky Python install issues.</p> <p>Open the appropriate section below.</p> Local InstallDocker <p>Verify Pre-reqs: Python 3.8+</p> <p>Ensure you have these pre-reqs:</p> Verify 3.8 - 3.10<pre><code>python --version  # on macs, you may need to use Python3\n</code></pre> <p>If you need to install Python (it can be tricky), see these notes. \u00a0</p> <p>Install API Logic Server in a Virtual Environment</p> <p>Then, install API Logic Server in the usual manner:</p> Install API Logic Server in a Virtual Environment<pre><code>python -m venv venv                  # may require python3 -m venv venv\nvenv\\Scripts\\activate                # mac/linux: source venv/bin/activate\npython -m pip install ApiLogicServer\n</code></pre> <p>If you are using SqlServer, you also need to install <code>pyodbc</code>.</p> <p>Create the Tutorial Project</p> <p>Create Tutorial<pre><code>ApiLogicServer create      # accept default project_name, db_url (sample tutorial)\n</code></pre> Open the Project in VSCode</p> <ol> <li>Open Folder <code>ApiLogicServer/ApiLogicProject</code> in VSCode<ul> <li>Decline options for Containers</li> </ul> </li> <li>Establish your Virtual Environment - open Terminal &gt; New Terminal, and</li> </ol> Install API Logic Server in a Virtual Environment<pre><code>python -m venv venv                  # may require python3 -m venv venv\nvenv\\Scripts\\activate                # mac/linux: source venv/bin/activate\npython -m pip install -r requirements.txt  # accept \"new Virtual environment\"\n</code></pre> <p>Start Docker Start (might install) API Logic Server Docker<pre><code>  docker run -it --name api_logic_server --rm -p 5656:5656 -p 5002:5002 -v ${PWD}:/localhost apilogicserver/api_logic_server\n</code></pre></p> <p>Windows: use Powershell (<code>PWD</code> is not supported in Command Line)</p> <p>Create the Tutorial Project</p> <p>You are now running a terminal window in the Docker machine.  Create the Tutorial project:   Create Tutorial<pre><code>$ ApiLogicServer create --project_name=/localhost/ApiLogicProject --db_url=\n$ exit  # return to local host \n</code></pre> Open the Project in VSCode</p> <ol> <li>Open Folder <code>ApiLogicServer/ApiLogicProject</code> in VSCode<ul> <li> <p>Accept option to \"Reopen in Container\"</p> <p>If you already skipped this option, no worries.  Use View &gt; Command Palette &gt; Remote-Containers: Reopen in Container</p> </li> </ul> </li> </ol> <p> </p>"},{"location":"Install-Express/#next-steps-tutorial","title":"Next Steps - Tutorial","text":"<p>You're all set - the Tutorial is created, installed and ready to run:</p> <ol> <li>Start the Server using the pre-built Launch Configuration as shown here</li> <li>Open the Admin App in your Browser</li> <li>Proceed to Explore the Tutorial.</li> </ol>"},{"location":"Install-psycopg2/","title":"Install psycopg2: Postgres","text":""},{"location":"Install-psycopg2/#update-psycopg2-pre-installed-as-of-060200","title":"Update - <code>psycopg2</code> pre-installed as of 06.02.00","text":"<p><code>psycopg2</code> was updated at the end of September 2020.  So, as of release 6.2, this is restored into the build of ApiLogicServer.</p> <p> </p>"},{"location":"Install-psycopg2/#postgres-install-psycopg2-release-50333-through-61","title":"Postgres - install <code>psycopg2</code> -- Release 5.03.33 through 6.1","text":"<p>This is included in Docker, but not for local installs.  To install <code>psycopg2</code> (either global to your machine, or within a <code>venv</code>):</p> <pre><code>pip install psycopg2-binary==2.9.3\n</code></pre> <p>Please see the examples on the testing for important considerations in specifying SQLAlchemy URIs.</p>"},{"location":"Install-pyodbc/","title":"Install pyodbc: SqlServer","text":""},{"location":"Install-pyodbc/#sqlserver-install-pyodbc","title":"SqlServer - install <code>pyodbc</code>","text":"<p>This is included in Docker, but not for local installs.  To install <code>pyodbc</code> (either global to your machine, or within a <code>venv</code>):</p> <ul> <li>Linux</li> </ul> <pre><code>apt install unixodbc-dev   # Linux only\npip install pyodbc\n</code></pre> <ul> <li>Mac - using brew:</li> </ul> <p>Install the Microsoft ODBC driver, then:</p> <pre><code># may be required - brew install unixodbc      # Mac only\npip install pyodbc==4.0.34\n</code></pre> <p>Please see the examples on the testing for important considerations in specifying SQLAlchemy URIs.</p> <p> </p>"},{"location":"Install-pyodbc/#limitations-sqlserver-sort-fields","title":"Limitations - SqlServer Sort fields","text":"<p>Note Sql/Server may not sort on certain fields such as images or long text.  This shows up, for example, in the Docker SqlServer sample database for <code>Category</code>.  So, when testing these in Swagger, modify your Sort fields accordingly.</p> <p> </p>"},{"location":"Install/","title":"Install API Logic Server","text":""},{"location":"Install/#install-in-docker-or-locally","title":"Install in Docker or Locally","text":"<p>You can install API Logic Server locally using <code>pip</code>, using Docker, or pythonanywhere (a cloud service).</p> <p>While <code>pip</code> is a simple install, it requires a Python environment, which is not so simple.  We therefore recommend you consider Docker - it's a simpler install, and aligns you with a likely deployment environment.</p> <p>Create an install directory</p> <p>You can create this anywhere, such as your home folder or Desktop.</p> <p>Create an install directory<pre><code>mkdir ApiLogicServer      # a directory of projects on your local machine\n</code></pre> Then, open the appropriate section below, and see the Installation Notes, below.</p> Local InstallWith DockerPythonAnyWhere <p>API Logic Server requires Python 3.8 or higher, since it relies on <code>from future import annotations</code>.</p> <p>The first section below verifies whether your Python environment is current.  </p> <p>The following section explains how to install a current Python environment.</p> <p>Verify Pre-reqs: Python 3.8+</p> <p>Ensure you have these pre-reqs:</p> Verify 3.8 - 3.10<pre><code>python --version\n\npython -m venv -h  # also verify these work\npython -m pip -h\n</code></pre> <p>Note: on Macs, you may need to use <code>python3</code> instead of <code>python</code>.</p> <p>If you need to install Python (it can be tricky), see these notes. \u00a0</p> <p>Install API Logic Server in a virtual environment</p> <p>Then, install API Logic Server in the usual manner:</p> Install API Logic Server in a Virtual Environment<pre><code>cd ApiLogicServer                    # directory of your choice\npython -m venv venv                  # may require python3 -m venv venv\nsource venv/bin/activate             # windows venv\\Scripts\\activate\npython -m pip install ApiLogicServer\n</code></pre> <p>If you are using SqlServer, you also need to install <code>pyodbc</code>.</p> Start (might install) API Logic Server Docker<pre><code>cd ApiLogicServer      # a directory of projects on local host\n\n# Start (install if required) the API Logic Server docker container...\n\ndocker run -it --name api_logic_server --rm -p 5656:5656 -p 5002:5002 -v ${PWD}:/localhost apilogicserver/api_logic_server\n</code></pre> <p>This will start a command line in the Docker container at your current directory. You are now able to issue commands like <code>ApiLogicServer create</code> as described in the home page.  These will create API Logic Projects as directories under your current directory.</p> <p>Windows: use Powershell (<code>PWD</code> is not supported in Command Line)</p> <p>API Logic Projects are not restricted to be under the same directory.</p> <p>The <code>api_logic_server</code> image supports startup arguments so you can control the <code>api_logic_server</code> container, by running a startup script or by supplying environment variables.  You might, for example, have automated test procedures that load projects from <code>GitHub</code> and run tests.</p> <p>For more information, see Working With Docker.</p> <p>Already installed?  Upgrade to the latest (5.03.10): <code>docker pull apilogicserver/api_logic_server</code> (you may need to rebuild your container).</p> <p>You can create an ApiLogicServer on PythonAnywhere for any cloud-accessible database. \u00a0Open a bash console, and:</p> <pre><code>python3 -m venv venv  # ensures that Python3 is used  \nsource venv/bin/activate\n\npython3 -m pip install ApiLogicServer\n\nApiLogicServer create --host=ApiLogicServer.pythonanywhere.com --port=   # ApiLogicServer == your account  \n</code></pre> <p>1. Create Application</p> <p>Here is an example using a pythonanywhere-hosted MySQL database (note the escape character for the $ in the database name: <pre><code>ApiLogicServer create --project_name=Chinook \\\n--host=ApiLogicServer.pythonanywhere.com --port= \\\n--db_url=mysql+pymysql://ApiLogicServer:***@ApiLogicServer.mysql.pythonanywhere-services.com/ApiLogicServer\\$Chinook\n</code></pre></p> <p>2. Create and configure a web app</p> <p></p> <p>3. Update the wsgi And copy the contents of <code>/home/ApiLogicServer/api_logic_server/python_anywhere_wsgi.py</code> over the wsgi file created by pythonanywhere.</p> <p>4. Update the Admin App <code>api_root</code> The first few lines of the Admin.yaml and Admin Config page should be (update the last line: <pre><code>about:\n  date: December 26, 2021 09:00:00\n  recent_changes: altered tab captions\n  version: 3.50.51\napi_root: https://apilogicserver.pythonanywhere.com/api\n</code></pre></p> <p>5. Verify <code>admin.yaml</code> Verify that the <code>ui/admin.yaml</code> ends with something like this:</p> <p><pre><code>settings:\n  HomeJS: https://apilogicserver.pythonanywhere.com/admin-app/home.js\n  max_list_columns: 8\n</code></pre> 6. Configure the host and port</p> <p>In <code>api_logic_server_run.py</code>, set these as follows:</p> <p><pre><code>host = \"apilogicserver.pythonanywhere.com\"  # was \"localhost\"\nport = \"\"                                   # was \"5656\"\n</code></pre> 7. Restart the Web App You start ApiLogicServer from the web console, not from the command line</p> <p>8. Run the application</p> <p>You can open the Admin App in your browser http://apilogicserver.pythonanywhere.com/admin-app/index.html.</p> <p>You can use <code>curl</code> from pythonanywhere consoles: <pre><code>curl -X GET \"http://ApiLogicServer.pythonanywhere.com/api/employees/?include=office%2Cparent%2CEmployeeList%2CCustomerList&amp;fields%5BEmployee%5D=employeeNumber%2ClastName%2CfirstName%2Cextension%2Cemail%2CofficeCode%2CreportsTo%2CjobTitle&amp;page%5Boffset%5D=0&amp;page%5Blimit%5D=10&amp;sort=employeeNumber%2ClastName%2CfirstName%2Cextension%2Cemail%2CofficeCode%2CreportsTo%2CjobTitle%2Cid\" -H  \"accept: application/vnd.api+json\" -H  \"Content-Type: application/vnd.api+json\"  \n</code></pre></p> <p> </p>"},{"location":"Install/#installation-notes","title":"Installation Notes","text":""},{"location":"Install/#alert-project-fails-to-start","title":"Alert - Project fails to start","text":"<p>Recent updates to included libs have broken previous versions of API Logic Server.  This is fixed in a new version (5.00.06), and is strongly recommended.  You can also repair broken installations as described in Troubleshooting.</p>"},{"location":"Install/#heads-up-certificate-issues","title":"Heads up - Certificate Issues","text":"<p>We sometimes see Python / Flask AppBuilder Certificate issues - see Troubleshooting.</p>"},{"location":"Install/#default-python-version","title":"Default Python version","text":"<p>In some cases, your computer may have multiple Python versions, such as <code>python3</code>.  <code>ApiLogicServer run</code> relies on the default Python being 3.8 or higher.  You can resolve this by: * making <code>python3</code> the default Python, or * using <code>ApiLogicServer create</code>, and running <code>python3 api_logic_server_run.py</code></p> <p> </p>"},{"location":"Install/#next-steps-create-a-project","title":"Next Steps - Create a Project","text":"<p>Create, start and debug the sample project - see the Creating a Project.</p>"},{"location":"Internals-CLI/","title":"Internals - CLI","text":"<p>This page does not address created projects, rather, it is about the API Logic Server system used to create projects.  It is for those who want to extend the product or understand how it works, not for those simply using the product.</p>"},{"location":"Internals-CLI/#created-api-logic-project-structure","title":"Created API Logic Project Structure","text":"<p>For reference, projects are created with this structure:</p> <p>To create using the source code (e.g, from an IDE), using the <code>venv</code> created from above:</p> <pre><code>(venv) val@Vals-MPB-14 ApiLogicServer % ApiLogicServer create\n\nWelcome to API Logic Server 07.00.01\n\nProject to create [ApiLogicProject]: \nSQLAlchemy Database URI [default = nw.sqlite, ? for help]: \n\n\nCreating ApiLogicProject with options:\n  --db_url=default = nw.sqlite, ? for help\n--bind_key=\n--project_name=ApiLogicProject   (pwd: /Users/val/dev/servers/install/ApiLogicServer)\n--api_name=api\n  --admin_app=True\n  --react_admin=False\n  --flask_appbuilder=False\n  --from_git=\n--run=False\n  --host=localhost\n  --port=5656\n--swagger_host=localhost\n  --not_exposed=ProductDetails_V\n  --open_with=\n--use_model=\n--favorites=name description\n  --non_favorites=id\n  --extended_builder=\n--multi_api=False\n  --infer_primary_key=False\n\nApiLogicServer 07.00.01 Creation Log:\n0. Using Sample DB from: sqlite:////Users/val/dev/servers/install/ApiLogicServer/venv/lib/python3.10/site-packages/api_logic_server_cli/database/nw-gold.sqlite\n1. Delete dir: /Users/val/dev/servers/install/ApiLogicServer/ApiLogicProject\n2. Create Project: /Users/val/dev/servers/install/ApiLogicServer/ApiLogicProject\n.. ..Clone from /Users/val/dev/servers/install/ApiLogicServer/venv/lib/python3.10/site-packages/api_logic_server_cli/project_prototype \n.. ..Copy in nw customizations: logic, custom api, readme, tests, admin app\n.. ..Sqlite database setup /Users/val/dev/servers/install/ApiLogicServer/ApiLogicProject/database/db.sqlite...\n.. .. ..From /Users/val/dev/servers/install/ApiLogicServer/venv/lib/python3.10/site-packages/api_logic_server_cli/database/nw-gold.sqlite\n.. .. ..db_uri set to: sqlite:////Users/val/dev/servers/install/ApiLogicServer/ApiLogicProject/database/db.sqlite in &lt;project&gt;/config.py\n3. Create/verify database/models.py, then use that to create api/ and ui/ models\n a.  Create Models - create database/models.py, using sqlcodegen\n.. .. ..For database:  sqlite:////Users/val/dev/servers/install/ApiLogicServer/ApiLogicProject/database/db.sqlite\n.. .. ..Create resource_list - dynamic import database/models.py, inspect 18 classes in &lt;project&gt;/database\n.. .. ..Setting cascade delete for sample database database/models.py\n b.  Create api/expose_api_models.py from models\n c.  Create ui/admin/admin.yaml from models\n.. .. ..Create ui/admin copy safrs-react-admin to: ApiLogicProject/ui/safrs-react-admin\n.. .. ..  ..From /Users/val/dev/servers/install/ApiLogicServer/venv/lib/python3.10/site-packages/api_logic_server_cli/create_from_model/safrs-react-admin-npm-build\n.. .. ..Write ApiLogicProject/ui/admin/admin.yaml\n d.  Create ui/basic_web_app -- declined\n4. Final project fixup\n b.   Update api_logic_server_run.py with project_name=ApiLogicProject and api_name, host, port\n c.   Fixing api/expose_services - port, host\n d.   Updated customize_api_py with port=5656 and host=localhost\n e.   Updated python_anywhere_wsgi.py with /Users/val/dev/servers/install/ApiLogicServer/ApiLogicProject\n\n\n==================================================================\nApiLogicProject customizable project created.  Adding Security:\n  ..ApiLogicServer add-db --db_url=auth --bind_key=authentication\n==================================================================\n\n\nCreating ApiLogicProject with options:\n  --db_url=auth\n  --bind_key=authentication\n  --project_name=ApiLogicProject   (pwd: /Users/val/dev/servers/install/ApiLogicServer)\n--api_name=api\n  --admin_app=True\n  --react_admin=False\n  --flask_appbuilder=False\n  --from_git=\n--run=False\n  --host=localhost\n  --port=5656\n--swagger_host=localhost\n  --not_exposed=ProductDetails_V\n  --open_with=\n--use_model=\n--favorites=name description\n  --non_favorites=id\n  --extended_builder=\n--multi_api=False\n  --infer_primary_key=False\n\nApiLogicServer 07.00.01 Creation Log:\n1. Not Deleting Existing Project\n2. Using Existing Project\n.. ..Adding Database [authentication] to existing project\n.. .. ..Copying sqlite database to: database/authentication_db.sqlite\n.. .. ..From /Users/val/dev/servers/install/ApiLogicServer/venv/lib/python3.10/site-packages/api_logic_server_cli/database/authentication.sqlite\n.. ..Updating config.py file with SQLALCHEMY_DATABASE_URI_AUTHENTICATION...\n.. ..Updating database/bind_databases.py with SQLALCHEMY_DATABASE_URI_AUTHENTICATION...\n3. Create/verify database/authentication_models.py, then use that to create api/ and ui/ models\n a.  Create Models - create database/authentication_models.py, using sqlcodegen\n.. .. ..For database:  sqlite:////Users/val/dev/servers/install/ApiLogicServer/ApiLogicProject/database/authentication_db.sqlite\n.. .. ..Setting bind_key = authentication\n.. .. ..Create resource_list - dynamic import database/authentication_models.py, inspect 5 classes in &lt;project&gt;/database\n b.  Create api/expose_api_models.py from models\n c.  Create ui/admin/admin.yaml from models\n.. .. ..Write ApiLogicProject/ui/admin/authentication_admin.yaml\n d.  Create ui/basic_web_app -- declined\n4. Final project fixup\n b.   Update api_logic_server_run.py with project_name=ApiLogicProject and api_name, host, port\n c.   Fixing api/expose_services - port, host\n d.   Updated customize_api_py with port=5656 and host=localhost\n e.   Updated python_anywhere_wsgi.py with /Users/val/dev/servers/install/ApiLogicServer/ApiLogicProject\n\n\nApiLogicProject customizable project created.  Next steps:\n==========================================================\n\nRun API Logic Server:\n  cd ApiLogicProject;  python api_logic_server_run.py\n\nCustomize using your IDE:\n  code ApiLogicProject  # e.g., open VSCode on created project\nEstablish your Python environment - see https://apilogicserver.github.io/Docs/Execute-VSCode-Local/\n\n\n\nSecurity Added - enabled in config.sys\n\n\nApiLogicProject customizable project created.  Next steps:\n==========================================================\n\nRun API Logic Server:\n  cd ApiLogicProject;  python api_logic_server_run.py\n\nCustomize using your IDE:\n  code ApiLogicProject  # e.g., open VSCode on created project\nEstablish your Python environment - see https://apilogicserver.github.io/Docs/Execute-VSCode-Local/\n\n\n(venv) val@Vals-MPB-14 ApiLogicServer % </code></pre> <p> </p>"},{"location":"Internals-CLI/#creation-internals","title":"Creation Internals","text":"<p>The ApiLogicServer source code looks like this:</p> <p>Execution begins at <code>ApiLogicServer/api_logic_server_cli/cli.py</code>.  It gathers command line arguments and creates an instance of <code>ProjectRun(Project)</code>, which proceeds to <code>ProjectRun.create_project()</code>.  Its operation is described in the sections below.</p>"},{"location":"Internals-CLI/#1-delete-dir","title":"1. Delete Dir","text":"<p>The target project directory is deleted.  This does not work on Windows, which requires the directory to not exist.</p>"},{"location":"Internals-CLI/#2-create-project-copy-or-git-clone","title":"2. Create Project - copy or <code>git clone</code>","text":"<p>The basic project structure is then created, either by a directory copy or <code>git clone</code>.  By default, project is created from <code>ApiLogicServer/prototype</code>.</p>"},{"location":"Internals-CLI/#2a-customize","title":"2a. Customize","text":"<p>With limited flexibility, you can provide your own <code>from-git</code> url/path.</p>"},{"location":"Internals-CLI/#nw-examples","title":"NW Examples","text":"<p>For demonstration purposes, the system copies pre-defined logic and services so you can explore them.  These are copied from the <code>api_logic_server_cli</code> directory,  This is indicated by the following console log entry:</p> <pre><code>.. ..Append logic/declare_logic.py with pre-defined nw_logic, rpcs\n</code></pre>"},{"location":"Internals-CLI/#3-createverify-databasemodelspy-then-use-that-to-create-api-and-ui-models","title":"3. Create/verify <code>database/models.py</code>, then use that to create api/ and ui/ models","text":"<p>The main driver instantiates <code>create_from_models/model_creation_services.ModelCreationServics()</code>, whose constructor calls <code>create_models</code>.  Described below, this provides access to the model, plus verious services to do things like return favorite fields, joins, etc.</p> <p>The main driver then executes <code>invoke_creators</code> which calls the <code>create_from_models</code> modules to create api and ui models, based on the <code>create_from_models/model_creation_services</code> object.  Before writing <code>models.py</code>, import fixes are made in <code>fix_database_models</code>.</p> <p>Here is the key excerpt of the main driver in <code>api_logic_server_cli/cli.py</code>:</p> <pre><code>    print(f'3. Create/verify database/models.py, then use that to create api/ and ui/ models')\n    model_creation_services = ModelCreationServices(  ...)\n    fix_database_models(project_directory, db_types, nw_db_status)\n    invoke_creators(model_creation_services)  # MAJOR! creates api/expose_api_models, ui/admin &amp; basic_web_app\n</code></pre>"},{"location":"Internals-CLI/#3a-create-models-create-databasemodelspy","title":"3a. Create Models - create <code>database/models.py</code>","text":"<p>The essence of the project creator is that, given a database model (description), we can  generate APIs and UIs.  These models are created in `model_creation_services.py - ModelCreationServices.</p> <p>The essence of the process is illustrated in the <code>key_module_map</code> at the end of <code>ApiLogicServer/api_logic_cli/cli.py</code>.  <code>ModelCreationServices</code> provides the model (<code>resource_list</code>) and various services (e.g, <code>findChildList</code>).  A key function is to create the model, which starts in the <code>__init()__</code> constructor:</p> <ul> <li>It calls <code>sqlacodegen_wrapper.create_models_py</code> to create a string of the models file, which is then written to disk in <code>write_models_py()</code><ul> <li>See the code comments for the function: <code>create_models_py</code> </li> </ul> </li> <li>It then calls <code>create_resource_list()</code> (non-trivial)<ul> <li>It dynamically loads the created <code>models.py</code></li> <li>And builds the model using metadata create by the SAFRS package</li> </ul> </li> </ul> <p>For more information, see the comments in <code>create_models_py()</code>, easily reached via the <code>key_module_map</code> in <code>ApiLogicServer/api_logic_cli/cli.py</code>:</p> <p><pre><code>def key_module_map():\n\"\"\" not called - just index of key code - use this for hover, goto etc \n        ctl-l (^l) for last edit\n    \"\"\"\n    import create_from_model.ui_admin_creator as ui_admin_creator\n    import create_from_model.api_expose_api_models_creator as api_expose_api_models\n    import sqlacodegen_wrapper.sqlacodegen_wrapper as sqlacodegen_wrapper\n\n    api_logic_server()                                          # main driver, calls...\n    create_project_with_nw_samples()                            # clone project, overlay nw\n    model_creation_services = ModelCreationServices()           # creates resource_list (python db model); ctor calls...\n    def and_the_ctor_calls():\n        sqlacodegen_wrapper.create_models_py({})                # creates models.py via sqlacodegen\n        model_creation_services.create_resource_list()          # creates resource_list via dynamic import of models.py\n    invoke_creators(model_creation_services)                    # creates api, ui via create_from_model...\n    api_expose_api_models.create()                              # creates api/expose_api_models.py, key input to SAFRS        \n    ui_admin_creator.create()                                   # creates ui/admin/admin.yaml from resource_list\n    get_abs_db_url()                                            # nw set here, dbname```\n\n#### Create `resource_list` - dynamic import database/models.py, inspect each class\nCalled from `create_models`', this dynamically imports\nthe created (or, rebuild, the existing) `models.py`,\nand creates teh `resource_list` used by the creator modules.\n\n&gt; create_resource_model_from_safrs is a complex process due to dynamic import of models.py - failures may manifest here.\n\n#### If option: ```use_model```\nSQL dialects and bugs can result in failures here.  The system therefore enables you to provide your own model, as described in [TroubleShooting](wiki/Troubleshooting#manual-model-repair).\n\nIf you elect this option, you should see the following in the console log:\n</code></pre> .. ..Copy /Users/val/dev/ApiLogicServer/tests/models.py to /Users/val/dev/servers/sqlserver-types/database/models.py ```</p>"},{"location":"Internals-CLI/#extensible-generate-from-models","title":"Extensible generate from models","text":"<p>The <code>models.py</code> file provides <code>resource_list</code> metadata used to create APIs, a basic web app, and a react-admin app (steps 31, 3b and 3c), as shown below:</p>"},{"location":"Internals-CLI/#3b-create-apiexpose_api_modelspy-import-iterate-models","title":"3b. Create <code>api/expose_api_models.py</code> (import / iterate models)","text":"<p>The first creator to be invoked is <code>create_from_model/api_expose_api_models</code> to create <code>expose_api_models</code>.</p> <p>It uses <code>model_creation_services.resource_list</code> to create <code>create_from_model/model_creation_services#create_models</code>.  It is straightforward.</p> <p>The remaining steps make small updates to the created code to insert database names.</p>"},{"location":"Internals-CLI/#3c-create-uiadmin-app-import-iterate-models","title":"3c. Create <code>ui/admin app</code> (import / iterate models)","text":"<p>The main thing in <code>ui_admin_creator</code> is to create a <code>admin.yaml</code> file - an executable description of the pages and content.</p>"},{"location":"Internals-CLI/#3d-create-uibasic_web_app-with-command-flask-fab-create-app","title":"3d. Create <code>ui/basic_web_app</code> with command: <code>flask fab create-app</code>","text":"<p>The system then creates the basic web app.  The main thing here is to create the <code>views.py</code> file.</p> <p> </p>"},{"location":"Internals/","title":"API Logic Server Development","text":"<p>This page does not address created projects, rather, it is about the API Logic Server system used to create projects.  It is for those who want to extend the product or understand how it works, not for those simply using the product.</p>"},{"location":"Internals/#how-to-install-it","title":"How to Install it","text":"<p>Follow these steps to:</p> <ul> <li>Obtain the software from GitHub</li> <li>Open it in your IDE</li> <li>Perform basic testing</li> <li>Build and release (including automated testing)</li> <li>Change and integrate Safrs React Admin (Admin app)</li> </ul>"},{"location":"Internals/#obtain-the-projects-from-github","title":"Obtain the projects from GitHub","text":"<p>To create the projects:</p> <ol> <li>Create an empty folder (e.g., <code>~/dev</code>)</li> <li>Download and run the install-ApiLogicServer-dev procedure (note: Windows users use <code>install-ApiLogicServer-dev.ps1</code>), e.g.:</li> </ol> Install API Logic Server Development environment<pre><code>cd ~/dev  # project directories created here\nsh install-ApiLogicServer-dev.sh vscode\n</code></pre> <p>This will use <code>git clone</code> to create folders in <code>dev:</code></p> <ul> <li>ApiLogicServer</li> <li>safrs-react-admin, and </li> <li>servers</li> </ul> <p>It's basically straightforward, though note the <code>cp</code> command which copies the <code>safrs-react-admin</code> runtime to API Logic Server for subsequent creation of API Logic Projects:</p> <p><pre><code>    mkdir servers    # good place to create ApiLogicProjects\ngit clone https://github.com/valhuber/ApiLogicServer\n    git clone https://github.com/thomaxxl/safrs-react-admin\n    cd ApiLogicServer\n    cp -r ../safrs-react-admin/build api_logic_server_cli/create_from_model/safrs-react-admin-npm-build\n</code></pre> </p>"},{"location":"Internals/#open-devapilogicserver-in-your-ide","title":"Open <code>~/dev/ApiLogicServer</code> in your IDE","text":"<p><code>install-ApiLogicServer...</code> will create a project, and open it VS Code or PyCharm.</p> <p>Python requires a virtual environment; the procedure differs for <code>vscode</code> vs. <code>charm</code>:</p> <ul> <li><code>vscode</code> projects are created with a <code>venv</code> and are ready to run the Launch Configurations to create the sample</li> <li><code>charm</code> projects require that you create the <code>venv</code> with the PyCharm</li> </ul> <p>It should look something like this:</p> <p> </p>"},{"location":"Internals/#create-the-sample-devserversapilogicproject","title":"Create the Sample (<code>~/dev/servers/ApiLogicProject</code>)","text":"<p>Once in your IDE, you can run the pre-defined launch configuration <code>0 - Create and Run ApiLogicProject</code> to create and run the sample.  This creates <code>~/dev/servers/ApiLogicProject</code>.</p> <p> </p>"},{"location":"Internals/#build-and-test","title":"Build and Test","text":"<p>As of version 6.02.20, test automation (located here) replaces a series of manually executed scripts (located here).  These have been verified on Mac, Linux (Ubuntu) and Windows.</p> <p>The automated test (use the launch configuration <code>BUILD AND TEST</code>) performs a number of steps.  You can configure the test to run some or all of these by editing the <code>`env_xxx.py</code> files shown here:</p> <p> </p>"},{"location":"Internals/#do_install_api_logic_server","title":"<code>do_install_api_logic_server</code>","text":"<p>This:</p> <ol> <li>Runs the standard Python build: <code>python3 setup.py sdist bdist_wheel</code></li> <li>Installs it into a Python environment <code>dev/servers/install/ApiLogicServer/venv</code></li> <li>Installs <code>pyodbc</code>.  Note this requires you have installed <code>odbc</code>, but install failures are intentionally ignored (instead, skip the Sql/Server database with<code>do_docker_sqlserver = False</code> )</li> </ol>"},{"location":"Internals/#do_create_api_logic_project","title":"<code>do_create_api_logic_project</code>...","text":"<p>This creates the sample project, runs the server, and tests the logic using the behave tests.  It produces quite a lot of output which you can ignore.  The test is designed to terminate if the tests fail.</p> <p>These are extensive tests which verify project creation, server startup, logic and some minimal API testing (the Behave tests issue APIs to read/write data).</p>"},{"location":"Internals/#do_allocation_test","title":"<code>do_allocation_test</code>","text":"<p>This is a complex rule example.</p>"},{"location":"Internals/#do_docker_database","title":"<code>do_docker_&lt;database&gt;</code>","text":"<p>These create projects from docker databases (see here) which are expected to be running.  They perform minimal validation to ensure the server starts by executing the hello world API.  </p> <pre><code>This in fact verifies that the `models.py` file is created and runs.\n</code></pre> <p> </p>"},{"location":"Internals/#develop-debug-admin-app","title":"Develop / Debug admin app","text":"<p>Once you have created the API Logic Project, you can restart the server like this (it is not necessary to recreate the sample each time you run):</p> Start API Logic Project<pre><code>cd ~/dev/servers/ApiLogicProject\npython3 api_logic_server_run.py\n</code></pre> <p>You can obtain an editable version of the admin app like this:</p> Get Data Provider<pre><code>cd ~/dev/safrs-react-admin\ngit clone https://github.com/thomaxxl/rav3-jsonapi-client # modified data provider used, installed in the project root\n</code></pre> <p>Then, to debug (with server running):</p> Execute debug version of admin app<pre><code>npm install --global yarn # required only once\nyarn install\nyarn run build\n\nyarn start\n</code></pre> <p>To make this the runtime used to create API Logic Projects:</p> Update ApiLogicServer to use your admin app<pre><code>cp -a /build/. ../ApiLogicServer/api_logic_server_cli/create_from_model/admin/\n</code></pre> <p> </p>"},{"location":"Internals/#docker-startup","title":"Docker Startup","text":"<p>You can review the dockerfile on <code>github</code>.  Note that the normal operation is to start a terminal session as the last step:</p> <pre><code>CMD [\"bash\"]\n</code></pre> <p>When bash sessions are started, Linux runs <code>.bashrc</code>.  This checks for environment variables which can be used to load an existing project from git, and run it.  (Note: this defeats the normal terminal startup).  For example, start Docker using <code>-e</code> arguments, like this:</p> <pre><code>docker run -it --name api_logic_server --rm --net dev-network \\\n-p 5656:5656 -p 5002:5002 -v ${PWD}:/localhost \\\n-e APILOGICSERVER_GIT='https://github.com/valhuber/Tutorial-ApiLogicProject.git' \\\n-e APILOGICSERVER_FIXUP='/localhost/Project-Fixup.sh' \\\napilogicserver/api_logic_server\n</code></pre> <p>Alternatively, you can start Docker specifying an initial command, like this: <pre><code>docker run -it --name api_logic_server --rm --net dev-network \\\n-p 5656:5656 -p 5002:5002 -v ${PWD}:/localhost \\\napilogicserver/api_logic_server \\\nsh /home/api_logic_server/bin/run-project.sh https://github.com/valhuber/Tutorial-ApiLogicProject.git /localhost/Project-Fixup.sh\n</code></pre></p> <p>In both cases, the git load is performed by <code>bin/run-project.sh</code>, which you can explore on github.</p>"},{"location":"Logic-Operation/","title":"Logic Operation","text":""},{"location":"Logic-Operation/#logic-architecture","title":"Logic Architecture","text":"<p>Logic Bank operates as shown above:</p> <ol> <li> <p>Automatic Configuration</p> <p>a. Declare logic in <code>logic/declare_logic.py</code>.  Here is a summary of the rule types</p> <p>b. The Basic Web App and JSON:API are already configured to load and execute this logic</p> </li> <li> <p>Basic Web App and JSON:API operate as usual: makes calls on <code>SQLAlchemy</code> for inserts, updates and deletes     and issues <code>session.commit()</code></p> </li> <li> <p>The Logic Bank engine handles SQLAlchemy <code>before_flush</code> events on <code>Mapped Tables</code>, so executes on this <code>session.commit()</code></p> </li> <li> <p>The logic engine operates much like a spreadsheet:</p> <ul> <li>watch for changes -  at the attribute level</li> <li>react by running rules that referenced changed attributes, which can</li> <li>chain to still other attributes that refer to those changes.  Note these might be in different tables, providing automation for multi-table logic</li> </ul> </li> </ol> <p>Logic does not apply to updates outside SQLAlchemy, nor to SQLAlchemy batch updates or unmapped sql updates.</p>"},{"location":"Logic-Operation/#basic-idea-like-a-spreadsheet","title":"Basic Idea - Like a Spreadsheet","text":"<p>Rules are spreadsheet-like expressions for multi-table derivations and constraints.  For example (not actual syntax):</p> <pre><code>The Customer Balance is the sum of the unshipped Order AmountTotals\n</code></pre> <p>You can imagine that the spreadsheet watches for changes to referenced cells, reacts by recomputing the cell, which may chain to other cells.</p> <p> </p> <p>Let's see how logic operates on a typical, multi-table transaction.</p>"},{"location":"Logic-Operation/#watch-react-chain","title":"Watch, React, Chain","text":"<p>Let's consider a typical multi-table transaction.  Here is the 5 rule solution for check credit:</p> <p>As Order Details are inserted, the rule flow is shown below.</p> <p>The <code>add_order</code> example illustrates how Watch / React / Chain operates to check the Credit Limit as each Order Detail is inserted:</p> <ol> <li> <p>The <code>OrderDetail.UnitPrice</code> (copy, line 78) references Product, so inserts cause it to be copied</p> </li> <li> <p><code>Amount</code> (formula, line 75) watches <code>UnitPrice</code>, so its new value recomputes <code>Amount</code></p> </li> <li> <p><code>AmountTotal</code> (sum, line 72) watches <code>Amount</code>, so <code>AmountTotal</code> is adjusted (more on adjustment, below)</p> </li> <li> <p><code>Balance</code> (sum, line 68) watches <code>AmountTotal</code>, so it is adjusted</p> </li> <li> <p>And the Credit Limit constraint (line 64) is checked (exceptions are raised if constraints are violated, and the transaction is rolled back)</p> </li> </ol> <p>All of the dependency management to see which attributes have changed, logic ordering, the SQL commands to read and adjust rows, and the chaining are fully automated by the engine, based solely on the rules above.</p>"},{"location":"Logic-Operation/#creating-new-rule-types","title":"Creating New Rule Types","text":"<p>Not only can you define Python events, but you can add new rule types.  This is an advanced topic, described here</p> <p> </p>"},{"location":"Logic-Tutorial/","title":"TDD-based Approach","text":""},{"location":"Logic-Tutorial/#automation-collaboration-fast-right","title":"Automation + Collaboration: Fast, Right","text":"<p>Automated App Creation (Working Software Now) enables Collaboration to uncover Automated Rules.</p> <p>This page explains how API Logic Server Automation, coupled with an Agile (TDD - Test Driven Development) Process, can dramatically improve Time to Market and reduce Requirements Risk:</p> <ol> <li> <p>Automated App Creation: API Logic Server creates an API Logic Project with a single command.  The project implements an Admin App and underlying API.</p> </li> <li> <p>Customer Collaboration: the Admin App (Working Software, Now) drives collaboration, resulting in Features (Stories), Scenarios (tests), and Logic Designs that define how data is computed, validated, and processed (e.g., issues email or messages, auditing, etc.).</p> </li> <li> <p>Automated Logic: the Logic Design often translates directly into Executable Rules, which can be entered as customizations into the created API Logic Project.</p> </li> <li> <p>Transparency: the Behave Logic Report documents the functionality of the system: Features (Stories) and Scenarios (tests) that confirm its operation.  The report includes the underlying Rules, extending transparency to the implementation level.</p> </li> </ol> <p> </p> <p>Key Takeaway: automation drives Time to Market by providing working software rapidly; this drives agile collaboration to define systems that meet actual needs, reducing requirements risk.</p> <p>Virtuous Cycle: the collaboration uncovers Logic Designs, which can be declared as spreadsheet-like rules for API Logic Server automation.</p> <p> </p>"},{"location":"Logic-Tutorial/#resources","title":"Resources","text":"<p>After you've reviewed the logic background, use this page to learn how to use logic.  Key resources: 1. Rule Summary 2. Sample Database 3. Behave is a framework for defining and executing tests.  It is based on TDD (Test Driven Development), an Agile approach for defining system requirements as executable tests.   * Here are some details for using Behave with API Logic Server.</p> <p> </p>"},{"location":"Logic-Tutorial/#process-overview","title":"Process Overview","text":"<p>The diagram below provides more detail on the development process, further explained in the sections below.</p> <p> </p>"},{"location":"Logic-Tutorial/#1-create-api-logic-project","title":"1. Create Api Logic Project","text":"<p>API Logic Server is used once you have a preliminary database design.  Use your existing procedures for database design.  Include at least minimal test data.</p> <p>Then (presuming API Logic Server is installed), create the project with this command, using <code>venv</code> based installs:</p> <pre><code>ApiLogicServer create  --db_url= --project_name=\n</code></pre> <p>or, like this, using docker-based installs: <pre><code>ApiLogicServer create --db_url= --project_name=/localhost/ApiLogicProject\n</code></pre></p> <p> </p>"},{"location":"Logic-Tutorial/#1a-creates-admin-app","title":"1a. Creates Admin App","text":"<p>The Agile objective of collaboration is typically best-served with running screens.  The problem is, it takes quite a long time to create the API and screens to reach this point.  And this work can be wasted if there were misunderstandings.</p> <p>Ideally, User Interface creation would be automatic.</p> <p>So, the API Logic Server <code>create</code> command above builds first-cut screens, automatically from the data model.  </p> <p>The app shown below (more detail here) is suitable for initial business user collaboration (further discussed below), and basic back office data maintenance.</p> <p>You can customize it by editing a simple <code>yaml</code>file (e.g, field captions, ordering etc.)</p> <p> </p> <p>Key Takeaway: Admin App Automation enables collaboration, instantly.</p> <p> </p>"},{"location":"Logic-Tutorial/#1b-also-creates-api","title":"1b. Also creates API","text":"<p>It is not difficult to create a single endpoint API.  The problem is that it's quite a bit more work to create an endpoint for each table, with support for related data, pagination, filtering and sorting.</p> <p>Ideally, API creation would be automatic.</p> <p>So, the API Logic Server <code>create</code> command above builds such an API instantly, suitable for application integration, and creating custom User Interfaces.  The API enforces the business logic described below.</p> <p>The created project is customizable, using a standard IDE.</p> <p> </p> <p>Key Takeaway: automatic API creation, with support for related data, pagination, filtering and sorting.</p> <p> </p>"},{"location":"Logic-Tutorial/#2-collaborate-using-admin-app","title":"2. Collaborate using Admin App","text":"<p>As noted above, running screens are an excellent way to engage business user collaboration, and ensure the system meets actual user needs.  Such collaboration typically leads in two important directions, described below.</p> <p> </p>"},{"location":"Logic-Tutorial/#2a-iterate-data-model","title":"2a. Iterate Data Model","text":"<p>You may discover that the data model is incorrect (\"Wait!  Customers have multiple addresses!!\").  </p> <p>In a conventional system, this would mean revising the API and App.  However, since these are created instantly through automation, such iterations are trivial.  Just rebuild.</p> <p> </p>"},{"location":"Logic-Tutorial/#2b-define-behave-scenarios","title":"2b. Define Behave Scenarios","text":"<p>Running screens also spark insight about the Features (\"Place Order\") and Scenarios (\"Check Credit\"): \"When the customer places an order, we need to reject it if it exceeds the credit limit\".  Capture these as described below.</p> <p>Behave is designed for business user collaboration by making Features and Scenarios transparent.  Start using Behave by defining one or more <code>.feature</code> files.</p> <p>For example, see the <code>place_order.feature</code>, as tested by the <code>Bad Order: Custom Service</code> Scenario, below.</p> <p> </p>"},{"location":"Logic-Tutorial/#add-custom-service","title":"Add Custom Service","text":"<p>While the automatically-created API is a great start, you may uncover a need for a custom service.  This is easy to add - it's only about 10 lines of Python (<code>api/customize_api.py</code>), since the logic (discussed below) is enforced in the underlying data access.  For details, see here.</p> <p> </p>"},{"location":"Logic-Tutorial/#2c-logic-design","title":"2c. Logic Design","text":"<p>We now choose a scenario (e.g, <code>Bad Order</code>), and engage business users for a clear understanding of check credit.  This follows a familiar step-wise definition of terms:</p> Analyst Question Business User Answer What do you mean by Check Credit? The balance must be less than the credit limit What is the Balance? The sum of the unshipped order amount totals What is the Order AmountTotal? The sum of the Order Detail Amounts What is the Amount? Price * Quantity What is the Price? It's copied from the Product (unaffected by subsequent changes) <p>We capture in text as shown below.</p> <p>Note this \"cocktail napkin spec\" is short, yet clear.  That's because instead of diving unto unnecessary technical detail of how (such as pseudocode), it focuses on what.</p> <p> </p>"},{"location":"Logic-Tutorial/#3a-declare-logic-from-design","title":"3a. Declare Logic (from design)","text":"<p>Business Logic is the heart of the system, enforcing our business policies.  Logic consists of multi-table constraints and derivations, and actions such as sending email and messages.  A core Behave objective is to define and test such behavior.</p> <p>It's generally accepted that such domain-specific logic must require domain-specific code.  The problem is that this is: * slow (it's often nearly half the system). * opaque to business users. * painful to maintain - it's no secret that developers hate maintenance, since it's less coding than \"archaeology\".  A painful amount of time is spent reading the existing code, to understand where to insert the new logic.</p> <p>Ideally, our logic design is executable. </p> <p>So, API Logic Server provides Logic Automation, where logic is implemented as:</p> <ul> <li> <p>Spreadsheet-like rules for multi-table derivations and constraints, and</p> </li> <li> <p>Python, to implement logic not addressed in rules such as sending email or messages</p> </li> </ul> <p>So, instead of several hundred lines of code, we declare 5 rules (more details here).  </p> <p>Rules are entered in Python, with code completion, as shown below.  Observe how they exactly correspond to our design, and are executable by the API Logic Server rules engine:</p> <p>Unlike manual code, logic is declarative:</p> <ul> <li>automatically reused - re-use is usually achieved by careful design; rules make re-use automatic:</li> <li>Since rules are about the data (not a specific transaction), they automate all the transactions that touch the data (add order, delete order, change order shipped date, etc).  Even ones you might have overlooked (move order to different customer).</li> <li>Since rules are enforced as part of the API, they are automatically shared across all screens and services.</li> <li>automatically ordered - maintenance is simply altering the rules; the system computes their execution order by automatically discovering their dependencies.  No more archaeology.</li> <li>transparent - business users can read the spreadsheet-like rules.  We'll exploit this in the Behave Logic Report, described below.</li> </ul> <p> </p> <p>Key Takeaway: spreadsheet-like rules can dramatically reduce the effort for backend logic, and make it transparent</p> <p> </p> <p>Key Takeaway: keep your Logic Design high level (what not how -- think spreadsheet), and your design will often map directly to executable rules. </p> <p> </p>"},{"location":"Logic-Tutorial/#3b-coderun-behave-scenarios","title":"3b. Code/Run Behave Scenarios","text":"<p>Implement the actual scenarios (tests) in Python (<code>place_order.py</code>), using annotations (<code>@when</code>) to match scenarios and implementations.  In this project, the implementation is basically calling APIs to get old data, run transactions, and check results.</p> <p>Execute the tests using the pre-supplied Launch Configurations:</p> <ol> <li>Run Launch Configuration <code>API Logic Server</code> </li> <li>Run Launch Configuration <code>Run Behave Logic</code> </li> </ol> <p>The rules fire as transactions are run, and produce Logic Log files later used in Report Behave Logic (described below): </p> <ol> <li><code>test/api_logic_server_behave/behave.log</code> - summarizes test success / failure</li> <li><code>api_logic_server_behave/scenario_logic_logs/Bad_Order_Custom_Service.log</code> - Logic Log output.</li> <li>The code on line 161 signals the name of Logic Log</li> <li>Note the Logic Log actually consists of 2 sections:<ul> <li>The first shows each rule firing, including complete old/new row values, with indentation for <code>multi-table chaining</code></li> <li>The \"Rules Fired\" summarizes which rules actually fired, representing a confirmation of our Logic Design</li> </ul> </li> </ol> <p>You can use the debugger to stop in a test and verify results</p> <p> </p>"},{"location":"Logic-Tutorial/#4-create-behave-logic-report","title":"4. Create Behave Logic Report","text":"<p>The log files are pretty interesting: a record of all our Features and Scenarios, including transparent underlying logic.  The problem is that it's buried in some text files inside our project.</p> <p>Ideally, publishing this in a transparent manner (e.g., a wiki accessible via the Browser) would be a great asset to the team.</p> <p>So, API Logic Server provides <code>report_behave_logic.py</code> to create a Behave Logic Report - including logic - as a wiki file.</p> <p>To run it, use Launch Configuration <code>Behave Logic Report</code>:</p> <ol> <li>Reads your current <code>readme.md</code> file (text like you are reading now), and</li> <li>Appends the Behave Logic Report: by processing the files created in step 3b</li> <li>Reading the <code>behave.log</code>, and</li> <li>Injecting the <code>scenario_logic_logs</code> files</li> <li>Creates the output report as a wiki file named <code>report_behave_logic.md</code></li> </ol> <p> </p> <p>Key Takeaway: Behave makes requirements and tests transparent; rules make your logic transparent; combine them both into the Behave Logic Report.</p> <p> </p>"},{"location":"Logic-Tutorial/#process-summary-automation-collaboration","title":"Process Summary: Automation + Collaboration","text":"<p>We've seen these key points:</p> <ol> <li> <p>API Logic Server kick-starts projects with automated creation of Admin Apps.</p> </li> <li> <p>Working software promotes business user collaboration using Behave, to iterate the data model and create Logic Designs.</p> </li> <li> <p>Logic Designs are automated with spreadsheet-like rules.</p> </li> <li> <p>Behave creates an executable Test Suite.</p> </li> <li> <p>Test Suite execution creates a Behave Logic Report: your Features, Scenarios, Test Results, and the underlying rules-based logic.</p> </li> </ol> <p>Automation enables you to deliver projects faster; the Agile/Behave encourages collaboration to reduce requirements risk.</p> <p> </p>"},{"location":"Logic-Tutorial/#appendix-executing-basic-tests","title":"Appendix: Executing Basic Tests","text":"<p>In addition to Behave, you can use manual approaches for testing:</p> Click to see how to run Basic tests <p>After you've created the sample project, you can execute pre-defined tests as shown above:</p> <ol> <li>Start the Server (e.g., under VS Code, Launch Configuration ApiLogicServer)</li> <li>Open a terminal window, and <code>cd test/basic; python server_test.py go</code></li> <li>Examine the log in the Debug Console</li> </ol> <p>You can build similar tests for your systems as you would in any project, either in Python (as shown here), in shell scripts (see the supplied example), etc.</p>"},{"location":"Logic-Why/","title":"Rules: 40X, Extensible","text":"<p>Logic addresses backend multi-table constraint and derivation logic.  It's expressed in Python as rules, extensible with Python events as required.</p>"},{"location":"Logic-Why/#problem-code-explosion","title":"Problem: Code Explosion","text":"<p>In conventional approaches, such logic is nearly half the system, due to code explosion.  A typical design specification of 5 lines explodes into 200 lines of legacy code).</p> 5 Line Spec Explodes into 200 Lines of Legacy Code...  <p>Let's imagine we have a \"cocktail napkin spec\" for checking credit, shown (in blue) in the diagram below.  How might we enforce such logic?</p> <ul> <li> <p>In UI controllers - this is the most common choice.  It's actually the worst choice, since it offers little re-use, and does not apply to non-UI cases such as API-based application integration.</p> </li> <li> <p>Centralized in the server - in the past, we might have written triggers, but a modern software architecture centralizes such logic in an App Server tier.  If you are using an ORM such as SQLAlchemy, you can ensure sharing with <code>before_flush</code> events as shown below.</p> </li> </ul> <p>After we've determined where to put the code, we then have to write it.  Our simple 5 line cocktail napkin specification explodes into 200 lines of legacy code):</p> <p>It's also incredibly repetitive - you often get the feeling you're doing the same thing over and over.</p> <p>And you're right.  It's because backend logic follows patterns of \"what\" is supposed to happen. And your code is the \"how\". </p>"},{"location":"Logic-Why/#solution-rules-are-an-executable-design","title":"Solution: Rules are an Executable Design","text":"<p>API Logic -- unique to API Logic Server -- consists of Rules, extensible with Python. </p> <p>Rules typically automate over 95% of such logic, and are 40X more concise.  Rules are conceptually similar to spreadsheet cell formulas.</p> <p>For this typical check credit design (in blue), the 5 rules shown below (lines 64-79) represent the same logic as 200 lines of code:</p> See the code here <pre><code>\"\"\"\nLogic Design (\"Cocktail Napkin Design\") for User Story Check Credit\n    Customer.Balance &lt;= CreditLimit\n    Customer.Balance = Sum(Order.AmountTotal where unshipped)\n    Order.AmountTotal = Sum(OrderDetail.Amount)\n    OrderDetail.Amount = Quantity * UnitPrice\n    OrderDetail.UnitPrice = copy from Product\n\"\"\"\n\nRule.constraint(validate=models.Customer,       # logic design translates directly into rules\n    as_condition=lambda row: row.Balance &lt;= row.CreditLimit,\n    error_msg=\"balance ({row.Balance}) exceeds credit ({row.CreditLimit})\")\n\nRule.sum(derive=models.Customer.Balance,        # adjust iff AmountTotal or ShippedDate or CustomerID changes\n    as_sum_of=models.Order.AmountTotal,\n    where=lambda row: row.ShippedDate is None)  # adjusts - *not* a sql select sum...\n\nRule.sum(derive=models.Order.AmountTotal,       # adjust iff Amount or OrderID changes\n    as_sum_of=models.OrderDetail.Amount)\n\nRule.formula(derive=models.OrderDetail.Amount,  # compute price * qty\n    as_expression=lambda row: row.UnitPrice * row.Quantity)\n\nRule.copy(derive=models.OrderDetail.UnitPrice,  # get Product Price (e,g., on insert, or ProductId change)\n    from_parent=models.Product.UnitPrice)\n\n\"\"\"\n    Demonstrate that logic == Rules + Python (for extensibility)\n\"\"\"\ndef congratulate_sales_rep(row: models.Order, old_row: models.Order, logic_row: LogicRow):\n\"\"\" use events for sending email, messages, etc. \"\"\"\n    if logic_row.ins_upd_dlt == \"ins\":  # logic engine fills parents for insert\n        sales_rep = row.Employee\n        if sales_rep is None:\n            logic_row.log(\"no salesrep for this order\")\n        elif sales_rep.Manager is None:\n            logic_row.log(\"no manager for this order's salesrep\")\n        else:\n            logic_row.log(f'Hi, {sales_rep.Manager.FirstName} - '\n                            f'Congratulate {sales_rep.FirstName} on their new order')\n\nRule.commit_row_event(on_class=models.Order, calling=congratulate_sales_rep)\n</code></pre> <p> </p>"},{"location":"Logic-Why/#declare-extend-manage","title":"Declare, Extend, Manage","text":"<p>Use standard tools - standard language (Python), IDEs, and tools as described below.</p>"},{"location":"Logic-Why/#declare-python","title":"Declare: Python","text":"<p>Rules are declared in Python, using your IDE as shown above.</p>"},{"location":"Logic-Why/#code-completion","title":"Code Completion","text":"<p>Your IDE code completion services can aid in discovering logic services.  There are 2 key elements:</p> <ol> <li>Discover rules by <code>Rule.</code></li> <li>Discovery logic services made available through <code>logic_row</code></li> </ol> <p>If these aren't working, ensure your <code>venv</code> setup is correct - consult the Trouble Shooting Guide.</p> <p>You can find examples of these services in the sample <code>ApiLogicProject</code>.</p>"},{"location":"Logic-Why/#extend-python","title":"Extend: Python","text":"<p>While 95% is certainly remarkable, it's not 100%.  Automating most of the logic is of no value unless there are provisions to address the remainder.</p> <p>That provision is standard Python, provided as standard events (lines 84-100 in the first screen shot above).  This will be typically be used for non-database oriented logic such as files and messages, and for extremely complex database logic.</p>"},{"location":"Logic-Why/#manage-your-ide-sccs","title":"Manage: Your IDE, SCCS","text":"<p>The screen shot above illustrates you use your IDE (e.g., VSCode, PyCharm) to declare logic using Python, with all the familiar features of code completion and syntax high-lighting.  You can also use the debugger, and familiar Source Code Control tools such as <code>git</code>.</p>"},{"location":"Logic-Why/#debugging","title":"Debugging","text":"<p>As shown on the readme video, you can:</p> <ol> <li> <p>Use your IDE to set breakpoints in rules, then examine <code>row</code> variables</p> </li> <li> <p>Visualize logic execution with the logic log. Shown below, the console shows a line for each rule that fires, with the full row content (old/new values), indented to show multi-table logic chaining.</p> </li> </ol> <p>Note: the logic log creates long lines.  You will generally therefore want to suppress word wrap.  Most IDEs and text editors have mechanisms to do this; if you are using the console, you may want to copy/paste the log into a text editor that can suppress word wrap.  This is defaulted in <code>api_logic_server_run.py</code> for sqlite databases.</p>"},{"location":"Logic-Why/#vscode-debugging","title":"VSCode debugging","text":"<p>In VSCode, set <code>\"redirectOutput\": true</code> in your Launch Configuration.  This directs logging output to the Debug Console, where it is not word-wrapped (word-wrap obscures the multi-table chaining).</p> <p> </p>"},{"location":"Logic-Why/#key-aspects-of-logic","title":"Key Aspects of Logic","text":"<p>While conciseness is the most immediately obvious aspect of logic, rules provide deeper value as summarized below.</p> Concept Rule Automation Why It Matters Re-use Automatic re-use over all resources and actions Velocity / Conciseness: Eliminates logic replication over multiple UI controllers or services. Invocation Automatic logic execution, on referenced data changes Quality: Eliminates the \"code was there but not called\" problem.Rules are active, transforming \u2018dumb\u2019 database objects into smart business objects Execution Order Automatic ordering based on dependencies Maintenance: Eliminates the \"where do I insert this code\" problem - the bulk of maintenance effort. Dependency Management Automatic chaining Conciseness: Eliminates the code that tests \"what's changed\" to invoke relevant logic Persistence Automatic optimization Performance: Unlike Rete engines which have no concept of old values, transaction logic can prune rules for unchanged data, and optimize for adjustment logic based on the difference between old/new values.  This can literally result in sub-second performance instead of multiple minutes, and can be tuned without recoding.. <p>See also the FAQs.</p>"},{"location":"Logic-Why/#automatic-reuse","title":"Automatic Reuse","text":"<p>Just as a spreadsheet reacts to inserts, updates and deletes to a summed column, rules automate adding, deleting and updating orders. This is how 5 rules represent the same logic as 200 lines of code.</p> <p>Our cocktail napkin spec is really nothing more than a set of spreadsheet-like rules that govern how to derive and constrain our data. \u00a0And by conceiving of the rules as associated with the data (instead of a UI button), rules conceived for Place Order automatically address these related transactions:</p> <ul> <li>add order</li> <li>Ship Order illustrates cascade, another form of multi-table logic</li> <li>delete order</li> <li>assign order to different customer</li> <li>re-assign an Order Detail to a different Product, with a different quantity</li> <li>add/delete Order Detail</li> </ul>"},{"location":"Logic-Why/#scalability-prune-and-optimize","title":"Scalability: Prune and Optimize","text":"<p>Scalability requires more than clustering - SQLs must be pruned and optimized.  For example, the balance rule:</p> <ul> <li>is pruned if only a non-referenced column is altered (e.g., Shipping Address)</li> <li>is optimized into a 1-row adjustment update instead of an expensive SQL aggregate</li> </ul> <p>For more on how logic automates and optimizes multi-table transactions, click here.</p>"},{"location":"Logic-Why/#automatic-ordering","title":"Automatic Ordering","text":"<p>The system parses your derivation rules to determine dependencies, and uses this to order execution.  This occurs once per session on activation, so rule declaration changes automatically determine a new order.  </p> <p>This is significant for iterative development and maintenance, eliminating the bulk of time spent determining where do I insert this new logic.</p>"},{"location":"Logic-Why/#control-for-actions-and-constraints","title":"Control for actions and constraints","text":"<p>Constraint and action rules are executed in their declaration order.</p>"},{"location":"Logic/","title":"Rules","text":""},{"location":"Logic/#rules-summary","title":"Rules Summary","text":"<p>The table shows excerpts only; see the <code>nw</code> sample for full syntax.</p> Rule Summary Example Notes Constraint Boolean function must be Trueelse transaction rolled back <code>row.Balance &lt;= row.CreditLimit</code><code>row.Salary &gt;= Decimal('1.20') * old_row.Salary</code> Multi-field<code>old_row</code> Formula Function computes column value <code>row.UnitPrice * row.Quantity</code><code>row.OrderHeader.ShippedDate</code> lambda, or functionParent <code>(OrderHeader)</code> references Sum Derive parent-attribute as sum of designated child attribute; optional child qualification <code>Rule.sum(derive=Customer.Balance, as_sum_of=Order.AmountTotal,where=lambda row: row.ShippedDate is None)</code> Parent attribute can be hybrid (virtual)scalable: pruning, adjustment Count Derive parent-attribute as count of child rows; optional child qualification <code>Rule.sum(derive=Customer.Balance, as_sum_of=Order.AmountTotal,where=lambda row: row.ShippedDate is None)</code> Parent attribute can be hybrid (virtual)scalable: pruning, adjustment Copy Child value set from Parent <code>OrderDetail.ProductPrice = copy(Product.Price)</code> Unlike formula references, parent changes are not propagatede.g, Order totals for Monday are not affected by a Tuesday price increase Event Python Function on insert, call <code>congratulate_sales_rep</code> See Extensibility for a information on early, row and commit events Parent Check Ensure Parent row exists Orders must have a Customer See Referential Integrity Allocation Allocate a provider amount to recipients allocate a payment to outstanding orders See Allocation for an example Copy Row Create child row by copying parent audit Employee Salary changes to EmployeeAudit See Rule Extensibility <p> </p>"},{"location":"Logic/#learning-rules","title":"Learning Rules","text":"<p>Inside the larger process above, here is the best way to learn how to use rules:</p> <ol> <li> <p>Rule Summary: there are a small number of rules, since their power lies in chaining (duplicated below)</p> </li> <li> <p>Be aware of the rule patterns, duplicated below</p> </li> <li> <p>Use the case study approach to learn about using rules, by exploring the examples in the report, below.</p> </li> <li> <p>Be aware of Rule Extensibility.</p> </li> </ol> <p> </p>"},{"location":"Logic/#case-study","title":"Case Study","text":"<p>The best way to learn the rules is by a Case Study approach:</p> <ol> <li> <p>See the Behave Logic Report</p> </li> <li> <p>On each, open the disclosure box: \"Tests - and their logic - are transparent.. click to see Logic\"</p> </li> </ol>"},{"location":"Logic/#rule-patterns","title":"Rule Patterns","text":"Pattern Notes Example Chain Up parent sums and counts mean that child row changes can adjust parents Derive Balance Chain Down child copy and parent references mean that parent row changes can cascade to children Ship Order Constrain a Derived Result constraints may require derived values Balance &lt; creditLimit Auditing Note the Copy Row rule Salary Audit old_row useful for state transition logic Meaningful Raise"},{"location":"Manage-GitHub/","title":"GitHub and Codespaces","text":"<p>API Logic Projects are standard, and so are their GitHb / IDE operations.  A typical flow is illustrated below.</p> <p> </p>"},{"location":"Manage-GitHub/#create-an-api-logic-server-project","title":"Create an API Logic Server Project","text":"Create Project (here using Docker)<pre><code>val@Vals-MBP-16 dockers % cd ~/dev/servers/install/ApiLogicServer/dockers; docker run -it --name api_logic_server --rm --net dev-network -p 5656:5656 -p 5002:5002 -v ${PWD}:/localhost apilogicserver/api_logic_server\n\n\nWelcome to API Logic Server, 5.03.27\n\n     $ printenv       for OS context       information -- Debian GNU/Linux 11 \\n \\l\n$ ApiLogicServer for API Logic Server information\n\napi_logic_server@bc1bc88dc6ce:~$ ApiLogicServer create\n\nWelcome to API Logic Server, 5.03.27\n\nProject to create [/localhost/ApiLogicProject]: \nSQLAlchemy Database URI [default = nw.sqlite, ? for help]: \n... logging\napi_logic_server@bc1bc88dc6ce:~$ exit  # exit, to facilitate use of Desktop tools (git cli, IDE, etc)\n</code></pre>"},{"location":"Manage-GitHub/#save-api-logic-project-to-github","title":"Save API Logic Project to GitHub","text":"<p>Create a project on your GitHub account (here called <code>ApiLogicProject</code>) in the usual manner.</p> <ol> <li>Create your project on GitHub<pre><code>*  Don't add files yet to avoid merge\n</code></pre> <ol> <li>Exit the Docker container as shown above</li> <li>Initialize your project for git and push it in the usual manner:</li> </ol> </li> </ol> Save Created API Logic Server Project to GitHub<pre><code>git init\n# git branch -m main\ngit add --all\ngit commit -m 'First commit'\ngit remote add origin https://github.com/valhuber/ApiLogicProject.git\ngit remote -v\ngit push origin main\n</code></pre>"},{"location":"Manage-GitHub/#customize-the-project","title":"Customize the Project","text":"<p>Use your IDE (or Code Editor) to customize the project.  Standard GitHub operations are provided in most IDEs, and work with API Logic Server Projects.</p>"},{"location":"Manage-GitHub/#using-your-ide","title":"Using your IDE","text":"<p>This is described under the Express Install.</p>"},{"location":"Manage-GitHub/#using-codespaces","title":"Using Codespaces","text":"<p>CodeSpaces is a GitHub project that enables you to use VSCode in your Browser to develop on rapidly deployed docker containers.  It's quite remarkable.  It is entirely interoperable with VSCode operations on your local machine.</p> <p>Here are some instructions you can use to explore API Logic Server running under CodeSpaces.</p> <p>1. No signup required - use your GitHub account</p> <p>2. Load the ApiLogicProject from GitHub</p> <p>To access this GitHub project with Codespaces</p> <ol> <li>Open this page in a new window, and </li> <li>Click Open &gt; Codespaces as shown below:</li> </ol> <p>You will now see the sample project - running in VSCode, in the Browser.  But that's just what you see...</p> <p>Behind the scenes, Codespaces has requisitioned a cloud machine, and loaded your project - with a complete development environment - Python, your dependencies, git, etc.  </p> <p>You are attached to this machine in your Browser, running VSCode.</p> <p> Pretty remarkable.</p> <p>3. Add and Configure a Port</p> <ul> <li>Referring to the diagram below, make the port public</li> </ul> <p>4. Start the Server</p> <ul> <li>Use the pre-defined Launch Configuration</li> </ul> <p>5. Start the Browser</p> <ul> <li>Click the globe, as shown above.  This should start your Browser, and the links on the left (Customer etc) should return data.</li> </ul> If errors, use this procedure <p>The above procedure is simplified, based on some assumptions about Codespaces.  If the Browser fails to launch, try the following for explicit specification of the forwarded port:</p> <p>4. Configure the pre-created <code>Codespaces-ApiLogicServer</code> launch configuration (see above)</p> <p>5. Start the Server using the provided Launch Configuration = <code>Codespaces-ApiLogicServer</code></p> <p>6. Open the Browser</p> <p>Click the globe, as shown above.  This should start your Browser, and the links on the left (Customer etc) should return data.</p>"},{"location":"Project-Builders/","title":"Builders","text":""},{"location":"Project-Builders/#user-extensible-creation","title":"User Extensible Creation","text":"<p>The <code>extended_builder</code> option enables you to extend the creation process. It is intended to accommodate cases where DBMSs provide proprietary features - such as Table Valued Functions (TVFs) - that should be exposed as APIs.</p> <p>Install as usual, and create your project using the <code>extended_builder</code> option, e.g:</p> <pre><code>ApiLogicServer run --db_url='mssql+pyodbc://sa:Posey3861@localhost:1433/SampleDB?driver=ODBC+Driver+17+for+SQL+Server?trusted_connection=no' \\\n   --extended_builder=extended_builder.py \\\n   --project_name=TVF\n</code></pre> <p>Or, use the default extended_builder:</p> <pre><code>ApiLogicServer run --db_url='mssql+pyodbc://sa:Posey3861@localhost:1433/SampleDB?driver=ODBC+Driver+17+for+SQL+Server?trusted_connection=no' \\\n   --extended_builder='*' \\\n   --project_name=TVF\n</code></pre> <p>to designate a file that implements your builder. After the creation process, the system will invoke <code>extended_builder(db_url, project_directory)</code> so you can add / alter files as required.</p> <p>Full automation for specific DBMS features was considered, but could not conceivably accommodate all the DBMS features that might be desired. We therefore provide this extensible automation approach.</p> <p>Let's illustrate the use of extensible automation with this example.  Create the sample project as follows:</p> <ol> <li>Acquire this sql/server docker database</li> <li>Create the project</li> </ol> <pre><code>docker run -it --name api_logic_server --rm -p 5656:5656 -p 5002:5002 -v ${PWD}:/localhost apilogicserver/api_logic_server\n\nApiLogicServer create --project_name=/localhost/sqlserver-types --db_url=mssql+pyodbc://sa:Posey3861@localhost:1433/SampleDB?driver=ODBC+Driver+17+for+SQL+Server?trusted_connection=no\n</code></pre> <p>This uses an example extended builder can be found here. You can copy this file to a local directory, alter it as required, and specify its location in the CLI argument above. It is loosely based on this example.</p> <p>The interface to ApiLogicServer requires that you provide an <code>extended_builder(db_url, project_directory)</code> function, like this (the rest is up to you):</p> <pre><code>def extended_builder(db_url, project_directory):\n    \"\"\" called by ApiLogicServer CLI -- scan db_url schema for TVFs, create api/tvf.py\n            for each TVF:\n                class t_&lt;TVF_Name&gt; -- the model\n                class &lt;TVF_Name&gt;   -- the service\n        args\n            db_url - use this to open the target database, e.g. for meta data\n            project_directory - the created project... create / alter files here\n\n    \"\"\"\nprint(f'extended_builder.extended_builder(\"{db_url}\", \"{project_directory}\"')\ntvf_builder = TvfBuilder(db_url, project_directory)\ntvf_builder.run()\n</code></pre> <p>This particular example creates this tvf file in the api folder.</p> <p>Updates <code>api/customize_api.py</code> to expose it, as shown below:</p> <p></p> <p>This example illustrates the extended builder approach; the resultant services runs as shown below.</p> <p>It does not deal with many data types.</p> <p>It generates Swagger, with arguments:</p> <p></p> <p>You can run it with this cURL:</p> <pre><code>curl -X POST \"http://localhost:5656/udfEmployeeInLocation/api/udfEmployeeInLocation\" -H  \"accept: application/vnd.api+json\" -H  \"Content-Type: application/json\" -d \"{  \\\"location\\\": \\\"Sweden\\\"}\"\n</code></pre> <p>returns the expected data:</p> <pre><code>{\n\"result\": [\n2,\n\"Nikita\",\n\"Sweden\"\n]\n}\n</code></pre>"},{"location":"Project-DevOps/","title":"DevOps","text":"<p>When you create an ApiLogicProject, the system creates a project like this, pre-configured for Developer Oprations.  See the notes below.</p>"},{"location":"Project-DevOps/#1-dev-container","title":"1. Dev Container","text":"<p>You can customize projects using a local install, or a container (see the Install Guide).  Container support includes the <code>.devcontainer</code> folder, and the <code>devops/docker/ForVSCode.dockerfile</code>.  You should not need to alter these.</p> <p>In addition to desktop-based development, these enable Codespaces support (see the Express Eval).</p> <p> </p>"},{"location":"Project-DevOps/#2-deployment-container","title":"2. Deployment Container","text":"<p>A common approach to deployment is to create a container for your project.  The <code>build-container.dockerfile</code> is created for this purpose.</p> <p>You will need to edit it to reflect your project and Docker account names.</p> <p> </p>"},{"location":"Project-DevOps/#3-launch-configurations","title":"3.  Launch Configurations","text":"<p>These are created so you can run the API Logic Server, run tests, etc.  You should not need to modify these, but you may wish to extend them.</p> <p> </p>"},{"location":"Project-DevOps/#4-python-venv","title":"4. Python <code>venv</code>","text":"<p>The creation process builds a standard <code>requirements.txt</code> file.  You can create your <code>venv</code> with this, and (if your IDE does not provide it) the <code>venv.sh/ps1</code> files to initialize your <code>venv</code>.</p> <p> </p>"},{"location":"Project-DevOps/#5-github","title":"5. GitHub","text":"<p>Your project includes a suggested <code>.gitignore</code> file (alter as desired).  You can use git in standard ways to push and pull changes.  Some IDEs support the initial GitHub creation (see VSCode publish, or you can use the <code>git_push_new_project.sh</code> file. </p> <p> </p>"},{"location":"Project-DevOps/#6-env-support","title":"6. <code>env</code> support","text":"<p>Most deployment procedures discourage database names / passwords to be in project files and GitHub, instead preferring to specify these via <code>env</code> variables.  The <code>config.py</code> file is designed to use the environment variable <code>SQLALCHEMY_DATABASE_URI</code> if it is provided.</p>"},{"location":"Project-Env/","title":"Virtual Environment","text":"<p>This section applies only to <code>pip</code> installs.  Docker based installs eliminate such environment issues, and are therefore recommended.</p> <p>Important: in addition to Python environment, there are other configuration settings to consider as described in the Quick Start.</p>"},{"location":"Project-Env/#per-project-venv","title":"Per-project <code>venv</code>","text":"<p>You created a virtual environment when you installed ApiLogicServer.  This <code>venv</code> will work for all of your created ApiLogicServer projects, or you can use a per-project <code>venv</code>, as follows.</p> <p>The created project contains a <code>requirements.txt</code> used to create a virtual environment. You can create it in the usual manner:</p> <p><pre><code>cd ApiLogicProject\npython3 -m venv venv       # may require python -m venv venv\nsource venv/bin/activate   # windows venv\\Scripts\\activate\npython3 -m pip install -r requirements.txt\n</code></pre> </p>"},{"location":"Project-Env/#shared-venv","title":"Shared <code>venv</code>","text":"<p>If you wish to share a <code>venv</code> over multiple projects, use Settings &gt; Python: Venv Path, and specify a directory containing <code>venv</code> directories (e.g, where you installed API Logic Server).</p> <p> </p>"},{"location":"Project-Env/#venv_setup-shortcut-setup-procedures","title":"<code>venv_setup</code> - shortcut setup procedures","text":"<p>Ss of release 5.02.10, projects are created with a <code>venv_setup</code> directory which may be helpful in establishing and verifying your Python environment.  For more information, see the Trouble Shooting Guide.</p> <p> </p>"},{"location":"Project-Env/#notes","title":"Notes","text":""},{"location":"Project-Env/#issues-with-pip","title":"Issues with <code>pip</code>","text":"<p>The install sometimes fails due on machines with an older version of <code>pip</code>.  If you see a message suggesting you upgrade  <code>pip</code> , do so.</p>"},{"location":"Project-Env/#vscode-may-fail-to-find-your-venv","title":"VSCode may fail to find your <code>venv</code>","text":"<p>If VSCode does not find your <code>venv</code>, you can specify it manually using <code>Python: Select Interpreter</code></p> <p>For more information, see Work with Environments.</p>"},{"location":"Project-Execution/","title":"Execution - Hosts and Ports","text":""},{"location":"Project-Execution/#starting-the-server","title":"Starting the Server","text":""},{"location":"Project-Execution/#via-the-ide","title":"Via the IDE","text":"<p>As described in the Quick Start, Run Configurations are provided to start the server in your IDE.</p> <p> </p>"},{"location":"Project-Execution/#directly","title":"Directly","text":"<p>Recall that you execute your API Logic Project by starting the server, like this:</p> <p><pre><code>ApiLogicServer (venv)&gt; cd my_new_project\nmy_new_project(venv)&gt; python api_logic_server_run.py\n</code></pre> Note this presumes you have activated your <code>venv</code>.  The system also provides shell scripts you can use: <pre><code>sh run.sh  # windows - use run.ps1\n</code></pre></p> <p>Then, to run the Admin App and Swagger:</p> <p>Run your browser at</p> <pre><code>http://localhost:5656/\n</code></pre> <p>Or, to run the Basic Web App:</p> <pre><code>ApiLogicServer run-ui [--host=myhost --port=myport]  # or...\nmy_new_project&gt; python ui/basic_web_app/run.py [host port]\n</code></pre> <p>Try http://localhost:5002/, http://0.0.0.0:5002/</p> <p> </p>"},{"location":"Project-Execution/#using-the-run-script","title":"Using the Run script","text":"<p>Alternatively, you can start the server using the run script, e.g.:</p>"},{"location":"Project-Execution/#stopping-the-server","title":"Stopping the server","text":"<p>You can stop the server by cancelling it, or via an API:</p> <pre><code>http://localhost:5656/stop?msg=API stop - Stop API Logic Server\n</code></pre> <p>This can be useful in testing if you don't have access to the server console.  The <code>msg</code> parameter is optional.</p> <p> </p>"},{"location":"Project-Execution/#host-and-port-handling","title":"Host and Port Handling","text":"<p>ApiLogicServer attempts to avoid port conflicts.  These can arise from:</p> <ul> <li> <p>Common use of 8080</p> </li> <li> <p>Mac use of 5000</p> </li> </ul> <p>To avoid conflicts, ports are defaulted as follows:</p> For Port ApiLogicServer <code>5656</code> Basic Web App <code>5002</code> <p>Hosts are defaulted as follows:</p> Installed as Basic Web App Host Docker <code>0.0.0.0</code> Local Install <code>localhost</code> <p> </p>"},{"location":"Project-Execution/#create-time-overrides","title":"Create time overrides","text":"<p>You can override these defaults when you create the application like this:</p> <pre><code>ApiLogicServer create --project_name=~/dev/servers/api_logic_server \\\n--host=myhost --port=myport --swagger_host=mycloud\n</code></pre> <p> </p>"},{"location":"Project-Execution/#runtime-overrides","title":"Runtime overrides","text":"<p>When you run created applications, you can provide arguments to override the defaults.  Discover the arguments using <code>--help</code>:</p> <p><pre><code>(venv) val@Vals-MBP-16 ApiLogicProject % python api_logic_server_run.py -h\n\nAPI Logic Project Starting: /Users/val/dev/servers/ApiLogicProject/api_logic_server_run.py\nusage: api_logic_server_run.py [-h] [--port PORT] [--flask_host FLASK_HOST] [--swagger_host SWAGGER_HOST]\n[--swagger_port SWAGGER_PORT] [--http_type HTTP_TYPE] [--verbose VERBOSE]\n[--create_and_run CREATE_AND_RUN]\n[flask_host_p] [port_p] [swagger_host_p]\n\npositional arguments:\n  flask_host_p\n  port_p\n  swagger_host_p\n\noptions:\n  -h, --help                       show this help message and exit\n--port PORT                      port (Flask) (default: 5656)\n--flask_host FLASK_HOST          ip to which flask will be bound (default: localhost)\n--swagger_host SWAGGER_HOST      ip clients use to access API (default: localhost)\n--swagger_port SWAGGER_PORT      swagger port (eg, 443 for codespaces) (default: 5656)\n--http_type HTTP_TYPE            http or https (default: http)\n--verbose VERBOSE                for more logging (default: False)\n--create_and_run CREATE_AND_RUN  system use - log how to open project (default: False)\n(venv) val@Vals-MBP-16 ApiLogicProject % </code></pre> These are used for Codespaces support</p> <p> </p> <p>Notes:</p> <ul> <li><code>host</code> is the flask-host, which maps to the IP address of the interface to which flask will be bound (on the machine itself</li> <li><code>swagger_host</code> maps to the ip address as seen by the clients</li> </ul> <p>For example, 127.0.0.1 (localhost) or 0.0.0.0 (any interface) only have meaning on your own computer. Also, it's possible to map hostname-&gt;IP DNS entries manually in /etc/hosts, but users on other computers are not aware of that mapping.</p> <p> </p>"},{"location":"Project-Execution/#production-deployment","title":"Production Deployment","text":"<p>As noted in the gunicorn documentation:</p> <p>While lightweight and easy to use, Flask\u2019s built-in server is not suitable for production as it doesn\u2019t scale well. </p>"},{"location":"Project-Execution/#gunicorn","title":"gunicorn","text":"<p>You can run API Logic Server servers under gunicorn.  To use the default API Logic Server ports:</p> <pre><code>gunicorn api_logic_server_run:flask_app -w 4 -b localhost:5656\n</code></pre> <p>Or, to use the default gunicorn ports:</p> <pre><code>gunicorn api_logic_server_run:flask_app -w 4\n</code></pre> <p>You will also need to:</p> <ol> <li>Update the default server/port settings in <code>api_logic_server_run.py</code></li> <li>Start your browser at http://127.0.0.1:8000</li> </ol>"},{"location":"Project-Execution/#pythonanywhere","title":"PythonAnywhere","text":"<p>Please see the Install Instructions for information on PythonAnywhere.</p>"},{"location":"Project-Rebuild/","title":"Rebuild","text":""},{"location":"Project-Rebuild/#preserving-customizations-over-iterations","title":"Preserving Customizations over Iterations","text":"<p>Your customizations are made to the files in the following sections.  These are separate files from the core model and api files, so that (if you wish) you can recreate the system from a revised schema, then simply copy over the files described below.</p> <p> </p>"},{"location":"Project-Rebuild/#rebuilding","title":"Rebuilding","text":"<p>Ignoring the boxes labeled \"rebuild\", the key elements of the creation process are illustrated below:</p> <ul> <li> <p>the system reads the database schema to create <code>models.py</code></p> </li> <li> <p><code>models.py</code> drives the creation process</p> </li> <li> <p>you customize the created project, mainly by altering the files on the far right</p> </li> </ul> <p>As shown in the diagram, creation is always driven from <code>models.py.</code>  Models differ from physical schemas in important ways:</p> <ul> <li> <p>the system ensure that class names are capitalized and singular</p> </li> <li> <p>there are good reasons to customize <code>models.py</code>:</p> </li> <li>to add foreign keys missing in the database - these are critical for multi-table apis and applications</li> <li>to provide better naming</li> </ul> <p>You can rebuild your project, preserving customizations (including any additional files you have created).  You have 2 alternatives, depending on where you choose the \"source of truth\" for your database:</p> Source of Truth Means Use <code>rebuild</code> option Database The schema is the source of truthIt includes all the foreign keys <code>rebuild-from-datatabase:</code> rebuilds the files shown in blue and purple. Model Model is the source of truthUse SQLAlchemy services to drive changes into the database <code>rebuild-from-model:</code> rebuilds the files shown in blue <p>Note that <code>ui/admin/admin.yaml</code> is never overwritten (the dotted line  means it is written on only on <code>create</code> commands).  After rebuilds, merge the new <code>ui/admin/admin-created.yaml</code> into your customized <code>admin.yaml.</code></p> <p> </p>"},{"location":"Project-Rebuild/#api-and-admin-app-merge-updates","title":"API and Admin App merge updates","text":"<p>As of release 5.02.03, <code>rebuild</code> services provide support for updating customized API and Admin:</p> System Object Support API <code>api/expose_api_models_created.py</code> created with new <code>database/models.py</code> classes Admn App <code>ui/admin/admin-merge.yaml</code> is the merge of <code>ui/admin/admin.yaml</code> and new <code>database/models.py</code> classes <p>Review the altered files, edit (if required), and copy them over the original files.</p> <p> </p>"},{"location":"Project-Structure/","title":"Structure","text":""},{"location":"Project-Structure/#project-structure","title":"Project Structure","text":"<p>When you create an ApiLogicProject, the system creates a project like this that you customize in your API:</p> <p>Explore the Tutorial Project, and observe that the projects are rather small.  That is because the syste creates models that define what, not now.  Explore the project and you will find it easy to understand the API, data model, app and logic files.</p> <p>Note the entire project is file-based, which makes it easy to perform typical project functions such as source control, diff, merge, code reviews etc.</p>"},{"location":"Project-Structure/#customizing-apilogicprojects","title":"Customizing ApiLogicProjects","text":"<p>You will typically want to customize and extend the created project.  Edit the files described in the subsections below.</p> <p>The 2 indicated files in the tree are the Python files that run for the Basic Web App and the API Server.</p> <p>Projects are created from a system-supplied prototype.  You can use your own prototype from git (or a local directory) using the <code>from_git</code> parameter.</p>"},{"location":"Project-Structure/#project-architecture","title":"Project Architecture","text":"<p>ApiLogicServer creates a standard Flask-based 3-tier architecture:</p> <ul> <li> <p>Flask enables you to write custom web apps, and custom api end points</p> <ul> <li>ApiLogicServer automatically creates an Admin App using safrs-react-admin, useful for back-office admin access and prototyping</li> </ul> </li> <li> <p>SAFRS provides the API, which you can use to support mobile apps and internal / external integration</p> </li> <li> <p>SQLAlchemy provides data access.</p> </li> <li> <p>Logic Bank listens for updates, and applies your declared logic, for both API and web app updates.</p> </li> </ul> <p> </p>"},{"location":"Sample-Database/","title":"Sample Database","text":"<p>The sample application (run it here) is created from the database shown below (tutorial here).  It is an extension to Northwind that includes additional relationships:</p> <ul> <li>multiple relationships between Department / Employee</li> <li>multi-field relationships between Order / Location</li> <li>self-relationships in Department</li> </ul>"},{"location":"Sample-Database/#northwind-with-logic","title":"Northwind with Logic","text":"<p>The integrity of this database is enforced with this logic.</p>"},{"location":"Sample-Database/#standard-northwind","title":"Standard Northwind","text":"<p>Specify your database as <code>nw-</code> to use the same database, but without pre-installed customizations for the API and Logic.</p>"},{"location":"Security-Activation/","title":"Activation","text":"<p>Except for the sample project, projects are created with security disabled.  So, a typical project creation sequence might be:</p> <ol> <li> <p>Create your project without security</p> <ul> <li>Verify connectivity, API operation, Admin App operation, etc.</li> </ul> </li> <li> <p>Activate Security</p> </li> </ol> <p>This page describes how to activate security.</p> <p> </p>"},{"location":"Security-Activation/#pre-configured-sample","title":"Pre-configured Sample","text":"<p>Security is enabled when building the sample app.  Explore / test it as described in Authorization.</p> <p> </p>"},{"location":"Security-Activation/#automatic-sqlite-auth-provider","title":"Automatic - sqlite Auth Provider","text":"<p>Activate security using the <code>ApiLogicServer add-auth</code> command.</p> <p>Suggestion: you can test it using the sample without customizations, as follows:</p> <pre><code>ApiLogicServer create --project_name=nw --db_url=nw-\ncd nw\nApiLogicServer add-auth\n</code></pre> <p>Test it as described in Authorization.</p> <p>Note the use of <code>db_url=nw-</code> to create the sample, without customization or security.</p> <p>If you are new to API Logic Server, this is a good way to observe basic project creation.  You can use the <code>ApiLogicServer add-cust</code> command to add customizations and security after you explore the basic project.</p> <p>This command will:</p> <ol> <li>Add the sqlite database and models, using <code>ApiLogicServer add-db --db_url=auth --bind_key=authentication</code><ul> <li>This uses Multi-Database Support for the sqlite authentication data</li> </ul> </li> <li>Add User.Login endpoint to the User model</li> <li>Set <code>SECURITY_ENABLED</code> in <code>config.py</code></li> <li>Add Sample authorizations to security/declare_security.py</li> </ol> <p> </p>"},{"location":"Security-Activation/#manual-configuration","title":"Manual Configuration","text":"<p>To configure security:</p> <ol> <li>Declare Grants<ul> <li>Paste into your <code>security/declare_security.py</code> from this sample</li> </ul> </li> <li>Set <code>SECURITY_ENABLED = True</code> in config.py</li> <li>Configure your Authentication-Provider, using your own Authentication-Provider,</li> </ol> <p> </p>"},{"location":"Security-Activation/#appendix-internals","title":"Appendix: Internals","text":"<p>The Security Manager and sqlite Authentication-Provider are built into created projects from the system's prototype project.</p>"},{"location":"Security-Authentication-Provider/","title":"Authentication Provider","text":"<p>Authentication Providers are developer-supplied code, called by the system during login.  It is passed the id/password, and returns a user row and list of roles.</p> <p>The underlying presumptions:</p> <ol> <li> <p>Multiple systems will share the same authentication data, so this data will be separate from each application</p> </li> <li> <p>Organizations will utilize a wide variety of techniques to maintain authorization data (databases, LDAP, AD etc), so an open \"interface\" approach is required.</p> </li> </ol> <p> </p>"},{"location":"Security-Authentication-Provider/#abstract_authentication_provider","title":"Abstract_Authentication_Provider","text":"<p>To ensure that Authentication-Providers implement the api expected by the system, you should inherit from this class.</p> <p> </p>"},{"location":"Security-Authentication-Provider/#configure-authentication-provider","title":"Configure Authentication Provider","text":"<p>You select the authentication_provider in <code>config.py</code>:</p> <pre><code>    from security.authentication_provider.sql.auth_provider import Authentication_Provider\n    SECURITY_PROVIDER = Authentication_Provider\n</code></pre> <p>You can define new authentication providers, e.g. for Active Directory, LDAP, etc.</p> <p> </p>"},{"location":"Security-Authentication-Provider/#memory-auth-provider","title":"Memory Auth Provider","text":"<p>Provided for quick prototyping.</p> <p> </p>"},{"location":"Security-Authentication-Provider/#sqlite-auth-provider","title":"sqlite Auth Provider","text":"<p>This provided to demonstrate a typical sql-based Authentication-Provider.</p> <p> </p>"},{"location":"Security-Authentication-Provider/#authentication-db","title":"Authentication DB","text":"<p>Note this uses Multi-DB Support.  </p> <p>The database file is <code>security/authentication_provider/sql/authentication_db.sqlite</code>.  This database includes:</p> <ul> <li>Users</li> <li>Roles (<code>Role</code> and <code>UserRole</code>)</li> <li>User.client_id, to test multi-tenant (the test user is aneu).</li> </ul> <p> </p>"},{"location":"Security-Authentication/","title":"Authentication","text":"<p>Once you have activated security, the system require you to login to obtain a token, and provide this token on subsequent APIs.  This page describes how to login and provide a token.</p> <p> </p>"},{"location":"Security-Authentication/#obtain-a-token","title":"Obtain a token","text":"<p>The sample test apps obtain a token as shown here.  This is also illustrated in the swagger section, below.</p> <p> </p>"},{"location":"Security-Authentication/#swagger-authentication","title":"Swagger Authentication","text":"<p>Once you activate, tokens are required, including in Swagger.  You can obtain a token and authenticate as described below for the sqlite authentication-provider:</p> <ol> <li>Access the User Login service</li> <li>Use the Try it now feature as shown below</li> <li>Copy the token value for use in the next step</li> </ol> <p>At the top of Swagger, locate the Authenticate button.  Copy the token, precede it with Bearer, and login like this:</p> <p> </p>"},{"location":"Security-Authentication/#provide-token-in-header","title":"Provide token in header","text":"<p>The sample test apps use this token on API calls as shown here.</p>"},{"location":"Security-Authorization/","title":"Authorization","text":""},{"location":"Security-Authorization/#declaring-logic","title":"Declaring Logic","text":"<p>Analogous to logic declarations, Developers declare filters for users' roles (role-based access control).  A user can have multiple roles; a users' filters are anded together.</p> <p>Roles are typically defined elsewhere (LDAP, AD, external SQL database), and accessed at runtime via the Authentication-Provider.  Roles simplify administration, since there are typically many fewer roles that users, and they are less subject to change.  You may elect to define the roles in your code for code completion, as shown below.</p> <p> </p>"},{"location":"Security-Authorization/#sample","title":"Sample","text":"<p>This is illustrated in the sample application <code>security/declare_security.py</code>:</p> <pre><code>from security.system.security_manager import Grant, Security\nfrom database import models\nimport safrs\n\ndb = safrs.DB\nsession = db.session\n\n\nclass Roles():\n\"\"\" Define Roles here, so can use code completion (Roles.tenant) \"\"\"\n    tenant = \"tenant\"\n    renter = \"renter\"\n\nGrant(  on_entity = models.Category,    # multi-tenant example\n        to_role = Roles.tenant,\n        filter = models.Category.Client_id == Security.current_user().client_id)  # User table attributes\n\nGrant(  on_entity = models.Category,\n        to_role = Roles.renter,\n        filter = models.Category.Id == 2)\n</code></pre> <p>You can test it via the Admin App, or via cURL.</p> <p> </p>"},{"location":"Security-Authorization/#admin-app","title":"Admin App","text":"<p>Click <code>Cateogory</code> in the Admin App:</p> <p> </p>"},{"location":"Security-Authorization/#curl","title":"cURL","text":"<p>As shown in the first diagram above, you can also test with this cURL command:</p> <pre><code>curl -X 'GET' \\\n'http://localhost:5656/api/Category/?fields%5BCategory%5D=Id%2CCategoryName%2CDescription&amp;page%5Boffset%5D=0&amp;page%5Blimit%5D=10&amp;sort=id' -H 'accept: application/vnd.api+json' -H 'Content-Type: application/vnd.api+json'\n</code></pre>"},{"location":"Security-Overview/","title":"Overview","text":"<p>Security is under active development.  You can examine the Prototype in the Preview Version.  We are seeking design partners, so contact us if you'd like to discuss - we'd love to hear from you!</p>"},{"location":"Security-Overview/#terms","title":"Terms","text":"<ul> <li>Authentication: a login function that confirms a user has access, usually by posting credentials and obtaining a JWT token identifying the users' roles.</li> <li>Authorization: controlling access to row/columns based on assigned roles.</li> <li>Role: in security, users are assigned one or many roles.  Roles are authorized for access to data, potentially down to the row/column level.</li> </ul>"},{"location":"Security-Overview/#overview","title":"Overview","text":"<p>The overall flow is shown below, where:</p> <ul> <li>Green - represents developer responsibilities</li> <li>Blue - System processing</li> </ul>"},{"location":"Security-Overview/#developers-configure-security","title":"Developers Configure Security","text":"<p>Developers are responsible for providing (or using system defaults).</p>"},{"location":"Security-Overview/#authentication-provider","title":"Authentication-Provider","text":"<p>This class, given a user/password, returns the list of authorized roles (on None).  It is invoked by the system when client apps log in.</p> <p>Developers must:</p> <pre><code>* Provide this class\n\n* Identify the class in `config.py`\n</code></pre> <p> </p>"},{"location":"Security-Overview/#authentication-data","title":"Authentication Data","text":"<p>Developers must determine the data required to authenticate users.  This can be a SQL Database, LDAP, AD, etc.  It is separate from user databases so it can be shared between systems.  The Authentication-Provider uses it to authenticate a user/password, and return their roles.</p> <p> </p>"},{"location":"Security-Overview/#declare_security","title":"<code>declare_security</code>","text":"<p>Add code to the pre-created (empty) Python module that defines table/role filters.  The system merges these into each retrieval.  These declarations are processed on system startup as described below.</p> <p> </p>"},{"location":"Security-Overview/#system-processing","title":"System Processing","text":"<p>System processing is summarized below.</p> <p> </p>"},{"location":"Security-Overview/#startup-declare_security","title":"Startup: <code>declare_security</code>","text":"<p>When you start the server, the system (<code>api_logic_server_run.py</code>) imports <code>declare_security</code>.  This:</p> <ol> <li> <p>Imports <code>from security.system.security_manager import Grant, Security</code>, which sets up SQLAlchemy listeners for all database access calls</p> </li> <li> <p>Creates <code>Grant</code> objects, internally maintained for subsequent use on API calls (SQLAlchemy read events).</p> </li> </ol> <p> </p>"},{"location":"Security-Overview/#login-call-auth-provider","title":"Login: Call Auth-Provider","text":"<p>When users log in, the app <code>POST</code>s their id/password to the system, which invokes the Authentication-Provider to autthenticate and return a set of roles.  These are tokenized and returned to the client, and passed in the header of subsequent requests.</p> <p> </p>"},{"location":"Security-Overview/#api-security-manager","title":"API: Security Manager","text":"<p>This provides:</p> <ul> <li> <p>The <code>Grant</code> function, to save the filters for each table/role</p> </li> <li> <p>Filtering, by registering for and processing the SQLAlchemy <code>receive_do_orm_execute</code> event to enforce filters.</p> </li> </ul> <p> </p>"},{"location":"Security-Overview/#server-user-state","title":"Server: User State","text":"<p>The server provides the functions for login (using the Authentication-Provider).  This returns the JWT which users supply in the header of subsequent requests.</p> <p>As the server processes requests, it validates JWT presence, and provides <code>current_user_from_JWT()</code> to return this data for the Security Manager.</p> <p> </p>"},{"location":"Security-Overview/#use-cases","title":"Use Cases","text":""},{"location":"Security-Overview/#data-security","title":"Data Security","text":"<p>Security enables you to hide certain rows from designated roles, such as a list of HR actions.</p> <p> </p>"},{"location":"Security-Overview/#multi-tenant","title":"Multi-Tenant","text":"<p>Some systems require the data to be split between multiple customers.  One approach here is to 'stamp' each row with a client_id, associate client_id with each customers, and then add the client_id to each search.  The sample illustrates how this can be achieved with authorization:</p> <pre><code>Grant(  on_entity = models.Category,\n        to_role = Roles.tenant,\n        filter = models.Category.Client_id == Security.current_user().client_id)  # User table attributes\n</code></pre> <p> </p>"},{"location":"Security-Overview/#status-preview","title":"Status: Preview","text":"<p>This preview is intended to:</p> <ul> <li>Confirm approach to role-based row authorization, using SQLAlchemy adding-global-where functionality.  See also the examples.<ul> <li>Note using SQLAlchemy means that filters apply to all SAFRS and custom api access</li> <li>SQLAlchemy support is working quite well!</li> </ul> </li> <li>Confirm whether the basic filtering capability meets the requirements of 1 real-world app<ul> <li>Once certain use case is multi-tenent<ul> <li>Each row is stamped with a <code>client_id</code></li> <li>User table identifies users' <code>client_id</code></li> <li>Enforced in <code>declare_security.py</code>:</li> </ul> </li> <li>Preliminary finding - first test case worked on real-world app</li> </ul> </li> <li>Confirm the approach to authentication, including using authentication-providers</li> </ul> <p> </p> <p>This preview is not meant to explore:</p> <ul> <li>System issues such as performance, caching, etc.</li> </ul> <p> </p>"},{"location":"Security-Overview/#trying-this-on-your-own-project","title":"Trying this on your own project","text":"<p>We'd love the feedback.  Follow the directions below, and please contact the authors.</p> <p> </p>"},{"location":"Security-Overview/#appendix-internals","title":"Appendix: Internals","text":"<p>The Security Manager and sqlite Authentication-Provider are built into created projects from the system's prototype project.</p>"},{"location":"Tech--Notes/","title":"About Tech Notes","text":"<p>The material here is not required for using API Logic Server.  It's simply some learnings on some of the underlying technology which you might find useful.</p>"},{"location":"Tech-4GL/","title":"Is this a 4GL?","text":"<p>API Logic is definitely not a 4GL.</p> <p>4GLs are procedural lanaguage, requiring you to state in detail how do define certain functions.</p> <p>API Logic Server is declarative.  See, for example, support for declarative logc.</p>"},{"location":"Tech-CodeSpaces/","title":"CodeSpaces","text":"<p>CodeSpaces is a GitHub project that enables you to use VSCode in your Browser to develop on rapidly deployed docker containers.  It's quite remarkable.  </p>"},{"location":"Tech-CodeSpaces/#making-api-logic-server-work-with-codespaces","title":"Making API Logic Server work with Codespaces","text":"<p>This page describes the (internal) journey to make Codespaces work.  It is intended to provide feedback to the Codespaces team, and perhaps to others trying to make projects works with Codespaces.</p> <p>To use Codespaces, see the procedure here.</p> <p>TL;DR:</p> <p>With a fair amount of help, I can now create executable API Logic Server Projects with minimal configuration.  Open items are:</p> <ol> <li> <p>Ability to push created project to new git repo (this is the biggest item)</p> </li> <li> <p>Cleaner way to compute the Host Address</p> </li> <li> <p>Cleaner way to create public Ports</p> </li> </ol> <p> </p>"},{"location":"Tech-CodeSpaces/#creating-containerized-projects","title":"Creating containerized projects","text":"<p>Containerized API Logic Project creation was already provided, so I was able to create projects and open them in Codespaces with no additional work.</p> <p> </p>"},{"location":"Tech-CodeSpaces/#host-and-port-configuration","title":"Host and Port Configuration","text":"<p>API Logic Server creates web apps, so is senstive to Host and Port designations.  </p> <p> </p>"},{"location":"Tech-CodeSpaces/#first-try-manual-host-and-port-configuration","title":"First Try: Manual Host and Port Configuration","text":"<p>After some investigation and help from forums, I was able to define Run Configurations to make API Logic Server Projects run, like this:</p> <pre><code>        {\n\"name\": \"Codespaces-ApiLogicServer\",\n\"type\": \"python\",\n\"request\": \"launch\",\n\"program\": \"api_logic_server_run.py\",\n\"redirectOutput\": true,\n\"justMyCode\": false,\n\"args\": [\n\"--flask_host=localhost\", \"--port=5656\", \"--verbose=True\",\n\"--swagger_host=valhuber-tutorial-apilogicproject-jjr5qwg72vxg-5656.githubpreview.dev\", \"--swagger_port=443\", \"--http_type=https\"\n],\n\"console\": \"integratedTerminal\"\n},\n</code></pre> <p>I regarded this as barely adequate, far too fiddly to be considered friendly.  So, I looked for ways to automate this, so you could run with the standard Run Configuration, either in Codespaces or locally:</p> <pre><code>        {\n\"name\": \"ApiLogicServer\",\n\"type\": \"python\",\n\"request\": \"launch\",\n\"program\": \"api_logic_server_run.py\",\n\"redirectOutput\": true,\n\"justMyCode\": false,\n\"args\": [\"--flask_host=localhost\", \"--port=5656\", \"--swagger_host=localhost\", \"--verbose=False\"],\n\"console\": \"integratedTerminal\"\n},\n</code></pre> <p> </p>"},{"location":"Tech-CodeSpaces/#automated-host-address-port-configuration","title":"Automated Host Address / Port Configuration","text":"<p>For this, I updated api_logic_server_run.py (the python file that starts the server):</p> <pre><code>    use_codespace_defaulting = True  # experimental support to run default launch config\n    if use_codespace_defaulting and os.getenv('CODESPACES') and swagger_host == 'localhost':\n        app_logger.info('\\n Applying Codespaces default port settings')\n        swagger_host = os.getenv('CODESPACE_NAME') + '-5656.githubpreview.dev'\n        swagger_port = 443\n        http_type = 'https'\n</code></pre> <p>Good progress, enabling users to run locally or in Codespaces with the same Run Configuration (shown above).  But it still required users to create the port, so I wanted to automate that...</p> <p> </p>"},{"location":"Tech-CodeSpaces/#automated-port-creation","title":"Automated Port Creation","text":"<p>The Codecpaces team showed me how to create ports in the .devcontainer/devcontainer.json, adding lines like:</p> <pre><code>    \"portsAttributes\": {\n\"5656\": {\n\"label\": \"AdminApp\"\n}\n},\n\n// Use 'forwardPorts' to make a list of ports inside the container available locally.\n\"forwardPorts\": [5656],\n</code></pre> <p>A big step forward, but it failed because the Port was not public.</p> <p> </p>"},{"location":"Tech-CodeSpaces/#make-the-created-port-public","title":"Make the created port public","text":"<p>This link describes how to work around missing setting for creating public ports.  </p> <p>This approach relies upon the <code>gh</code> CLI.  Adding this to the <code>devcontainer</code> installs the <code>gh</code> CLI,</p> <pre><code>    \"features\": {\n\"github-cli\": \"latest\"\n},\n\n\"postAttachCommand\": \"/bin/bash .devcontainer/setup.sh\"\n</code></pre> <p>This enables us to /bin/bash .devcontainer/setup.sh:</p> <pre><code>gh codespace ports visibility 5656:public -c $CODESPACE_NAME\n</code></pre> <p>As noted in form, this may be subject to race conditions, so I also updated the <code>.bashrc</code> built by ApiLogicServer:</p> <pre><code>if [[ -z \"${CODESPACES}\" ]]; then\nLOAD_GIT=\"Not Codespaces\"\nelse\necho \"Now: gh codespace ports visibility 5656:public -c $CODESPACE_NAME\"\ngh codespace ports visibility 5656:public -c $CODESPACE_NAME\nfi\n</code></pre> <p>Not pretty, but API Logic Server users would not see this.</p> <p>@nbsp;</p>"},{"location":"Tech-CodeSpaces/#outstanding-items","title":"Outstanding Items","text":""},{"location":"Tech-CodeSpaces/#create-new-projects-from-codespaces-currently-not-working","title":"Create New Projects from Codespaces (currently not working)","text":"<p>We also explored creating a new project from the Codespaces example itself.  You can create projects under Codespaces just as you do for local installs:</p> Create new project in Codespaces<pre><code>cd ..   # back to the Workspaces folder\nApiLogicServer create --db_url= --project_name=fromcs\n</code></pre> <p>Problems occur, however, when you try to add existing project to git:</p> <ol> <li>Create <code>fromcs</code> on GitHub (leave it empty to avoid merges)</li> <li>Attempt to push:</li> </ol> Push to git (fails)<pre><code>cd fromcs        # created above\ngit init\ngit branch -m main  # as required... git projects often created with this as default branch (vs. say, master)\ngit add .\ngit commit -m 'First commit'\ngit remote add origin https://github.com/valhuber/fromcs.git\ngit remote -v\ngit remote set-url origin \"https://valhuber@github.com/valhuber/fromcs.git\"\ngit push origin main  # may need to be master\nremote: Permission to valhuber/fromcs.git denied to valhuber.\n      fatal: unable to access 'https://github.com/valhuber/fromcs.git/': The requested URL returned error: 403```\n\nGit config status:\n```bash title=\"git config --list\"\napi_logic_server@codespaces-9f8d7a:/workspaces/fromcs$ git config --list\n      credential.helper=/.codespaces/bin/gitcredential_github.sh\n      user.name=Val Huber\n      user.email=valjhuber@gmail.com\n      gpg.program=/.codespaces/bin/gh-gpgsign\n      core.repositoryformatversion=0\ncore.filemode=true\ncore.bare=false\ncore.logallrefupdates=true\nremote.origin.url=https://github.com/valhuber/fromcs.git\n      remote.origin.fetch=+refs/heads/*:refs/remotes/origin/*\n      api_logic_server@codespaces-9f8d7a:/workspaces/fromcs$ </code></pre> <p> </p>"},{"location":"Tech-CodeSpaces/#stable-host","title":"Stable Host","text":""},{"location":"Tech-CodeSpaces/#cleaner-public-port-creation","title":"Cleaner Public Port Creation","text":""},{"location":"Tech-Conference-PyCon23-Talk/","title":"PyCon23 Talk","text":"<p>Talk Guidelines</p> <p>Submittals</p> <p> </p>"},{"location":"Tech-Conference-PyCon23-Talk/#title","title":"Title","text":"<p>Creating Web Applications Instantly with API Logic Server - create with one command, customize in your IDE</p>"},{"location":"Tech-Conference-PyCon23-Talk/#description","title":"Description","text":"<p>This Talk introduces a meaningfully faster and simpler approach for building database web apps.</p> <p> </p>"},{"location":"Tech-Conference-PyCon23-Talk/#overview","title":"Overview","text":"<p>In this talk:</p> <ul> <li>You'll see a complete, multi-table database web app - built, run, customized in VSCode<ul> <li>You'll be able to use it tomorrow on your organizations databases</li> </ul> </li> <li>You'll see several popular technologies in use (listed below)<ul> <li>You can explore these - running code, in a working project</li> </ul> </li> </ul> <p> </p>"},{"location":"Tech-Conference-PyCon23-Talk/#what-is-api-logic-server","title":"What is API Logic Server?","text":"<p>API Logic Server is an open source Python system for creating customizable database web app projects from a database:</p> <ul> <li> <p>API: endpoint for each table - filtering, sorting, pagination and related data access</p> </li> <li> <p>Admin UI: multi-page / multi-table apps, with page navigations, automatic joins and declarative hide/show</p> </li> </ul> <p>Projects are Customizable - use VSCode for  edit/debug</p> <p>Declare spreadsheet-like rules for multi-table derivations and constraints, extensible with Python </p> <p> </p>"},{"location":"Tech-Conference-PyCon23-Talk/#excellent-intro-to-popular-technologies","title":"Excellent Intro to Popular Technologies","text":"<p>This tutorial introduces other technologies you perhaps wanted to explore, with running code:</p> Technology Used For Python Customization SQLAlchemy ORM database access Flask Web Framework VSCode IDE Codespaces Cloud-based Dev Container APIs Networked database access Docker Isolated Containers React-Admin Simplified React UI framework Declarative What not how <p> </p>"},{"location":"Tech-Conference-PyCon23-Talk/#audience","title":"Audience","text":"<p>This tutorial is for developers interested in database systems, and the technologies above.  Required background:</p> <ul> <li> <p>Basic programming: <code>if/else</code>, parameterized function calls, <code>row.column</code> object access, and basic event oriented programming.  Python experience is not required.</p> </li> <li> <p>Some database: aware of tables, columns and foreign keys.</p> </li> </ul> <p> </p>"},{"location":"Tech-Conference-PyCon23-Talk/#outline","title":"Outline","text":"<p>This will be 75% live demo, with slides for context and background:</p> <ul> <li> <p>Introduction (5 min) - why the project was created</p> </li> <li> <p>Create Codespace (5) - create Codespace, access in Browser</p> </li> <li> <p>Create API Logic Project (5) - use CLI to create project from pre-supplied database</p> </li> <li> <p>Explore Project (10) - explore the created UI, exercise the API in Swagger</p> </li> <li> <p>Customize Project (10) - use VSCode (in Browser) to add an API Endpoint and debug it, hide/show UI fields</p> </li> <li> <p>Declarative Rules (10) - use VSCode to declare spreadsheet like rules, and test/debug</p> </li> <li> <p>Wrap (15) - final remarks, questions, other topics to explore (testing, schema migration)</p> </li> </ul> <p>Yes, a lot to cover, but automation makes it possible.  Even easy.</p> <p> </p>"},{"location":"Tech-Conference-PyCon23-Talk/#requirements","title":"Requirements","text":"<p>An internet connection, though I can demo locally if that becomes a problem.</p>"},{"location":"Tech-Conference-PyCon23-Tutorial/","title":"PyCon23 Tutorial","text":""},{"location":"Tech-Conference-PyCon23-Tutorial/#description","title":"Description","text":"<p>This Tutorial introduces a meaningfully faster and simpler approach for building database web apps.</p> <p> </p>"},{"location":"Tech-Conference-PyCon23-Tutorial/#overview","title":"Overview","text":"<p>In this tutorial:</p> <ul> <li>You'll build a complete, multi-table database web app - built, run, customized in VSCode<ul> <li>You'll be able to use it tomorrow on your organizations databases</li> </ul> </li> <li>You'll see several popular technologies in use (listed below)<ul> <li>You can explore these - running code, in a working project</li> </ul> </li> </ul> <p> </p>"},{"location":"Tech-Conference-PyCon23-Tutorial/#what-is-api-logic-server","title":"What is API Logic Server?","text":"<p>API Logic Server is an open source Python system for creating customizable database web app projects from a database:</p> <ul> <li> <p>API: endpoint for each table - filtering, sorting, pagination and related data access</p> </li> <li> <p>Admin UI: multi-page / multi-table apps, with page navigations, automatic joins and declarative hide/show</p> </li> </ul> <p>Projects are Customizable - use VSCode for  edit/debug</p> <p>Declare spreadsheet-like rules for multi-table derivations and constraints, extensible with Python (key innovation)</p> <p> </p>"},{"location":"Tech-Conference-PyCon23-Tutorial/#excellent-intro-to-popular-technologies","title":"Excellent Intro to Popular Technologies","text":"<p>This tutorial introduces other technologies you perhaps wanted to explore, with running code:</p> Technology Used For Python Customization SQLAlchemy ORM database access Flask Web Framework VSCode IDE Codespaces Cloud-based Dev Container APIs Networked database access Docker Isolated Containers React-Admin Simplified React UI framework Declarative What not how <p> </p>"},{"location":"Tech-Conference-PyCon23-Tutorial/#requirements","title":"Requirements","text":"<p>You'll need a laptop, and a GitHub account.  Your dev environment will not be affected.</p> <p> </p>"},{"location":"Tech-Conference-PyCon23-Tutorial/#audience","title":"Audience","text":"<p>This tutorial is for developers interested in database systems, and the technologies above.  Required background:</p> <ul> <li> <p>Basic programming: <code>if/else</code>, parameterized function calls, <code>row.column</code> object access, and basic event oriented programming.  Python experience is not required.</p> </li> <li> <p>Some database: aware of tables, columns and foreign keys.</p> </li> </ul> <p> </p>"},{"location":"Tech-Conference-PyCon23-Tutorial/#outline","title":"Outline","text":"<p>Short lectures, plus watch/do labs:</p> Section Minutes Contents Introduction 15 Project origin Start Codespace 15 VSCode, in your browser Create Project 15 Database pre-supplied Explore 30 API, UI Customize 30 * API: add endpoint* UI: hide/show fields Declarative Rules 30 Declare/debug Wrap 15 (2.25 hours) <p> </p>"},{"location":"Tech-Conference-PyCon23-Tutorial/#text-outline","title":"Text Outline","text":"<ul> <li> <p>Introduction (15 min) - why the project was created</p> </li> <li> <p>Create Codespace (15 min) - create Codespace, access in Browser</p> </li> <li> <p>Create API Logic Project (15) - use CLI to create project from pre-supplied database</p> </li> <li> <p>Explore Project (30) - explore the created UI, exercise the API in Swagger</p> </li> <li> <p>Customize Project (30) - use VSCode (in Browser) to add an API Endpoint and debug it, hide/show UI fields</p> </li> <li> <p>Declarative Rules (30) - use VSCode to declare spreadsheet like rules, and test/debug</p> </li> <li> <p>Wrap (15 - 2.25 hours) - final remarks, other topics to explore (testing, schema migration)</p> </li> </ul> <p>Yes, a lot to cover, but automation makes it possible.  Even easy.</p>"},{"location":"Tech-Conference/","title":"Conference","text":"<p>Submission materials for PyCon 2023, April 19 in Salt Lake City.  Links:</p> <ul> <li> <p>Tutorial Samples</p> </li> <li> <p>Proposal Submission</p> </li> </ul>"},{"location":"Tech-Conference/#description","title":"Description","text":""},{"location":"Tech-Conference/#title","title":"Title","text":"<p>How to Create Web Applications Instantly with API Logic Server - create with one command, customize in your IDE</p>"},{"location":"Tech-Conference/#description_1","title":"Description","text":"<p>Creating web-oriented database projects requires substantial time and background.  In this Tutorial, we introduce a meaningfully faster and simpler approach.</p> <p> </p>"},{"location":"Tech-Conference/#overview","title":"Overview","text":"<p>In this tutorial:</p> <ul> <li>Seeing is believing - you will build, run and customize a complete multi-table database web app<ul> <li>You will be able to use it tomorrow on your organizations databases</li> </ul> </li> <li>You will also gain an excellent introduction to several popular Python technologies -- web apps, database access, project development, etc.</li> </ul> <p> </p>"},{"location":"Tech-Conference/#what-is-api-logic-server","title":"What is API Logic Server?","text":"<p>API Logic Server is an open source Python system that creates customizable database web app projects:</p> <ul> <li> <p>Creation is Instant: create executable projects from your database with a single command.  Projects are Highly Functional, providing:</p> <ul> <li> <p>API: an endpoint for each table, with filtering, sorting, pagination and related data access</p> </li> <li> <p>Admin UI: multi-page / multi-table apps, with page navigations, automatic joins and declarative hide/show</p> </li> </ul> </li> <li> <p>Projects are Customizable, using your IDE: such as VSCode, PyCharm, etc, for familiar edit/debug services</p> </li> <li> <p>Business Logic Automation: using unique spreadsheet-like rules, extensible with Python </p> </li> </ul> <p> </p>"},{"location":"Tech-Conference/#tutorial-build-and-customize-a-system","title":"Tutorial - build and customize a system","text":"<p>In this Tutorial, you will:</p> <ul> <li> <p>Create an interesting multi-table application from a pre-supplied sample database</p> </li> <li> <p>Run it</p> </li> <li> <p>Customize it using VSCode.</p> </li> <li> <p>Learn about declarative, spreadsheet-like business logic for multi-table constraints and derivations</p> </li> </ul> <p> </p>"},{"location":"Tech-Conference/#excellent-intro-to-popular-technologies","title":"Excellent Intro to Popular Technologies","text":"<p>This talk will also give you an intro to other technologies you may have already wanted to explore, with running code you can extend:</p> Technology Used For Notes Python Popular OO Language New to Python?  This is a great place to learn it * Start with running code * Explore, edit and debug in VSCode * No install, no config SQLAlchemy Popular Python ORM Python-friendly object-oriented database access Flask Popular Python Web Framework Use to add custom endpoints (examples provided) VSCode Popular IDE Use to customize API Logic Projects Codespaces Cloud-based Dev Container Provides IDE, git, etc - via a Browser interface APIs Networked database access Via the SAFRS framework Docker Isolated Containers Eg., DBMS, API Logic Server, Your App React-Admin Simplified React UI framework Further simplified via YAML model Declarative Vague term (\"what not how\") We'll describe key aspects <p> </p>"},{"location":"Tech-Conference/#what-you-will-need","title":"What you will need","text":"<p>You will need a laptop with a Browser connection, and a GitHub account.  You do not need a Python install, a database, or an IDE... and if you do have these, they won't be affected.</p> <p> </p>"},{"location":"Tech-Conference/#audience","title":"Audience","text":"<p>This tutorial is for developers interested in database systems, and the technologies above.  Required background:</p> <ul> <li> <p>Basic programming familiarity (if you are familiar with <code>if/else</code>, parameterized function calls, <code>row.column</code> object access, and basic event oriented programming, you are all set).  Python experience is not required.</p> </li> <li> <p>Some database background (if you have heard of tables, columns and foreign keys, you are good to go).</p> </li> </ul> <p> </p>"},{"location":"Tech-Conference/#outline","title":"Outline","text":"<p>This will be a series of short lectures, and hands-on usage (watch and/or do):</p> Section Duration We'll cover Introduction 15 min * What is API Logic Server* Why we wrote it Starting Codespaces 15 min (total 30) * Create a cloud-based development environment * Access it VSCode via your browser) Create Project 15 min (total 45) Using pre-supplied sample database Explore Project 30 min (total 1.25 hours) * User Interface - a multi-page, multi-table application* API - using Swagger to explore pagination, filtering etc Customize Project 30 min (total 1.75 hours) * Explore Project Structure in VSCode * API: Add an Endpoint, and test it with the debugger* UI: Adjust captions, hide/show fields Business Logic 30 min (total 2.25 hours) * what it is * how to declare it * how it runs * how to debug it * what it means to be declarative Other Topics 15 min (total 2.25 hours) * Testing with the Behave Framework * Schema Migrations with Alembic <p>Yes, a lot to cover, but automation makes it possible.  Even easy.</p> <p> </p>"},{"location":"Tech-Conference/#additional-notes","title":"Additional Notes","text":"<p>Since API Logic Server is open source, you can obtain it - explore its value, and/or investigate the Popular Technologies listed in the table above.</p> <p> </p>"},{"location":"Tech-Conference/#speaking-experience","title":"Speaking Experience","text":"<p>I have given hundreds of technology presentations to large and small groups, for both technical and business audiences.</p> <ul> <li> <p>I lead the PACE DBMS effort at Wang Labs, so gave many presentations for press briefings, User Conference Keynotes and working sessions, etc.</p> </li> <li> <p>I was the CTO at Versata, so served as the lead technical presenter at User Groups and Conferences.</p> </li> </ul>"},{"location":"Tech-Docker/","title":"Docker","text":""},{"location":"Tech-Docker/#appendix-general-docker-procedures","title":"Appendix: General Docker Procedures","text":"<p>The sections below outline learnings from a beginners use of Docker (me).  If they save you time, we're both happy.</p>"},{"location":"Tech-Docker/#docker-installation","title":"Docker Installation","text":"<p>It's simple on a Mac, running natively.  Other configurations may cause drama:</p> <ul> <li>Virtualization - under virtualization (e.g., VMWare Fusion - running windows under Mac), it is much slower.</li> <li>Bootcamp - I was not able to make it work -- Windows thought the firmware did not support virtualization (on a large Intel-based Macbook Pro)</li> </ul> <p>On the Fusion Windows, it seemed that I needed Windows Pro (not Home).  There are various sites that discuss Windows Home.  I was not willing to fiddle with that, so I just went Pro, which worked well.</p> <p> </p>"},{"location":"Tech-Docker/#creating-containerized-api-logic-server-projects-for-vscode","title":"Creating Containerized API Logic Server Projects for VSCode","text":"<p>When you use API Logic Server to create projects, the resultant projects can run with a <code>venv</code> (locally installed Python), or in a Docker container.</p> <p>To make this work, <code>ApiLogicServer create</code> builds the following files in your project:</p> <ul> <li>.devcontainer/devcontainer.json</li> <li>For_VSCode.dockerfile</li> </ul> <p> </p>"},{"location":"Tech-Docker/#preparing-a-python-image-for-api-logic-server","title":"Preparing a Python Image (for API Logic Server)","text":"<p>Recall that an image is something you can store on Docker Hub so others can download and run.  It's a good idea for project to have a repository of docker images, such as ApiLogicServer, test databases, etc.</p> <p>The running thing is called a container.  They can but typically do not utilize local storage, instead accessing external files through mounts, and external systems (databases, APIs) via docker networks and ports.</p> <p>I had to prepare a Docker image for ApiLogicServer (providing Python, API Logic Server CLI and runtime libraries).  That requires a Dockerfile, where I also keep my notes.</p> <p>The process was straight-forward using the noted links... until <code>pyodbc</code> was added for Sql Server.  That added 500MB, and was quite complicated.</p> <p> </p>"},{"location":"Tech-Docker/#preparing-a-database-image-for-self-contained-databases","title":"Preparing a Database Image (for self-contained databases)","text":"<p>In addition to the ApiLogicServer image, I wanted folks to be able to access a dockerized MySQL database.  Further, I wanted this to be self-contained to avoid creating files on folks' hard drives.</p> <p>I therefore needed to:</p> <ol> <li>acquire a self-contained MySQL image (again, that's not the default - the default is data persisted to a volume), and</li> <li>update this database with test data</li> <li>save this altered container as an image (<code>docker commit...</code>)</li> </ol> <p>I used this Dockerfile which again includes my notes.</p> <p> </p>"},{"location":"Tech-Docker/#sql-server-docker-creation","title":"SQL Server Docker creation","text":"<p>It was prepared as described in this Dockerfile.</p> <p>For JDBC tools, specify: <code>jdbc:sqlserver://localhost:1433;database= NORTHWND</code></p>"},{"location":"Tech-Install-Python/","title":"Python Installation","text":""},{"location":"Tech-Install-Python/#install-python-if-required","title":"Install Python (if required)","text":"<p>To install Python:</p> <ul> <li> <p>On Windows - run the windows installer - be sure to specify \"add Python to Path\"</p> </li> <li> <p>On Mac/Linux - your OS may provide installer options.</p> <ul> <li> <p>For example, Ubuntu provides the Software Update utility.  </p> </li> <li> <p>Mac users can use the standard installer; follow the recommendations to install certificates and update your shell.</p> </li> </ul> <p>Installing Python on the Mac can be... dramatic.  Consult the Troubleshooting Guide.</p> <ul> <li>Alternatively, many prefer using homebrew, as described here</li> </ul> </li> </ul>"},{"location":"Tech-Proven/","title":"Is this a Proven Technology?","text":"<p>There are several novel elements of API Logic Server:</p> <ul> <li>Logic, using spreadsheet-like rules, extensible with Python</li> <li>Automated Admin Apps - multi-page, multi-table, automatic joins</li> <li>Models, expressed in Python, instead of massive code generation</li> <li>Extensible, using a standard language, in standard IDEs such as VSCode or PyCharm</li> </ul> <p>It's therefore quite reasonable to ask whether this technology is proven.</p> <p>It has been.</p> <p>Key aspects of this technology first surfaced in PACE, Wang's highly regarded DBMS with over 6500 installed sites. It provided a relational query engine with rule enforcement, an application builder, and a query/report writer. The technology was awarded several patents for rules and application generation.</p> <p>The next major implementation was Versata, a J2EE app dev system with over 700 sites. Funded by the founders of Microsoft, SAP, Ingres and Informix, it went public in 2000 with an IPO exceeding $3B.</p> <p>These commercial implementations both cost in the range of $35,000 - $50,000 per CPU.  Now available in open source. </p>"},{"location":"Tech-Python-311/","title":"Python 3.11","text":""},{"location":"Tech-Python-311/#python-311","title":"Python 3.11","text":"<p>Requires <code>psycopg2-binary==2.9.5</code>.</p> <p>Fails to run:</p> <pre><code>(venv) val@Vals-MPB-14 ApiLogicServer % ApiLogicServer welcome\nTraceback (most recent call last):\n  File \"/Users/val/dev/servers/install/ApiLogicServer/venv/bin/ApiLogicServer\", line 33, in &lt;module&gt;\n    sys.exit(load_entry_point('ApiLogicServer==6.4.3', 'console_scripts', 'ApiLogicServer')())\n             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n  File \"/Users/val/dev/servers/install/ApiLogicServer/venv/bin/ApiLogicServer\", line 25, in importlib_load_entry_point\n    return next(matches).load()\n           ^^^^^^^^^^^^^^^^^^^^\n  File \"/Library/Frameworks/Python.framework/Versions/3.11/lib/python3.11/importlib/metadata/__init__.py\", line 198, in load\n    module = import_module(match.group('module'))\n             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n  File \"/Library/Frameworks/Python.framework/Versions/3.11/lib/python3.11/importlib/__init__.py\", line 126, in import_module\n    return _bootstrap._gcd_import(name[level:], package, level)\n           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n  File \"&lt;frozen importlib._bootstrap&gt;\", line 1206, in _gcd_import\n  File \"&lt;frozen importlib._bootstrap&gt;\", line 1178, in _find_and_load\n  File \"&lt;frozen importlib._bootstrap&gt;\", line 1149, in _find_and_load_unlocked\n  File \"&lt;frozen importlib._bootstrap&gt;\", line 690, in _load_unlocked\n  File \"&lt;frozen importlib._bootstrap_external&gt;\", line 940, in exec_module\n  File \"&lt;frozen importlib._bootstrap&gt;\", line 241, in _call_with_frames_removed\n  File \"/Users/val/dev/servers/install/ApiLogicServer/venv/lib/python3.11/site-packages/api_logic_server_cli/cli.py\", line 81, in &lt;module&gt;\n    from create_from_model.model_creation_services import ModelCreationServices\n  File \"/Users/val/dev/servers/install/ApiLogicServer/venv/lib/python3.11/site-packages/api_logic_server_cli/create_from_model/model_creation_services.py\", line 21, in &lt;module&gt;\n    from api_logic_server_cli.sqlacodegen_wrapper import sqlacodegen_wrapper\n  File \"/Users/val/dev/servers/install/ApiLogicServer/venv/lib/python3.11/site-packages/api_logic_server_cli/sqlacodegen_wrapper/sqlacodegen_wrapper.py\", line 22, in &lt;module&gt;\n    from sqlacodegen_wrapper.sqlacodegen.sqlacodegen.codegen import CodeGenerator\n  File \"/Users/val/dev/servers/install/ApiLogicServer/venv/lib/python3.11/site-packages/api_logic_server_cli/sqlacodegen_wrapper/sqlacodegen/sqlacodegen/codegen.py\", line 9, in &lt;module&gt;\n    from inspect import ArgSpec\nImportError: cannot import name 'ArgSpec' from 'inspect' (/Library/Frameworks/Python.framework/Versions/3.11/lib/python3.11/inspect.py)\n(venv) val@Vals-MPB-14 ApiLogicServer % \n</code></pre>"},{"location":"Tech-Python/","title":"Python for a Java developer","text":""},{"location":"Tech-Python/#python-for-a-java-developer","title":"Python for a Java Developer","text":"<p>I quite like Python.  I've used assembler, PL/1, and Java.  Python (particularly with good IDEs) is my favorite.</p> <p>Though, there were some surprises I wish I'd been told about.  So, here you go.</p> <p> </p>"},{"location":"Tech-Python/#basics","title":"Basics","text":"<p>You'll discover these soon enough:</p> <ol> <li> <p>Indents vs. braces - obvious, but the real implication is that you need an IDE, because they keep track of indents (vs. spaces).  I've used PyCharm and VSCode, both are wonderful: great editors, debuggers.</p> </li> <li> <p>Non-typed - well-known, but you can (should) use Type Hints for clarity, and code completion.</p> </li> <li> <p>CLI - Python includes great tools for making Command Line Interfaces, like Click.  A little fiddly, you might want to have a look at these examples (near the end), which uses ArgParse.</p> </li> <li> <p>Modules - are not packages.  There is a magic file <code>__init.py__</code> that makes a directory into a module.</p> </li> </ol> <p> </p>"},{"location":"Tech-Python/#pip-environments-and-pythonpath","title":"Pip, environments and PythonPath","text":"<p>Pip is how to load libraries (packages) - not by setting up folder.  It's great, but quickly leads to Pyton's version of \"DLL Hell\" where libraries interfere from different projects.  So, the best practice is to set up Virtual Environments.</p> <p>A related issue is loading classes / modules at runtime.  Be clear on your <code>PythonPath</code>.  And, be aware the some IDEs (PyCharm is one) provide super-friendly support to simplify things by setting this automatically.  Which is nice, until you discover that a program that runs in the IDE fails outside it.  Days of fun.</p> <p> </p>"},{"location":"Tech-Python/#import-is-a-4-letter-word","title":"Import is a 4 letter word","text":"<p>Oy, where do I start.</p> <p> </p>"},{"location":"Tech-Python/#executable-non-class-code-runs-on-import","title":"Executable - non-class code runs on import","text":"<p>First, imports are executable... so what does that mean.</p> <ul> <li> <p>The key underlying fact is that Python does not require all code to be in a class.  </p> </li> <li> <p>On import, all the non-class code actually runs.  It is not just setting up paths.</p> </li> </ul> <p> </p>"},{"location":"Tech-Python/#imports-often-fail-to-compile","title":"Imports often fail to compile","text":"<p>I still do not understand where Python and the IDE figure out what I can import.  You'll find lots of Stack Overflow articles on imports (e.g., sibling imports).</p> <p>For me, it usually degenerates into a trial and error exercise.  You might find sibling imports a useful project to fiddle with.</p> <p> </p>"},{"location":"Tech-Python/#circular-imports","title":"Circular Imports","text":"<p>I understand that Python's 1-pass nature means your imports have to be in a certain order to work.  I have spent days battling this.  I hope you have better luck, but at least you have a heads up.  As always, introduce changes in small numbers to avoid having lots of potential problems.</p> <p> </p>"},{"location":"Tech-Python/#mac-installs","title":"Mac Installs","text":"<p>If you like imports, you'll love Mac installs.</p> <p>Way back when, Apple installed Python.  Python 2.  Which is very old - Python3 is now the standard.</p> <p>But Mac was stuck with Python == Python2.  Which probably gets you the wrong version.</p> <p>I guess as folks dealt with this, there arose many ways of installing - brew, the Python installer, maybe others.</p> <p>And that was further compounded by alternate ways of running Pip, things like <code>venv</code>.</p> <p>As I flailed, I tried many of them.  The end result was that I finally concluded I did not know what I was running.</p> <p>So, and I hope you avoid this, I wound having to re-install my computer.  Just wow.</p> <p>Where I wound up was simple:</p> <ul> <li>stick with the Python.org installer</li> <li>I am not using <code>venv</code> or <code>pip</code> directly; I use them with Python(3) so I know they are consistent:</li> </ul> <pre><code>python3 -m venv venv  # of course, it *might* be Python, not Python3 (!)\npython3 -m pip install ApiLogicServer\n</code></pre>"},{"location":"Tech-m1/","title":"M1 Mac","text":"<p>This page documents my move from a 2019 Intel MBP 16 to a 2021 M1 Pro 14 (32G).</p>"},{"location":"Tech-m1/#requirements","title":"Requirements","text":"<p>Besides typical home use, I rely on this machine for API Logic Server dev.  That entails testing across</p> Aspect Specifics Using OS Mac, Windows 11, Unix (Ubuntu) Parallels 14 DB Sqlite, MySql, Sql/Server, Postgres Docker IDE VSCode, Pycharm Docs GitHub Pages, MKDocs, Google Docs, slides Other Better Touch Tool"},{"location":"Tech-m1/#notes","title":"Notes","text":""},{"location":"Tech-m1/#parallels-windows11","title":"Parallels / Windows11","text":"<p>This was rather remarkable.  Under MBP 16 / VMWare Fusion / Windows 10, boot time was 70 seconds.  Under M1 / Parallels / Windows 11, it is 8-10 seconds.</p>"},{"location":"Tech-m1/#docker-for-apilogicserver","title":"Docker - For ApiLogicServer","text":"<p>Installs and runs without issue.  </p>"},{"location":"Tech-m1/#initially-slower","title":"Initially slower","text":"<p>It is slower, however, on M1.  For example, once started, the <code>ApiLogicServer welcome</code> command takes under a second on x86, but 7-9 on M1.</p>"},{"location":"Tech-m1/#update-arm-based-images-are-quite-fast","title":"Update - ARM-based images are quite fast","text":"<p>On investigation, you can create separate docker images for x86 vs. ARM.  The ARM version starts instantly.</p>"},{"location":"Tech-m1/#building-dual-docker-images-failing","title":"Building Dual Docker Images - failing","text":"<p>It appears to be possible to build images that run on both AMD and ARM, but I have not been able to address that.   Initial attempt failed with:</p> <pre><code>multiarch-support:amd64 : Depends: libc6:amd64 (&gt;= 2.3.6-2) but it is not inst\n</code></pre> <p>Researching this.</p>"},{"location":"Tech-m1/#install-initially-failed-due-to-psycopg2-postgres","title":"Install initially failed due to <code>psycopg2</code> (Postgres)","text":"<p>Ran into significant drame with Postgres support - <code>psycopg2</code>.  Under investigation.  Evidently this is not supported out of the box.  There are various approaches that work if you are willing to install Postgres locally.  I had been using Docker, so this remains an open item.</p> <p>So that M1 Macs work, API Logic Server version 05.03.34 has removed the psycopg2 from the install, so it needs to be installed manually.</p>"},{"location":"Tech-m1/#resolved-m1-support-released","title":"Resolved - M1 support released","text":"<p>Update: as of Oct 2022, the most recent release of <code>psycopg2</code> provides ARM support.  With this, Postgres happily runs fine.  As of 6.1.2, it will no longer require manual install.</p>"},{"location":"Tech-m1/#docker-databases-running","title":"Docker Databases - running","text":"<p>The Docker database images work for M1 Macs, except SQL/Server (it fails to start). It is architecture specific.</p> <p>These solutions were successful as described here.  Many thanks for the following information:</p> <ul> <li> <p>ODBC Driver</p> </li> <li> <p>SQL/Server</p> </li> </ul>"},{"location":"Tech-mkdocs-material/","title":"Mkdocs Material","text":"<p>When I first started the project, I used GitHub Wiki for docs.  It worked, but... meh.  In particular, combining site and page navigation into 1 tree on the right obscured the organization of the docs... and product.  That's a serious problem.</p> <p>I was delighted to discover GitHub Docs where you can build a minimal web site of static pages.</p> <p>But what really made it work was the addition of mkdocs-material, which is now the basis for the current docs.  It enabled me to define navigation (the left tree), and automitically creates the table of contents on the right.  I think you'll agree the transformation was magical.</p> <p>It was not to hard to set up, since my pages were all markdown.  Hightlights, to perhaps save you some time:</p> <ol> <li> <p>Create a docs folder</p> <ul> <li>If you have wiki docs, you can get all the pages using the link in the lower right</li> </ul> </li> <li> <p>Create a <code>mkdocs.yml</code> (navigation, etc)</p> </li> <li> <p>Create a GitHub Workflow so that when you commit doc changes, the doc site is rebuilt.</p> </li> </ol> <p>There was 1 confusion, which was nearly funny.  I read the gh-pages docs to say that I should put my pages in that branch.  Uh-uh.  That's the branch used to build the html output; when it built, it overwrote my source pages.  Not a big problem, but a surprise you probably want to avoid.</p>"},{"location":"Troubleshooting/","title":"Troubleshooting","text":"<p>Please report bugs as GitHub Issues.</p>"},{"location":"Troubleshooting/#project-failed-to-start-march-2022","title":"Project Failed to Start (March, 2022)","text":"<p>Recent updates to included libs have broken previous versions of API Logic Server.  This is fixed in a new version (5.00.06) is now available, and recommended.</p> <p>If you are unable to upgrade to the new version, you can repair your existing install like this (your venv should be active):</p> <pre><code>pip install MarkupSafe==1.1.1\npip install Jinja2==2.11.2\n</code></pre> <p> </p>"},{"location":"Troubleshooting/#install-failures","title":"Install Failures","text":""},{"location":"Troubleshooting/#pyodbc-fails-to-install","title":"<code>pyodbc</code> fails to install","text":"<p>For API Logic Server releases 5.02.16 and earlier, installation may fail with issues such as:</p> <pre><code>sql.h not found - your console log might include:\n...\n    src/pyodbc.h:56:10: fatal error: 'sql.h' file not found\n</code></pre> <p>Resolve these as explained in the Quick Start.</p>"},{"location":"Troubleshooting/#unsupported-architecture-macos","title":"Unsupported Architecture - MacOS","text":"<p>You may experience alarming messages when you <code>pip install</code> API Logic Server.  These can occur installing <code>pyodbc</code>, and can occur when installing API Logic Server, or creating <code>venv</code> for created API Logic Projects.  We've seen the following:</p> <pre><code>  \u00d7 Running setup.py install for pyodbc did not run successfully.\n      /Library/Developer/CommandLineTools/SDKs/MacOSX.sdk/usr/include/sys/cdefs.h:807:2: error: Unsupported architecture\n      #error Unsupported architecture\n</code></pre> <p>Resolve this by adding this to your <code>~/.zprofile</code>:</p> <pre><code>PATH=\"/Library/Frameworks/Python.framework/Versions/3.10/bin:${PATH}\"\nexport PATH\nexport ARCHFLAGS=\"-arch x86_64\"  # &lt;=== enable this line\n</code></pre> <p> </p>"},{"location":"Troubleshooting/#initial-project-creation","title":"Initial Project Creation","text":"<p>Project Creation involves 2 steps that can cause errors, described in the following sub-sections.</p>"},{"location":"Troubleshooting/#database-failed-to-open","title":"Database failed to open","text":"<p>The <code>db_url</code> argument is a SQLAlchemy database uri.  Please find several examples we use in our testing.</p>"},{"location":"Troubleshooting/#check-connectivity-using-sql-tools","title":"Check Connectivity using SQL Tools","text":"<p>A typical cause is lack of connectivity to the database.  Use your local database tools to verify connectivity from your machine to the database.</p>"},{"location":"Troubleshooting/#dynamic-model-import-failed","title":"Dynamic model import failed","text":"<p>After the database is opened, it is introspected to build <code>database/models.py</code>, classes used by SQLAlchemy and the API for database access.  The models file may fail to compile, often due to unexpected names.</p> <p>Watch for entries like this in the console log:</p> <pre><code>6. Create api/expose_api_models.py and ui/basic_web_app/app/views.py (import / iterate models)\n.. ..Dynamic model import using sys.path: /Users/val/dev/servers/sqlserver-types/database\n\n===&gt; ERROR - Dynamic model import failed\n\n===&gt; ERROR - Unable to introspect model classes\n.. Using db for meta (models not found)\n.. See ../Troubleshooting#manual-model-repair\n.. ..WARNING - no relationships detected - add them to your database or model\n.. ..  See https://github.com/valhuber/LogicBank/wiki/Managing-Rules#database-design\n</code></pre> <p>You may also encounter errors when the system attempts to start the server, due to invalid model files. These may look like this:</p> <pre><code>Run created ApiLogicServer with command: python /Users/val/dev/servers/sqlserver-types/api_logic_server_run.py localhost\nTraceback (most recent call last):\n  File \"/Users/val/dev/ApiLogicServer/api_logic_server_cli/cli.py\", line 253, in find_meta_data\n</code></pre>"},{"location":"Troubleshooting/#repair-the-model-and-rebuild_from_model","title":"Repair the model, and <code>rebuild_from_model</code>","text":"<p>The system will log errors and attempt to proceed with project creation.  You can then:</p> <ol> <li>Open the project in your IDE, and manually correct the <code>models.py</code> file</li> <li>E.g., specify proper class names</li> <li>Rerun <code>ApiLogicServer</code>, specifying the <code>rebuild_from_model</code> parameter, like this: <pre><code>ApiLogicServer rebuild-from-model\\\n--project_name=~/dev/servers/sqlserver-types\\\n--db_url=mssql+pyodbc://sa:Posey3861@localhost:1433/SampleDB?\\driver=ODBC+Driver+17+for+SQL+Server&amp;trusted_connection=no\n</code></pre></li> <li>You will most likely want to activate the api and app files:</li> <li><code>api/expose_api_models_created.py</code> - this file is not used in actual operation, but provided so you can merge or copy it over <code>api/expose_api_models.py</code></li> <li><code>ui/admin/admin-created.yaml</code> - this file is not used in actual operation, but provided so you can merge or copy it over <code>ui/admin/admin.yaml</code></li> </ol> <p>For more on rebuild, see Rebuilding.</p> <p> </p>"},{"location":"Troubleshooting/#docker","title":"Docker","text":"<p>Docker can dramatically simplify installation, but be aware of the topics described in the sub-sections below:</p>"},{"location":"Troubleshooting/#docker-on-windows","title":"Docker on Windows","text":"<p>Docker requires Windows Pro for a native install, using hyper-v.  If Docker Desktop fails to start, check these instructions.</p> <p>If you have Windows Home, be aware it's not supported, but some brave souls have found ways.</p> <p>Docker sometimes fails with multi-level virtualization, such as running Mac &gt; Windows on Fusion.</p>"},{"location":"Troubleshooting/#vs-code-with-docker-unable-to-open-file-unable-to-read-file","title":"VS Code with Docker - unable to open file, unable to read file","text":"<p>Under circumstances still unclear, your container may be unable to locate internal files. Port conflicts can cause re-assignments that need corrections.</p> <p>These are easy to resolve as explained here.</p>"},{"location":"Troubleshooting/#vs-code-damaged-container","title":"VS Code - damaged container","text":"<p>You may need to rebuild your container, as described here.</p>"},{"location":"Troubleshooting/#vs-code-damaged-port-settings","title":"VS code - damaged port settings","text":"<p>You may encounter unexpected port changes, such as using <code>localhost:5657</code> instead of the usual <code>localhost:5656</code>.  Resolve this as shown below:</p>"},{"location":"Troubleshooting/#ide-issues","title":"IDE Issues","text":""},{"location":"Troubleshooting/#code-completion-fails","title":"Code Completion fails","text":"<p>Code completion depends on a properly installed <code>venv</code>.  The digram below shows how code completion exposes valuable services provided by <code>logic_row</code>, and how to verify your <code>venv</code> setting for VSCode:</p>"},{"location":"Troubleshooting/#venv-setup","title":"<code>venv</code> Setup","text":"<p><code>venv</code> setup is automatic for Docker installs.  For local installs, we have seen the issues below.</p>"},{"location":"Troubleshooting/#pycharm","title":"PyCharm","text":"<p>In some installations, PyCharm may fail when your <code>venv</code> is pre-created.  I have found it best to let PyCharm create the <code>venv</code>.</p>"},{"location":"Troubleshooting/#vscode-fails-to-discover-venv","title":"VSCode fails to discover <code>venv</code>","text":"<p>In most cases, VSCode discovers <code>venv</code> environments, whether created prior to launching VSCode, or created inside the newly created project.</p> <p>However, this process occasionally fails.  For example, if you create the project successfully, then delete and recreate it, VSCode may not discover your <code>venv</code>.  This is usually resolved by: 1. Create the <code>venv</code> as described in the Quick Start 2. Exit / restart VSCode 3. Use View &gt; Command Palette &gt; Python: Select Interpreter, and select the entry <code>\"venv\u201d: venv</code>.  See the diagram below.</p> <p>It's a good idea to verify your <code>venv</code>, as described in the next section.</p>"},{"location":"Troubleshooting/#verify-your-python-environment","title":"Verify your Python environment","text":"<p>As of release 5.02.10, you can run <code>venv_setup/py.py sys-info</code>, either * Using Command Line Python, or * In VSCode, select the file and use the Launch Configuration Python: Current File.    * Note: this may properly update the Python <code>venv</code> information if it was not properly set</p> <p> </p>"},{"location":"Troubleshooting/#database-issues","title":"Database Issues","text":""},{"location":"Troubleshooting/#docker-api-logic-server-connecting-to-dockerized-databases","title":"Docker API Logic Server connecting to dockerized databases","text":"<p>Even when you can access the database to create the project, your dockerized project may fail to connect.  This is often caused by not enabling your project for network access.  For more information, see connectivity.</p>"},{"location":"Troubleshooting/#mysql","title":"MySQL","text":"<p>You may need to install special packages, e.g. <pre><code>pip install pymysql \npip install cryptography\n</code></pre></p>"},{"location":"Troubleshooting/#sql-server-requires-pyodbc","title":"SQL Server - requires `pyodbc'","text":"<p>SqlServer requires the <code>pyodbc</code> package.  You can't just <code>pip install</code> it.  Attempting to do so will cause errors such as:</p> <pre><code>sql.h not found - your console log might include:\n...\n    src/pyodbc.h:56:10: fatal error: 'sql.h' file not found\n</code></pre> <p>Resolve these as explained in the Quick Start.</p> <p> </p>"},{"location":"Troubleshooting/#python-issues","title":"Python Issues","text":""},{"location":"Troubleshooting/#macos-installs","title":"MacOS Installs","text":"<p>Such installs can be daunting: * Which installer: Python.org installer, or brew? * Additional utlities required: Rely on additional tooling, such as <code>pyenv</code> or <code>venv</code>? * Install history: is the Mac default Python (2) installed?  Are there prior installs, using one or both of the methods above * <code>pyodbc</code> is particularly challenging</p>"},{"location":"Troubleshooting/#choose-simple-case","title":"Choose simple case","text":"<p>With so many variables, I have researched the simplest possible scenario: * Clean Monterey install (no existing Python) * Using <code>zsh</code> (not <code>bash</code>) * Use (only) the Python.org installer</p>"},{"location":"Troubleshooting/#1-basic-install-with-command-line-tools","title":"1. Basic install - with Command Line Tools","text":"<p>Run the installer, including certificates and updates to your shell. </p> <p>Python operations (such as <code>pip install</code>) often require command line tools (<code>c</code> compiler, etc).  You have 2 ways to get these:</p> <ol> <li> <p>Basic command line tools: you have 2 options:</p> </li> <li> <p>As described here</p> </li> <li> <p>Or, many installs (including API Logic Server) will recommend this with a popup dialog (for example, see this article) - do so unless you require <code>xcode</code>...</p> </li> <li> <p>Installation of <code>xcode</code> from the Apple App Store (<code>xcode</code> install takes a long time -- like, all day)</p> </li> </ol> <p>Next, verify the items below.</p>"},{"location":"Troubleshooting/#2-verify-python3-runs","title":"2. Verify <code>python3</code> runs","text":"<p>This enables not only python, but provides access to required utilities:</p> <pre><code>python3 --version\npython3 -m venv --help    # creates a venv\npython3 -m pip --version  # install from PyPi\n</code></pre>"},{"location":"Troubleshooting/#3-optionally-enable-python-as-default","title":"3. Optionally, enable <code>python</code> as default","text":"<p>The basic install requires you use <code>python3</code> and <code>pip3</code>, as shown above.  This can affect command scripts, and is a bit clumsy.  You can make <code>python</code> and <code>pip</code> work, by altering these 2 files:</p> <p>My <code>~/.zshrc</code>:</p> <pre><code>alias python=/Library/Frameworks/Python.framework/Versions/3.10/bin/python3\n\nsetopt interactive_comments\nPATH=~/.local/bin:$PATH\n# python ~/py.py # discussed below\n</code></pre> <p>My <code>~/.zprofile</code>:</p> <pre><code>PATH=\"/Library/Frameworks/Python.framework/Versions/3.10/bin:${PATH}\"\nexport PATH\n# export ARCHFLAGS=\"-arch x86_64\"  \n</code></pre>"},{"location":"Troubleshooting/#4-verify-your-python-environment","title":"4. Verify your Python environment","text":"<p>With all these moving parts, I found it necessary to verify my environment every time I start the terminal:</p> <ol> <li> <p>Obtain <code>py.py</code> from your API Logic Server install - create a project, and copy <code>venv_setup/py.py</code> to your home folder</p> </li> <li> <p>Enable the commented out line in <code>~/.zshrc</code></p> </li> </ol> <p> </p>"},{"location":"Troubleshooting/#certificate-failures","title":"Certificate Failures","text":"<p>You may see this in the console log when running <code>ApiLogicServer run</code>:</p> <pre><code>1. Create ui/basic_web_app with command: flask fab create-app --name /Users/me/Documents/Development/ApiLogicServer/api_logic_server/ui/basic_web_app --engine SQLAlchemy\nresult: Something went wrong &lt;urlopen error [SSL: CERTIFICATE_VERIFY_FAILED] certificate verify failed: unable to get local issuer certificate (_ssl.c:1123)&gt;\\nTry downloading from https://github.com/dpgaspar/Flask-AppBuilder-Skeleton/archive/master.zip\n</code></pre> <p>This may be due to a certificate issue.  The <code>python.org</code> installer includes a script for this, or try this, or like this.</p>"},{"location":"Tutorial/","title":"Tutorial","text":""},{"location":"Tutorial/#about-this-detailed-tutorial","title":"About this Detailed Tutorial","text":"<p>This Detailed Tutorial is designed for these scenarios:</p> <ul> <li> <p>You are using codespaces / VSCode, open to either the tutorial project, or app_fiddle.</p> </li> <li> <p>You are using a local install (pip install) version of API Logic Server, and have reviewed the tutorial readme.</p> </li> <li> <p>You are using a docker version of API Logic Server, and have reviewed the tutorial readme.</p> </li> <li> <p>Projects are pre-configured for VS Code with <code>.devcontainer</code> and <code>launch configurations,</code> so these instructions are oriented around VS Code.</p> </li> <li> <p>You are reviewing the docs, and want to get a sense of the software</p> </li> </ul> <p>In this tutorial, we will explore:</p> <ul> <li> <p>create - we will briefly review what actually happens during the create process</p> </li> <li> <p>run - we will first run the Admin App and the JSON:API.  These will illustrate how automation creates an app and API from a data model.  You can then infer what you'd get for one of your databases.</p> </li> <li> <p>customize - we will then explore some customizations already done for the API and logic, and how to debug them.</p> </li> </ul> <p> </p>"},{"location":"Tutorial/#key-underlying-concepts","title":"Key Underlying Concepts","text":"<p>This tutorial illustrates some key concepts:</p>"},{"location":"Tutorial/#declarative-models-not-code","title":"Declarative Models, not code","text":"<p>Observe that the files for the Admin App and API are models that describe what, not how.  This makes it much easier to understand than large amounts of generated code.</p>"},{"location":"Tutorial/#preserve-customizations","title":"Preserve Customizations","text":"<p>The system is designed to enable <code>rebuild</code>, so you can iterate the data model - without losing your customizations.  In general, such customizations are kept in separate files from the model files.  So, the model files can be rebuilt without affecting customization files.</p>"},{"location":"Tutorial/#logic-automation","title":"Logic Automation","text":"<p>A unique feature of API Logic Server is provision for spreadsheet-like rules, customizable with Python.  Rules address update logic (multi-table derivations and constraints), and security (authorization).</p> <p> </p>"},{"location":"Tutorial/#create","title":"Create","text":"<p>The diagram above summarizes the create / run / customize process.  When you issue the <code>ApiLogicServer create</code> CLI command, the system reads your schema and creates a customizable API Logic Project.</p> <p>It's a video - click to view.</p> <p> </p>"},{"location":"Tutorial/#create-and-establish-python-environment","title":"Create and establish Python Environment","text":"<p>After creation, you must establish your Python environment:</p> <ul> <li>This is already complete for Codespace users</li> <li>Other users - please  see Quick Start &gt; Express Install.  Note there are different instructions, depending on how your install / IDE.</li> </ul> <p> </p>"},{"location":"Tutorial/#start-the-server-and-admin-app","title":"Start the Server and Admin App","text":"<p>Stop any running servers that might still be running from the readme - \u00a0\u00a0(square red button at top in \"Show me how\", below).</p> <p>Now (see Show me how, below, for details):</p> <ol> <li>Start the server with Run and Debug &gt;&gt; 2. API Logic Project: Instant, Open, and then </li> <li>Start the Browser at localhost:5656 by clicking the url shown in the console log.</li> </ol>  Show me how  <p> </p> <p>To run the ApiLogicProject app:</p> <ol> <li> <p>Start the Server:</p> <ol> <li>Click Run and Debug</li> <li>Use the dropdown to select 3. API Logic Project: Logic, and</li> <li>Click the green button to start the server </li> </ol> </li> <li> <p>Start the Browser at localhost:5656 by clicking the url shown in the console log.</p> </li> </ol> <p> </p>"},{"location":"Tutorial/#run","title":"Run","text":"<p>With the server started and the Admin App open in your Browser, we are ready to explore the Admin App and the API.</p> <p> </p>"},{"location":"Tutorial/#admin-app-multi-page-multi-table-automatic-joins","title":"Admin App: Multi-Page, Multi-Table, Automatic Joins","text":"<p>After starting the server and browser, explore the Admin App in your browser:</p> <ol> <li>Navigate to <code>Customer</code><ul> <li>Depending on your screen size, you may need to hit the \"hamburger menu\" (top left) to see the left menu</li> </ul> </li> <li>Click the first Customer row  to see Customer Details</li> <li>Observe the <code>Placed Order List</code> tab at the bottom</li> <li>Click the first Order row</li> <li>Observe the <code>Order Detail List</code> tab at the bottom</li> <li> <p>Observe the elements shown in the diagram</p> <ul> <li>Multi-Page - 2 pages for each table (list, with search, and display)</li> <li>Multi-Table - database relationships (typically from foreign keys) used to build master/detail pages</li> <li>Automatic Joins - the Order Detail table contains <code>ProductId</code>, but the system has joined in the <code>Product Name</code>.  You can edit the <code>admin.yaml</code> file to control such behavior.</li> </ul> </li> <li> <p>Leave the server and browser running</p> </li> </ol> <p> </p> <p>Key Take-away: instant multi-page / multi-table admin apps, suitable for back office, and instant agile collaboration.</p> <p> </p>"},{"location":"Tutorial/#jsonapi-related-data-filtering-sorting-pagination-swagger","title":"JSON:API - Related Data, Filtering, Sorting, Pagination, Swagger","text":"<p>Your API is instantly ready to support ui and integration development, available in swagger, as shown below.  JSON:APIs are interesting because they are client configurable to reduce network traffic and minimize organizational dependencies.</p> <p>The creation process builds not only the API, but also swagger so you can explore it.  The Admin App Home page provides a link to the swagger.  In the browser:</p> <ol> <li>Click Home to open the Home Page</li> <li>Click \"2. API with oas/Swagger\" to see the swagger</li> <li>(Leave the swagger and server running)</li> </ol> <p> </p> <p>Key Take-away: instant rich APIs, with filtering, sorting, pagination and swagger.  Custom App Dev is unblocked.</p> <p> </p>"},{"location":"Tutorial/#customize-and-debug","title":"Customize and Debug","text":"<p>That's quite a good start on a project.  But we've all seen generators that get close, but fail because the results cannot be extended, debugged, or managed with tools such as git and diff.</p> <p>Let's examine how API Logic Server projects can be customized for both APIs and logic.  We'll first have a quick look at the created project structure, then some typical customizations.</p> <p>To run the customized app:</p> <ol> <li>Stop the server</li> <li>Restart the server with Run and Debug &gt;&gt; 3. API Logic Project: Logic, and then</li> <li>Start the Browser at localhost:5656 by clicking the url shown in the console log.</li> <li>Re-access the swagger, and authorize (see below):</li> <li>Click \"2. API with oas/Swagger\" to see the swagger (as you did above)</li> <li>Get an access_token and authorize (see Show me how, below)</li> </ol>  Show me how  <p> </p> <p>Get <code>access_token</code>:</p> <ul> <li>Click the <code>auth/Post</code> endpoint (at the end of the swagger)</li> <li>Click Try it out</li> <li>Click Execute (you'll need to scroll down a bit)</li> <li>Copy the <code>access_token</code> to your clipboard</li> </ul> <p> Authenticate with your <code>access_token</code></p> <ul> <li>Scroll up to the top of the swagger, and click Authorize</li> <li>Enter Bearer, add a space, paste your <code>access_token</code>, click Authorize, and Close the dialog </li> </ul> <p> </p>"},{"location":"Tutorial/#project-structure","title":"Project Structure","text":"<p>Use VS Code's Project Explorer to see the project structure under 3. ApiLogicProject_Logic:</p> Directory Usage Key Customization File Typical Customization <code>api</code> JSON:API <code>api/customize_api.py</code> Add new end points / services <code>database</code> SQLAlchemy Data Model Classes <code>database/customize_models.py</code> Add derived attributes, and relationships missing in the schema <code>logic</code> Transactional Logic <code>logic/declare_logic.py</code> Declare multi-table derivations, constraints, and events such as send mail / messages <code>security</code> Admin App <code>security/declare_security.py</code> Control role-based access to data rows <code>ui</code> Admin App <code>ui/admin/admin.yaml</code> Control field display, ordering, etc. <p>Let's now explore some examples.</p>"},{"location":"Tutorial/#admin-app-customization","title":"Admin App Customization","text":"<p>There is no code for the Admin app - it's behavior is declared in the <code>admin.yaml</code> model file.  Alter this file to control labels, hide fields, change display order, etc:</p> <ol> <li>In your IDE, open Explorer &gt; 3. ApiLogicProject_Logic/ui/admin/admin.yaml</li> <li>Find and alter the string <code>- label: 'Placed Order List'</code> (e.g, make it plural)</li> <li>Click Save</li> <li>Load the updated configuration: in the running Admin App, click Configuration &gt; Reset and Apply</li> <li>Revisit Customer &gt; Order to observe the new label</li> </ol> <p> </p> <p>Key Take-away: you can alter labels, which fields are displayed and their order, etc -- via a simple model.  No need to learn a new framework, or deal with low-level code or html.</p> <p> </p>"},{"location":"Tutorial/#api-customization","title":"API Customization","text":"<p>While a standards-based API is a great start, sometimes you need custom endpoints tailored exactly to your business requirement.  You can create these as shown below, where we create an additional endpoint for <code>add_order</code>.</p> <p>To review the implementation: </p> <ol> <li>In your IDE, open Explorer &gt; 3. ApiLogicProject_Logic/api/customize_api.py:</li> <li>Set the breakpoint as shown in <code>add_order</code></li> <li>Use the swagger to access the <code>ServicesEndPoint &gt; add_order</code>, and</li> <li>Try it out, then </li> <li>execute</li> <li>Your breakpoint will be hit</li> <li>You can examine the variables, step, etc.</li> <li>Click Continue on the floating debug menu (upper right in screen shot below)</li> </ol> <p> </p>"},{"location":"Tutorial/#logic","title":"Logic","text":"<p>API and UI automation are impressive answers to familiar challenges.  Logic automation is a unique answer to a significant and unaddressed problem:</p> <p>For transaction systems, backend constraint and derivation logic is often nearly half the system.  This is not addressed by conventional approaches of \"your code goes here\".</p> <p>The logic portion of API Logic server is a declarative approach - you declare spreadsheet-like rules for multi-table constraints and derivations.  The 5 rules shown below represent the same logic as 200 lines of Python - a remarkable 40X.</p> <p>Since they automate all the re-use and dependency management, rules are 40X more concise than code.  Like a spreadsheet, rules watch for changes, react by automatically executing relevant rules, which can chain to activate other rules; you can visualize the process here.</p> <p>Logic consists of rules and conventional Python code.  Explore it like this:</p> <ol> <li>Open Explorer &gt; 3. ApiLogicProject_Logic/logic/declare_logic.py:</li> <li>Observe the 5 rules highlighted in the diagram below.  These are built with code completion.</li> <li>Set a breakpoint as shown in <code>congratulate_sales_rep</code></li> <li>This event illustrates that logic is mainly rules, customizable with standard Python code</li> <li>Using swagger, re-execute the <code>add_order</code> endpoint</li> <li>When you hit the breakpoint, expand <code>row</code> VARIABLES list (top left)</li> </ol> <p>Internally, rules execute by listening to SQLAlchemy <code>before_flush</code> events, as described here.</p> <p>This rule architecture ensures that rules are always re-used across all client applications and integrations.  This avoids common \"fat client\" approaches that embed logic in user interface controllers, which leads to replication and inconsistency.</p> <p> </p>"},{"location":"Tutorial/#security-logic","title":"Security Logic","text":"<p>The declarative approach addresses not only multi-table derivation and constraint logic, it addresses security.  This controls who can login, and what data they see.  </p> <p>The overview Tutorial noted how grants on the <code>Category</code> table controlled what rows users like u1 and u2 were able to see.  The grant logic is in <code>security/declare_security.py</code>.  For more on security, see here.</p> <p> </p>"},{"location":"Tutorial/#test","title":"Test","text":"<p>You can test using standard api and ui test tools.  We recommend exploring the Behave framework.  This can be used as part of an overall agile approach as described in the Logic Tutorial.</p> <p>TL;DR - features and test scripts are predefined in the sample; to run them (with the server running):</p> <ol> <li>Run Launch Configuration <code>Behave Run Behave</code> </li> <li>Run Launch Configuration <code>Behave Logic Report</code> </li> <li>Open <code>test/api_logic_server_behave/reports/Behave Logic Report.md</code></li> </ol> <p> </p> <p>The sample Scenarios below were chosen to illustrate the basic patterns of using rules. Open the disclosure box (\"Tests - and their logic...\") to see the implementation and notes.   </p> <p>For more information, see Testing with Behave.</p> <p> </p>"},{"location":"Tutorial/#wrap-up","title":"Wrap up","text":"<p>Let's recap what you've seen:</p> <ul> <li> <p>ApiLogicProject Creation and Execution - a database API and an Admin App - created automatically from a database, in moments instead of weeks or months</p> </li> <li> <p>Customizable - the UI, API and Logic - using Visual Studio code, for both editing and debugging</p> </li> </ul>"},{"location":"Tutorial/#next-steps","title":"Next Steps","text":"<p>After the Tutorial, these are excellent next steps:</p> <ul> <li>Try other databases - here are some installed samples, and try your own</li> <li>Explore the Logic Tutorial.</li> </ul>"},{"location":"Tutorial/#docker-cleanup","title":"Docker cleanup","text":"<p>VS Code leaves the container and image definitions intact, so you can quickly resume your session.  You may wish to delete this. It will look something like <code>vsc-ApiLogicProject...</code>.</p> <p> </p>"},{"location":"Working-With-Docker/","title":"Working With Docker","text":""},{"location":"Working-With-Docker/#why-docker-reduce-install-confusion","title":"Why Docker: Reduce Install Confusion","text":"<p>Docker provides significant well-known advantages for development and deployment:</p> <ul> <li> <p>simplified development by eliminating an otherwise complex Python install</p> </li> <li> <p>popular runtime deployment platform, based on a standard Linux base</p> </li> <li> <p>isolation - in both cases, Docker applications encapsulate their environment, eliminating external dependencies.  Likewise, Docker applications will not affect other applications running on the same hardware</p> </li> </ul> <p>ApiLogicServer is therefore provided in a docker image, as described in the Install Guide.  This page provides miscellaneous operational procedures to support Docker.</p> <p> </p>"},{"location":"Working-With-Docker/#install-docker-run-arguments","title":"Install - <code>docker run</code> arguments","text":"<p>Once you've installed Docker itself, the <code>docker run</code> command above installs the ApiLogicServer docker (if it's not already there), and starts it, opening a terminal window on the Docker container.  Notes:</p> <ul> <li>the <code>v ${PWD}:/localhost</code> argument is what enables the ApiLogicServer to create / access the project on your local host</li> <li>Windows - Powershell must be used (due to the <code>$(PWD)</code> syntax)</li> <li>if you use Command Prompt, specify the local directory completely </li> </ul> <p>The arguments mean:</p> <ul> <li>-it - launch a terminal window for the Docker container</li> <li>--name api_logic_server - the name of the image on your local host</li> <li>-rm - remove the container once it stops (your project files are not lost - they are on your local host)</li> <li>-p 5656:5656 - maps local (host) part to Docker port </li> <li>-v ${PWD}:/localhost - maps a local directory to a mount name for Docker.  This is where a directory will be created for your new project.  </li> <li><code>${PWD}</code> is your current folder.  <ul> <li>You could also provide a specific folder, e.g., <code>~/dev/servers</code> (Unix), or <code>C:\\Users\\val\\dev\\servers</code> (windows)</li> </ul> </li> <li><code>/localhost</code>is the mounted volume reference from inside the Docker container</li> <li><code>apilogicserver/api_logic_server</code> - the name of the image to pull from Docker Hub.  </li> <li>This will fetch the image first time, and will run it locally on subsequent runs</li> <li>The image is not automatically refreshed -- install ApiLogicServer updates as described below</li> </ul> <p>You may also wish to add a parameter for networking:</p> <ul> <li>--net my-network - attaches to my-network</li> </ul> <p>On your Docker container, you can inspect your environment: <pre><code>python py.py\n</code></pre></p> <p>Open a new terminal window on your local host, and find your docker IP address:</p> <pre><code>docker inspect api_logic_server  # you will find the ip, e.g., 172.17.0.2\n</code></pre>"},{"location":"Working-With-Docker/#apilogicserver-container-upgrades","title":"ApiLogicServer Container upgrades","text":"<p>You can update your image to a new version:</p> <pre><code>docker pull apilogicserver/api_logic_server\n</code></pre> <p>If you update your ApiLogicServer container to a new version, your existing VSCode projects may appear to be damaged.  You can fix them easily:</p> <ol> <li>Click the Dev Container button (in the lower left)</li> <li>Choose Rebuild Container</li> </ol>"},{"location":"Working-With-Docker/#connect-to-dockerized-databases","title":"Connect to Dockerized Databases","text":"<p>One of the great things about Docker is the ability to install popular databases, with no hassle.  Follow the procedures described in Testing.</p> <p> </p>"},{"location":"Working-With-Docker/#docker-and-api-logic-projects","title":"Docker and API Logic Projects","text":""},{"location":"Working-With-Docker/#create-docker-hub-from-api-logic-project","title":"Create Docker Hub from API Logic Project","text":"<p>You can build a container for your ApiLogicProject:</p> <ol> <li>On Docker Hub, create a docker repository under your docker account.  Some quick terms:<ul> <li>Your docker account can contain multiple docker repositories<ul> <li>It would be typical to use your project name as the docker repository name</li> <li>Note: repository names must be lower case</li> <li>Repository names are scoped by your account - see the diagram above.  You then refer to your docker repository in the CLI commands as <code>your_account/your_repository</code></li> </ul> </li> <li>A docker repository can can be downloaded (pulled) to create a docker image on your local computer</li> <li>A docker image can be run as a docker container</li> <li>Your system might be comprised of multiple docker containers, e.g. one for your API Logic Project, one for your DBMS, etc.</li> </ul> </li> <li>Create / customize your project as your normally would</li> <li>Edit <code>ApiLogicProject.dockerfile</code>: change <code>your_account/your_repository</code> as appropriate<ul> <li>Here is an example</li> </ul> </li> <li>In terminal (not in VSCode docker - docker CLI is not installed there), cd to your project</li> <li>Build a container for your project with terminal commands:</li> </ol> <pre><code>docker build -f ApiLogicProject.dockerfile -t your_account/your_repository --rm .\ndocker tag your_account/your_repository your_account/your_repository:1.00.00\ndocker login; docker push your_account/your_repository:1.00.00\n</code></pre> <p>To run your project container directly...</p> <pre><code>docker run -it --name your_project --rm --net dev-network -p 5656:5656 -p 5002:5002 -v ${PWD}:/localhost your_account/your_repository\n\n# start the image, but open terminal (e.g., for exploring docker container)\ndocker run -it --name your_project --rm --net dev-network -p 5656:5656 -p 5002:5002 -v ${PWD}:/localhost your_account/your_repository bash\n</code></pre> <p> </p>"},{"location":"Working-With-Docker/#start-docker-and-loadrun-api-logic-project-from-github","title":"Start docker and load/run API Logic Project from <code>GitHub</code>","text":"<p>The <code>api_logic_server</code> image supports startup arguments so you can control the <code>api_logic_server</code> container, by running a startup script.  You can run your own script, or use the pre-supplied script (<code>/home/api_logic_server/bin/run-project.sh</code>) to load/run a git project.  For example:</p> <pre><code>docker run -it --name api_logic_server --rm --net dev-network -p 5656:5656 -p 5002:5002 -v ${PWD}:/localhost apilogicserver/api_logic_server sh /home/api_logic_server/bin/run-project.sh https://github.com/valhuber/Tutorial-ApiLogicProject.git /localhost/Project-Fixup.sh\n</code></pre> <p>will load the pre-built sample project from git, and run it.  Prior to execution it runs <code>/localhost/Project-Fixup.sh</code>, which in this case resets ui/admin files, like this:</p> <pre><code>#!/bin/bash\n\necho \" \"\necho \"Project-Fixup script running\"\npwd; ls\necho \" \"\n\ncp ui/admin/admin_custom_nw.yaml ui/admin/admin.yaml\n</code></pre> <p>Instead of using a startup script, you can also use environment variables to achieve the same effect:</p> <pre><code>docker run -it --name api_logic_server --rm --net dev-network -p 5656:5656 -p 5002:5002 -v ${PWD}:/localhost   -e APILOGICSERVER_GIT='https://github.com/valhuber/Tutorial-ApiLogicProject.git' -e APILOGICSERVER_FIXUP='/localhost/Project-Fixup.sh' apilogicserver/api_logic_server\n</code></pre>"},{"location":"Working-with-Flask-AppBuilder/","title":"Working with Flask AppBuilder","text":"<p>This page describes considerations for using Flask AppBuilder.</p>"},{"location":"Working-with-Flask-AppBuilder/#create-flask-appbuilder-admin","title":"Create Flask AppBuilder Admin","text":"<p>The FAB system requires tables in your database for authenticating and authorizing users (tables such as <code>ab_user</code>, <code>ab_user_role</code>, etc).  Create these as follows (Username: <code>admin</code>, Password: <code>p</code>): <pre><code>cd api_logic_server  # your --project_name\nexport PYTHONPATH=\"/Users/val/dev/servers/api_logic_server\"  \nsource venv/bin/activate  # windows: venv\\Scripts\\activate\n(venv)cd ui/basic_web_app\n(venv)$ export FLASK_APP=app\n(venv)$ flask fab create-admin\nUsername [admin]:\nUser first name [admin]:\nUser last name [user]:\nEmail [admin@fab.org]:\nPassword:p\nRepeat for confirmation:p\n</code></pre></p>"},{"location":"Working-with-Flask-AppBuilder/#important-activate-logic-after-create-admin","title":"Important: Activate Logic after Create Admin","text":"<p>For databases other than Northwind, logic is initially disabled to avoid unhashable issues in Create Admin. When Create Admin is completed, edit <code>ui/basic_web_app/app/__init__.py</code> to enable logic like this: <pre><code>import database.models as models\nfrom logic import declare_logic\nfrom logic_bank.logic_bank import LogicBank\n# *** Enable the following after creating Flask AppBuilder Admin ***\nLogicBank.activate(session=db.session, activator=declare_logic)  # edited to enable logic\n</code></pre></p>"},{"location":"Working-with-Flask-AppBuilder/#edit-viewspy-files-to-customize-pages","title":"Edit <code>views.py</code> Files to Customize Pages","text":""},{"location":"Working-with-Flask-AppBuilder/#background-viewspy-files","title":"Background: <code>views.py</code> files","text":"<p>Flask AppBuilder <code>ui/basic_web_app/app/views.py</code> files contain segments like this that define pages for each table:</p> <pre><code>class EmployeeModelView(ModelView):\n   datamodel = SQLAInterface(Employee)\n   list_columns = [\"LastName\", \"Employee.LastName\", \"FirstName\", \"Title\", \"ReportsTo\"]\n   show_columns = [\"LastName\", \"Employee.LastName\", \"FirstName\", \"Title\", \"ReportsTo\", \"BirthDate\", \"HireDate\", \"Address\", \"City\", \"State\", \"Country\", \"PostalCode\", \"Phone\", \"Fax\", \"Email\", \"EmployeeId\"]\n   edit_columns = [\"LastName\", \"FirstName\", \"Title\", \"ReportsTo\", \"BirthDate\", \"HireDate\", \"Address\", \"City\", \"State\", \"Country\", \"PostalCode\", \"Phone\", \"Fax\", \"Email\", \"EmployeeId\"]\n   add_columns = [\"LastName\", \"FirstName\", \"Title\", \"ReportsTo\", \"BirthDate\", \"HireDate\", \"Address\", \"City\", \"State\", \"Country\", \"PostalCode\", \"Phone\", \"Fax\", \"Email\", \"EmployeeId\"]\n\n   related_views = [EmployeeModelView , CustomerModelView]. # FAILS TO COMPILE\n\nappbuilder.add_view(\n      EmployeeModelView, \"Employee List\", icon=\"fa-folder-open-o\", category=\"Menu\")\n\n\n# table already generated per recursion: Track\n</code></pre> <p>These are tedious to code, so they are created by ApiLogicServer.  In order to create good-looking pages, these are not simply column lists, e.g.: * \"Favorite\" fields are placed first     * Control this with the ApiLogicServer CLI <code>--favorites</code> option * Joins are created for \"id\" columns (e.g., show Product Names, not Product IDs) * etc</p>"},{"location":"Working-with-Flask-AppBuilder/#edit-viewspy-display-options-eg-charts","title":"Edit <code>views.py</code> - display options (e.g., charts)","text":"<p>You can hand-edit these pages to make further customizations, including advanced functionality such as charts.</p>"},{"location":"Working-with-Flask-AppBuilder/#mutually-referring-tables-require-fixup","title":"Mutually Referring Tables Require Fixup","text":"<p>Note the <code>related_views</code> makes class references in the code snippet above.  Recall that Python is a 1 pass compiler - you can't make references to things that aren't defined.  </p> <p>So, ApiLogicServer sorts the view classes so that referenced classes are first.  That's why you will see \"table already generated\" messages, as shown above.</p> <p>The problem is that when 2 tables (pages) refer to each other, this is not possible.  So, you need to hand-edit the <code>view.py</code> files to remove these, like this: <pre><code>   related_views = [CustomerModelView]  # omitted self relationships: employees \n</code></pre></p> <p>Self-relationships are corrected automatically; you may need to correct other mutually referring tables.</p>"},{"location":"Working-with-Flask-AppBuilder/#starting-flask-appbuilder","title":"Starting Flask AppBuilder","text":"<p>Start the server as follows: <pre><code>cd ui/basic_web_app\nexport FLASK_APP=app\npython run.py [server [port]\n</code></pre> The console will suggest you login with your Browser at http://localhost:5002.  You may also need to try http://127.0.0.1: 5002.</p>"}]}